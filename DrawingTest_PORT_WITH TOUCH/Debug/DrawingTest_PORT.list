
DrawingTest_PORT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003398  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00070850  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08073de0  08073de0  00090010  2**0
                  CONTENTS
  4 .ARM          00000000  08073de0  08073de0  00090010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08073de0  08073de0  00090010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08073de0  08073de0  00083de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08073de8  08073de8  00083de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08073df0  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000258f0  20000010  08073e00  00090010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20025900  08073e00  00095900  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00090010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b171  00000000  00000000  00090046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a8a  00000000  00000000  0009b1b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0009cc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0009d5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027af6  00000000  00000000  0009de90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fe8  00000000  00000000  000c5986  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff9c4  00000000  00000000  000cd96e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cd332  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000255c  00000000  00000000  001cd3b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08003578 	.word	0x08003578

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08003578 	.word	0x08003578

08000238 <GUI_FillScreen>:

static uint8_t vvram[GUI_HEIGHT*GUI_WIDTH*sizeof(uint16_t)]; // Virtual Video RAM Big endian for 1 line
static __IO uint8_t Done;

void GUI_FillScreen(uint16_t cl)
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	80fb      	strh	r3, [r7, #6]
	for (uint32_t x = 0; x < GUI_HEIGHT*GUI_WIDTH*2;) {
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	e00f      	b.n	8000268 <GUI_FillScreen+0x30>
		vvram[x++] = cl;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	1c5a      	adds	r2, r3, #1
 800024c:	60fa      	str	r2, [r7, #12]
 800024e:	88fa      	ldrh	r2, [r7, #6]
 8000250:	b2d1      	uxtb	r1, r2
 8000252:	4a0a      	ldr	r2, [pc, #40]	; (800027c <GUI_FillScreen+0x44>)
 8000254:	54d1      	strb	r1, [r2, r3]
		vvram[x++] = cl >> 8;
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	0a1b      	lsrs	r3, r3, #8
 800025a:	b299      	uxth	r1, r3
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	1c5a      	adds	r2, r3, #1
 8000260:	60fa      	str	r2, [r7, #12]
 8000262:	b2c9      	uxtb	r1, r1
 8000264:	4a05      	ldr	r2, [pc, #20]	; (800027c <GUI_FillScreen+0x44>)
 8000266:	54d1      	strb	r1, [r2, r3]
	for (uint32_t x = 0; x < GUI_HEIGHT*GUI_WIDTH*2;) {
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 800026e:	d3eb      	bcc.n	8000248 <GUI_FillScreen+0x10>

	}
}
 8000270:	bf00      	nop
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	2000002c 	.word	0x2000002c

08000280 <GUI_UpdateScreen>:
	ILI9341_SetWindow(x1, y1, x2, y2);
	ILI9341_DrawBitmap(x2-x1+1, y2-y1+1, bmp);
}

void GUI_UpdateScreen(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	// HAL_SPI_Transmit_DMA supports the translation size until 0xffff
	// So, I need to separate bitmap
	for (uint32_t y = 0; y < GUI_HEIGHT; y += MAXTXH) {
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e022      	b.n	80002d2 <GUI_UpdateScreen+0x52>
		ILI9341_SetWindow(0, y, GUI_WIDTH-1, y+MAXTXH-1);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	b299      	uxth	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	b29b      	uxth	r3, r3
 8000294:	334f      	adds	r3, #79	; 0x4f
 8000296:	b29b      	uxth	r3, r3
 8000298:	22ef      	movs	r2, #239	; 0xef
 800029a:	2000      	movs	r0, #0
 800029c:	f000 f967 	bl	800056e <ILI9341_SetWindow>
		Done = 0;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <GUI_UpdateScreen+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]

	ILI9341_DrawBitmap(GUI_WIDTH, MAXTXH, &vvram[y*GUI_WIDTH*sizeof(uint16_t)]);
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	4613      	mov	r3, r2
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	1a9b      	subs	r3, r3, r2
 80002ae:	015b      	lsls	r3, r3, #5
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <GUI_UpdateScreen+0x68>)
 80002b4:	4413      	add	r3, r2
 80002b6:	461a      	mov	r2, r3
 80002b8:	2150      	movs	r1, #80	; 0x50
 80002ba:	20f0      	movs	r0, #240	; 0xf0
 80002bc:	f000 f9a0 	bl	8000600 <ILI9341_DrawBitmap>
		while (Done == 0)
 80002c0:	bf00      	nop
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <GUI_UpdateScreen+0x64>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0fa      	beq.n	80002c2 <GUI_UpdateScreen+0x42>
	for (uint32_t y = 0; y < GUI_HEIGHT; y += MAXTXH) {
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3350      	adds	r3, #80	; 0x50
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80002d8:	d3d8      	bcc.n	800028c <GUI_UpdateScreen+0xc>
			;
	}
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2002582c 	.word	0x2002582c
 80002e8:	2000002c 	.word	0x2000002c

080002ec <HAL_SPI_TxCpltCallback>:
//			while (Done == 0)
//			;
//		}
//}
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <HAL_SPI_TxCpltCallback+0x24>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d102      	bne.n	8000304 <HAL_SPI_TxCpltCallback+0x18>
		Done = 1;
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <HAL_SPI_TxCpltCallback+0x28>)
 8000300:	2201      	movs	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]
	}
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40013000 	.word	0x40013000
 8000314:	2002582c 	.word	0x2002582c

08000318 <ILI9341_Init>:
static void DC_H(void);
static void LED_H(void);

// Initialization
void ILI9341_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	ILI9341_Reset();
 800031c:	f000 f990 	bl	8000640 <ILI9341_Reset>
	ILI9341_SoftReset();
 8000320:	f000 f9a0 	bl	8000664 <ILI9341_SoftReset>

#if 1

	/* Power Control A */
	LCD_WR_REG(0xCB);
 8000324:	20cb      	movs	r0, #203	; 0xcb
 8000326:	f000 f9b7 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800032a:	2039      	movs	r0, #57	; 0x39
 800032c:	f000 f9ce 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000330:	202c      	movs	r0, #44	; 0x2c
 8000332:	f000 f9cb 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000336:	2000      	movs	r0, #0
 8000338:	f000 f9c8 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800033c:	2034      	movs	r0, #52	; 0x34
 800033e:	f000 f9c5 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000342:	2002      	movs	r0, #2
 8000344:	f000 f9c2 	bl	80006cc <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF);
 8000348:	20cf      	movs	r0, #207	; 0xcf
 800034a:	f000 f9a5 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800034e:	2000      	movs	r0, #0
 8000350:	f000 f9bc 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000354:	20c1      	movs	r0, #193	; 0xc1
 8000356:	f000 f9b9 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x30);
 800035a:	2030      	movs	r0, #48	; 0x30
 800035c:	f000 f9b6 	bl	80006cc <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8);
 8000360:	20e8      	movs	r0, #232	; 0xe8
 8000362:	f000 f999 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000366:	2085      	movs	r0, #133	; 0x85
 8000368:	f000 f9b0 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800036c:	2000      	movs	r0, #0
 800036e:	f000 f9ad 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x78);
 8000372:	2078      	movs	r0, #120	; 0x78
 8000374:	f000 f9aa 	bl	80006cc <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA);
 8000378:	20ea      	movs	r0, #234	; 0xea
 800037a:	f000 f98d 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800037e:	2000      	movs	r0, #0
 8000380:	f000 f9a4 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000384:	2000      	movs	r0, #0
 8000386:	f000 f9a1 	bl	80006cc <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED);
 800038a:	20ed      	movs	r0, #237	; 0xed
 800038c:	f000 f984 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000390:	2064      	movs	r0, #100	; 0x64
 8000392:	f000 f99b 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000396:	2003      	movs	r0, #3
 8000398:	f000 f998 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 800039c:	2012      	movs	r0, #18
 800039e:	f000 f995 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x81);
 80003a2:	2081      	movs	r0, #129	; 0x81
 80003a4:	f000 f992 	bl	80006cc <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7);
 80003a8:	20f7      	movs	r0, #247	; 0xf7
 80003aa:	f000 f975 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80003ae:	2020      	movs	r0, #32
 80003b0:	f000 f98c 	bl	80006cc <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0);
 80003b4:	20c0      	movs	r0, #192	; 0xc0
 80003b6:	f000 f96f 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 80003ba:	2010      	movs	r0, #16
 80003bc:	f000 f986 	bl	80006cc <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1);
 80003c0:	20c1      	movs	r0, #193	; 0xc1
 80003c2:	f000 f969 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 80003c6:	2010      	movs	r0, #16
 80003c8:	f000 f980 	bl	80006cc <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5);
 80003cc:	20c5      	movs	r0, #197	; 0xc5
 80003ce:	f000 f963 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x3E);
 80003d2:	203e      	movs	r0, #62	; 0x3e
 80003d4:	f000 f97a 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80003d8:	2028      	movs	r0, #40	; 0x28
 80003da:	f000 f977 	bl	80006cc <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7);
 80003de:	20c7      	movs	r0, #199	; 0xc7
 80003e0:	f000 f95a 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x86);
 80003e4:	2086      	movs	r0, #134	; 0x86
 80003e6:	f000 f971 	bl	80006cc <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36);
 80003ea:	2036      	movs	r0, #54	; 0x36
 80003ec:	f000 f954 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x48);
 80003f0:	2048      	movs	r0, #72	; 0x48
 80003f2:	f000 f96b 	bl	80006cc <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A);
 80003f6:	203a      	movs	r0, #58	; 0x3a
 80003f8:	f000 f94e 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x55);    //16bit
 80003fc:	2055      	movs	r0, #85	; 0x55
 80003fe:	f000 f965 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000402:	20b1      	movs	r0, #177	; 0xb1
 8000404:	f000 f948 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f95f 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x18);
 800040e:	2018      	movs	r0, #24
 8000410:	f000 f95c 	bl	80006cc <LCD_WR_DATA>



	/* Display Function Control */
	LCD_WR_REG(0xB6);
 8000414:	20b6      	movs	r0, #182	; 0xb6
 8000416:	f000 f93f 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x08);
 800041a:	2008      	movs	r0, #8
 800041c:	f000 f956 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x82);
 8000420:	2082      	movs	r0, #130	; 0x82
 8000422:	f000 f953 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x27);
 8000426:	2027      	movs	r0, #39	; 0x27
 8000428:	f000 f950 	bl	80006cc <LCD_WR_DATA>



	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2);
 800042c:	20f2      	movs	r0, #242	; 0xf2
 800042e:	f000 f933 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000432:	2000      	movs	r0, #0
 8000434:	f000 f94a 	bl	80006cc <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26); //Gamma set
 8000438:	2026      	movs	r0, #38	; 0x26
 800043a:	f000 f92d 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 	//Gamma Curve (G2.2)
 800043e:	2001      	movs	r0, #1
 8000440:	f000 f944 	bl	80006cc <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0);
 8000444:	20e0      	movs	r0, #224	; 0xe0
 8000446:	f000 f927 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800044a:	200f      	movs	r0, #15
 800044c:	f000 f93e 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 8000450:	2031      	movs	r0, #49	; 0x31
 8000452:	f000 f93b 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000456:	202b      	movs	r0, #43	; 0x2b
 8000458:	f000 f938 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 800045c:	200c      	movs	r0, #12
 800045e:	f000 f935 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000462:	200e      	movs	r0, #14
 8000464:	f000 f932 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000468:	2008      	movs	r0, #8
 800046a:	f000 f92f 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x4E);
 800046e:	204e      	movs	r0, #78	; 0x4e
 8000470:	f000 f92c 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0xF1);
 8000474:	20f1      	movs	r0, #241	; 0xf1
 8000476:	f000 f929 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 800047a:	2037      	movs	r0, #55	; 0x37
 800047c:	f000 f926 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000480:	2007      	movs	r0, #7
 8000482:	f000 f923 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000486:	2010      	movs	r0, #16
 8000488:	f000 f920 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800048c:	2003      	movs	r0, #3
 800048e:	f000 f91d 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000492:	200e      	movs	r0, #14
 8000494:	f000 f91a 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8000498:	2009      	movs	r0, #9
 800049a:	f000 f917 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 f914 	bl	80006cc <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1);
 80004a4:	20e1      	movs	r0, #225	; 0xe1
 80004a6:	f000 f8f7 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 f90e 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80004b0:	200e      	movs	r0, #14
 80004b2:	f000 f90b 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x14);
 80004b6:	2014      	movs	r0, #20
 80004b8:	f000 f908 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80004bc:	2003      	movs	r0, #3
 80004be:	f000 f905 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80004c2:	2011      	movs	r0, #17
 80004c4:	f000 f902 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80004c8:	2007      	movs	r0, #7
 80004ca:	f000 f8ff 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 80004ce:	2031      	movs	r0, #49	; 0x31
 80004d0:	f000 f8fc 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80004d4:	20c1      	movs	r0, #193	; 0xc1
 80004d6:	f000 f8f9 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 80004da:	2048      	movs	r0, #72	; 0x48
 80004dc:	f000 f8f6 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80004e0:	2008      	movs	r0, #8
 80004e2:	f000 f8f3 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80004e6:	200f      	movs	r0, #15
 80004e8:	f000 f8f0 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 80004ec:	200c      	movs	r0, #12
 80004ee:	f000 f8ed 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 80004f2:	2031      	movs	r0, #49	; 0x31
 80004f4:	f000 f8ea 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x36);
 80004f8:	2036      	movs	r0, #54	; 0x36
 80004fa:	f000 f8e7 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80004fe:	200f      	movs	r0, #15
 8000500:	f000 f8e4 	bl	80006cc <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11);
 8000504:	2011      	movs	r0, #17
 8000506:	f000 f8c7 	bl	8000698 <LCD_WR_REG>

	HAL_Delay(120);
 800050a:	2078      	movs	r0, #120	; 0x78
 800050c:	f000 fe00 	bl	8001110 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29);
 8000510:	2029      	movs	r0, #41	; 0x29
 8000512:	f000 f8c1 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x2C);
 8000516:	202c      	movs	r0, #44	; 0x2c
 8000518:	f000 f8d8 	bl	80006cc <LCD_WR_DATA>

	LCD_direction(ROTATE_0);
 800051c:	2000      	movs	r0, #0
 800051e:	f000 f8ef 	bl	8000700 <LCD_direction>
/*	LCD_WR_REG(0xE8);
	LCD_WR_DATA(0x85);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x78); */
	/* Driver timing control B */
	LCD_WR_REG(0xEA);   //needed
 8000522:	20ea      	movs	r0, #234	; 0xea
 8000524:	f000 f8b8 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000528:	2000      	movs	r0, #0
 800052a:	f000 f8cf 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800052e:	2000      	movs	r0, #0
 8000530:	f000 f8cc 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
	Power Control 2 */
/*	LCD_WR_REG(0xC1);
	LCD_WR_DATA(0x10);
	VCOM Control 1 */
	LCD_WR_REG(0xC5);    // needed
 8000534:	20c5      	movs	r0, #197	; 0xc5
 8000536:	f000 f8af 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800053a:	2020      	movs	r0, #32
 800053c:	f000 f8c6 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0x86);
	VCOM Control 2 */
/*	LCD_WR_REG(0x36);
	LCD_WR_DATA(0x48);
	Pixel Format Set */
	LCD_WR_REG(0x3A);
 8000540:	203a      	movs	r0, #58	; 0x3a
 8000542:	f000 f8a9 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x55);    //16bit
 8000546:	2055      	movs	r0, #85	; 0x55
 8000548:	f000 f8c0 	bl	80006cc <LCD_WR_DATA>
/*	LCD_WR_REG(0xF2);
	LCD_WR_DATA(0x00);


	/*Inversion on */
	LCD_WR_REG(0x21);
 800054c:	2021      	movs	r0, #33	; 0x21
 800054e:	f000 f8a3 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(0x36);
	LCD_WR_DATA(0x0F);
*/

	//EXIT SLEEP
	LCD_WR_REG(0x11);
 8000552:	2011      	movs	r0, #17
 8000554:	f000 f8a0 	bl	8000698 <LCD_WR_REG>

	HAL_Delay(120);
 8000558:	2078      	movs	r0, #120	; 0x78
 800055a:	f000 fdd9 	bl	8001110 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29); // no parameter
 800055e:	2029      	movs	r0, #41	; 0x29
 8000560:	f000 f89a 	bl	8000698 <LCD_WR_REG>
//	LCD_WR_DATA(0x2C); no

	LCD_direction(ROTATE_0);
 8000564:	2000      	movs	r0, #0
 8000566:	f000 f8cb 	bl	8000700 <LCD_direction>
	//LED_H();


#endif

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}

0800056e <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y)
{
 800056e:	b590      	push	{r4, r7, lr}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	4604      	mov	r4, r0
 8000576:	4608      	mov	r0, r1
 8000578:	4611      	mov	r1, r2
 800057a:	461a      	mov	r2, r3
 800057c:	4623      	mov	r3, r4
 800057e:	80fb      	strh	r3, [r7, #6]
 8000580:	4603      	mov	r3, r0
 8000582:	80bb      	strh	r3, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	807b      	strh	r3, [r7, #2]
 8000588:	4613      	mov	r3, r2
 800058a:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a);
 800058c:	202a      	movs	r0, #42	; 0x2a
 800058e:	f000 f883 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8);
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29b      	uxth	r3, r3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f896 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x);
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f891 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8);
 80005aa:	887b      	ldrh	r3, [r7, #2]
 80005ac:	0a1b      	lsrs	r3, r3, #8
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f88a 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x);
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f885 	bl	80006cc <LCD_WR_DATA>

	LCD_WR_REG(0x2b);
 80005c2:	202b      	movs	r0, #43	; 0x2b
 80005c4:	f000 f868 	bl	8000698 <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8);
 80005c8:	88bb      	ldrh	r3, [r7, #4]
 80005ca:	0a1b      	lsrs	r3, r3, #8
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f87b 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y);
 80005d6:	88bb      	ldrh	r3, [r7, #4]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f876 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8);
 80005e0:	883b      	ldrh	r3, [r7, #0]
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f86f 	bl	80006cc <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y);
 80005ee:	883b      	ldrh	r3, [r7, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f86a 	bl	80006cc <LCD_WR_DATA>

}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd90      	pop	{r4, r7, pc}

08000600 <ILI9341_DrawBitmap>:

// Call this function after ILI9341_SetWindow
// This function is non blocked
// The variable for Callback is open. User should set by himself
void ILI9341_DrawBitmap(uint16_t w, uint16_t h, uint8_t *s)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	603a      	str	r2, [r7, #0]
 800060a:	80fb      	strh	r3, [r7, #6]
 800060c:	460b      	mov	r3, r1
 800060e:	80bb      	strh	r3, [r7, #4]
	// Enable to access GRAM
	LCD_WR_REG(0x2c);
 8000610:	202c      	movs	r0, #44	; 0x2c
 8000612:	f000 f841 	bl	8000698 <LCD_WR_REG>

	DC_H();
 8000616:	f000 f8d7 	bl	80007c8 <DC_H>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)s, w * h *sizeof(uint16_t));
 800061a:	88fa      	ldrh	r2, [r7, #6]
 800061c:	88bb      	ldrh	r3, [r7, #4]
 800061e:	fb12 f303 	smulbb	r3, r2, r3
 8000622:	b29b      	uxth	r3, r3
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	b29b      	uxth	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	6839      	ldr	r1, [r7, #0]
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <ILI9341_DrawBitmap+0x3c>)
 800062e:	f002 fcd9 	bl	8002fe4 <HAL_SPI_Transmit_DMA>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20025830 	.word	0x20025830

08000640 <ILI9341_Reset>:
//	for (int i = 0; i < lcd_window.height; i++) {
//		HAL_SPI_Transmit(&hspi1, data, lcd_window.width*2, 1000);
//	}
//	//CS_H();
void ILI9341_Reset(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	RESET_L();
 8000644:	f000 f890 	bl	8000768 <RESET_L>
	HAL_Delay(100);
 8000648:	2064      	movs	r0, #100	; 0x64
 800064a:	f000 fd61 	bl	8001110 <HAL_Delay>
	RESET_H();
 800064e:	f000 f897 	bl	8000780 <RESET_H>
	HAL_Delay(100);
 8000652:	2064      	movs	r0, #100	; 0x64
 8000654:	f000 fd5c 	bl	8001110 <HAL_Delay>
	CS_L();
 8000658:	f000 f89e 	bl	8000798 <CS_L>
	LED_H();
 800065c:	f000 f8c0 	bl	80007e0 <LED_H>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <ILI9341_SoftReset>:

void ILI9341_SoftReset(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	uint8_t cmd;
	cmd = 0x01; //Software reset
 800066a:	2301      	movs	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
	DC_L();
 800066e:	f000 f89f 	bl	80007b0 <DC_L>
	if (HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000) != HAL_OK) {
 8000672:	1df9      	adds	r1, r7, #7
 8000674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000678:	2201      	movs	r2, #1
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <ILI9341_SoftReset+0x30>)
 800067c:	f002 fb4c 	bl	8002d18 <HAL_SPI_Transmit>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <ILI9341_SoftReset+0x26>
		Error_Handler();
 8000686:	f000 fb07 	bl	8000c98 <Error_Handler>
	}
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20025830 	.word	0x20025830

08000698 <LCD_WR_REG>:


static void LCD_WR_REG(uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	DC_L();
 80006a2:	f000 f885 	bl	80007b0 <DC_L>
	if (HAL_SPI_Transmit(&hspi1, &data, 1, 1000) != HAL_OK) {
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ac:	2201      	movs	r2, #1
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <LCD_WR_REG+0x30>)
 80006b0:	f002 fb32 	bl	8002d18 <HAL_SPI_Transmit>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <LCD_WR_REG+0x26>
		Error_Handler();
 80006ba:	f000 faed 	bl	8000c98 <Error_Handler>
	}
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20025830 	.word	0x20025830

080006cc <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	DC_H();
 80006d6:	f000 f877 	bl	80007c8 <DC_H>
	if (HAL_SPI_Transmit(&hspi1, &data, 1, 1000) != HAL_OK) {
 80006da:	1df9      	adds	r1, r7, #7
 80006dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e0:	2201      	movs	r2, #1
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <LCD_WR_DATA+0x30>)
 80006e4:	f002 fb18 	bl	8002d18 <HAL_SPI_Transmit>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <LCD_WR_DATA+0x26>
		Error_Handler();
 80006ee:	f000 fad3 	bl	8000c98 <Error_Handler>
	}
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20025830 	.word	0x20025830

08000700 <LCD_direction>:

static void LCD_direction(LCD_Horizontal_t direction)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d826      	bhi.n	800075e <LCD_direction+0x5e>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <LCD_direction+0x18>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000729 	.word	0x08000729
 800071c:	08000737 	.word	0x08000737
 8000720:	08000745 	.word	0x08000745
 8000724:	08000751 	.word	0x08000751
	case ROTATE_0:
		LCD_WR_REG(0x36);
 8000728:	2036      	movs	r0, #54	; 0x36
 800072a:	f7ff ffb5 	bl	8000698 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 800072e:	2048      	movs	r0, #72	; 0x48
 8000730:	f7ff ffcc 	bl	80006cc <LCD_WR_DATA>
		break;
 8000734:	e013      	b.n	800075e <LCD_direction+0x5e>
	case ROTATE_90:
		LCD_WR_REG(0x36);
 8000736:	2036      	movs	r0, #54	; 0x36
 8000738:	f7ff ffae 	bl	8000698 <LCD_WR_REG>
		LCD_WR_DATA(0x28);
 800073c:	2028      	movs	r0, #40	; 0x28
 800073e:	f7ff ffc5 	bl	80006cc <LCD_WR_DATA>
		break;
 8000742:	e00c      	b.n	800075e <LCD_direction+0x5e>
	case ROTATE_180:
		LCD_WR_REG(0x36);
 8000744:	2036      	movs	r0, #54	; 0x36
 8000746:	f7ff ffa7 	bl	8000698 <LCD_WR_REG>
		LCD_WR_DATA(0x88);
 800074a:	2088      	movs	r0, #136	; 0x88
 800074c:	f7ff ffbe 	bl	80006cc <LCD_WR_DATA>
	case ROTATE_270:
		LCD_WR_REG(0x36);
 8000750:	2036      	movs	r0, #54	; 0x36
 8000752:	f7ff ffa1 	bl	8000698 <LCD_WR_REG>
		LCD_WR_DATA(0xE8);
 8000756:	20e8      	movs	r0, #232	; 0xe8
 8000758:	f7ff ffb8 	bl	80006cc <LCD_WR_DATA>
		break;
 800075c:	bf00      	nop
	}
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop

08000768 <RESET_L>:


static void RESET_L(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <RESET_L+0x14>)
 8000774:	f001 fa72 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	42021800 	.word	0x42021800

08000780 <RESET_H>:

static void RESET_H(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078a:	4802      	ldr	r0, [pc, #8]	; (8000794 <RESET_H+0x14>)
 800078c:	f001 fa66 	bl	8001c5c <HAL_GPIO_WritePin>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	42021800 	.word	0x42021800

08000798 <CS_L>:

static void CS_L(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <CS_L+0x14>)
 80007a2:	f001 fa5b 	bl	8001c5c <HAL_GPIO_WritePin>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	42021800 	.word	0x42021800

080007b0 <DC_L>:

static void DC_L(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2108      	movs	r1, #8
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <DC_L+0x14>)
 80007ba:	f001 fa4f 	bl	8001c5c <HAL_GPIO_WritePin>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	42021000 	.word	0x42021000

080007c8 <DC_H>:

static void DC_H(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2108      	movs	r1, #8
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <DC_H+0x14>)
 80007d2:	f001 fa43 	bl	8001c5c <HAL_GPIO_WritePin>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	42021000 	.word	0x42021000

080007e0 <LED_H>:

static void LED_H(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ea:	4802      	ldr	r0, [pc, #8]	; (80007f4 <LED_H+0x14>)
 80007ec:	f001 fa36 	bl	8001c5c <HAL_GPIO_WritePin>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	42020400 	.word	0x42020400

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fc14 	bl	800102a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f8a5 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f959 	bl	8000abc <MX_GPIO_Init>
  MX_DMA_Init();
 800080a:	f000 f92d 	bl	8000a68 <MX_DMA_Init>
  MX_SPI1_Init();
 800080e:	f000 f8ed 	bl	80009ec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
// __HAL_SPI_DISABLE(&hspi3);
  	//  x = y = 0;
  	  ILI9341_Init();
 8000812:	f7ff fd81 	bl	8000318 <ILI9341_Init>
  	  GUI_FillScreen(WHITE);
 8000816:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800081a:	f7ff fd0d 	bl	8000238 <GUI_FillScreen>
  	  GUI_UpdateScreen();
 800081e:	f7ff fd2f 	bl	8000280 <GUI_UpdateScreen>
  	  GUI_FillScreen(RED);
 8000822:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000826:	f7ff fd07 	bl	8000238 <GUI_FillScreen>
  	  GUI_UpdateScreen();
 800082a:	f7ff fd29 	bl	8000280 <GUI_UpdateScreen>
  	  GUI_FillScreen(GREEN);
 800082e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000832:	f7ff fd01 	bl	8000238 <GUI_FillScreen>
  	  GUI_UpdateScreen();
 8000836:	f7ff fd23 	bl	8000280 <GUI_UpdateScreen>
  	  GUI_FillScreen(BLUE);
 800083a:	201f      	movs	r0, #31
 800083c:	f7ff fcfc 	bl	8000238 <GUI_FillScreen>
  	  GUI_UpdateScreen();
 8000840:	f7ff fd1e 	bl	8000280 <GUI_UpdateScreen>
//	//while (Done == 0)
//				;
//			HAL_Delay(250);
//	}

	  HAL_Delay(2000);
 8000844:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000848:	f000 fc62 	bl	8001110 <HAL_Delay>

	  uint32_t 	image_data_logo = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]

			// HAL_SPI_Transmit_DMA supports the translation size until 0xffff
			// So, I need to separate bitmap
			for (uint32_t y = 0; y <  GUI_HEIGHT; y += 80) {
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	e01b      	b.n	800088e <main+0x96>
				ILI9341_SetWindow(0, y, GUI_WIDTH-1, y+80-1);
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	b299      	uxth	r1, r3
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	b29b      	uxth	r3, r3
 800085e:	334f      	adds	r3, #79	; 0x4f
 8000860:	b29b      	uxth	r3, r3
 8000862:	22ef      	movs	r2, #239	; 0xef
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fe82 	bl	800056e <ILI9341_SetWindow>
			//Done = 0;
				ILI9341_DrawBitmap(GUI_WIDTH, 80, &image_data_20[image_data_logo]);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4a35      	ldr	r2, [pc, #212]	; (8000944 <main+0x14c>)
 800086e:	4413      	add	r3, r2
 8000870:	461a      	mov	r2, r3
 8000872:	2150      	movs	r1, #80	; 0x50
 8000874:	20f0      	movs	r0, #240	; 0xf0
 8000876:	f7ff fec3 	bl	8000600 <ILI9341_DrawBitmap>

				image_data_logo += 80*GUI_WIDTH*2;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8000880:	60fb      	str	r3, [r7, #12]
		//while (Done == 0)

				HAL_Delay(250);
 8000882:	20fa      	movs	r0, #250	; 0xfa
 8000884:	f000 fc44 	bl	8001110 <HAL_Delay>
			for (uint32_t y = 0; y <  GUI_HEIGHT; y += 80) {
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	3350      	adds	r3, #80	; 0x50
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000894:	d3df      	bcc.n	8000856 <main+0x5e>
			}
		HAL_Delay(2000);
 8000896:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800089a:	f000 fc39 	bl	8001110 <HAL_Delay>
//					HAL_Delay(250);
//				}

//				HAL_Delay(500);
//
						image_data_logo = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]

					// HAL_SPI_Transmit_DMA supports the translation size until 0xffff
					// So, I need to separate bitmap
					for (uint32_t y = 0; y <  GUI_HEIGHT; y += 80) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	e01b      	b.n	80008e0 <main+0xe8>
						ILI9341_SetWindow(0, y, GUI_WIDTH-1, y+80-1);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	b299      	uxth	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	334f      	adds	r3, #79	; 0x4f
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	22ef      	movs	r2, #239	; 0xef
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff fe59 	bl	800056e <ILI9341_SetWindow>
					//Done = 0;
						ILI9341_DrawBitmap(GUI_WIDTH, 80, &image_data_24[image_data_logo]);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4a22      	ldr	r2, [pc, #136]	; (8000948 <main+0x150>)
 80008c0:	4413      	add	r3, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	2150      	movs	r1, #80	; 0x50
 80008c6:	20f0      	movs	r0, #240	; 0xf0
 80008c8:	f7ff fe9a 	bl	8000600 <ILI9341_DrawBitmap>

						image_data_logo += 80*GUI_WIDTH*2;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 80008d2:	60fb      	str	r3, [r7, #12]
				//while (Done == 0)

						HAL_Delay(250);
 80008d4:	20fa      	movs	r0, #250	; 0xfa
 80008d6:	f000 fc1b 	bl	8001110 <HAL_Delay>
					for (uint32_t y = 0; y <  GUI_HEIGHT; y += 80) {
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3350      	adds	r3, #80	; 0x50
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008e6:	d3df      	bcc.n	80008a8 <main+0xb0>
					}
					HAL_Delay(2000);
 80008e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ec:	f000 fc10 	bl	8001110 <HAL_Delay>

							image_data_logo = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]

						// HAL_SPI_Transmit_DMA supports the translation size until 0xffff
						// So, I need to separate bitmap
						for (uint32_t y = 0; y <  GUI_HEIGHT; y += 80) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	e01b      	b.n	8000932 <main+0x13a>
							ILI9341_SetWindow(0, y, GUI_WIDTH-1, y+80-1);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b299      	uxth	r1, r3
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b29b      	uxth	r3, r3
 8000902:	334f      	adds	r3, #79	; 0x4f
 8000904:	b29b      	uxth	r3, r3
 8000906:	22ef      	movs	r2, #239	; 0xef
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fe30 	bl	800056e <ILI9341_SetWindow>
						//Done = 0;
							ILI9341_DrawBitmap(GUI_WIDTH, 80, &image_data_19[image_data_logo]);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4a0e      	ldr	r2, [pc, #56]	; (800094c <main+0x154>)
 8000912:	4413      	add	r3, r2
 8000914:	461a      	mov	r2, r3
 8000916:	2150      	movs	r1, #80	; 0x50
 8000918:	20f0      	movs	r0, #240	; 0xf0
 800091a:	f7ff fe71 	bl	8000600 <ILI9341_DrawBitmap>

							image_data_logo += 80*GUI_WIDTH*2;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8000924:	60fb      	str	r3, [r7, #12]
					//while (Done == 0)

							HAL_Delay(250);
 8000926:	20fa      	movs	r0, #250	; 0xfa
 8000928:	f000 fbf2 	bl	8001110 <HAL_Delay>
						for (uint32_t y = 0; y <  GUI_HEIGHT; y += 80) {
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	3350      	adds	r3, #80	; 0x50
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000938:	d3df      	bcc.n	80008fa <main+0x102>
//	GUI_FillScreen(RED);
	//ILI9341_SetWindow(0, 0, 240, 320); */
  // ILI9341_SetWindow(0, 0, 240, 320);
  // ILI9341_DrawBitmap(240, 320, image_data_0);

	HAL_Delay(1000);
 800093a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093e:	f000 fbe7 	bl	8001110 <HAL_Delay>
  {
 8000942:	e77f      	b.n	8000844 <main+0x4c>
 8000944:	08028d90 	.word	0x08028d90
 8000948:	0804e590 	.word	0x0804e590
 800094c:	08003590 	.word	0x08003590

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b098      	sub	sp, #96	; 0x60
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	2248      	movs	r2, #72	; 0x48
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fe02 	bl	8003568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000972:	2000      	movs	r0, #0
 8000974:	f001 f998 	bl	8001ca8 <HAL_PWREx_ControlVoltageScaling>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800097e:	f000 f98b 	bl	8000c98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098c:	2302      	movs	r3, #2
 800098e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000990:	2303      	movs	r3, #3
 8000992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000994:	2303      	movs	r3, #3
 8000996:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000998:	2337      	movs	r3, #55	; 0x37
 800099a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800099c:	2307      	movs	r3, #7
 800099e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fa1b 	bl	8001de8 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80009b8:	f000 f96e 	bl	8000c98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2303      	movs	r3, #3
 80009c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2105      	movs	r1, #5
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fe73 	bl	80026c0 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e0:	f000 f95a 	bl	8000c98 <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3760      	adds	r7, #96	; 0x60
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_SPI1_Init+0x74>)
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <MX_SPI1_Init+0x78>)
 80009f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_SPI1_Init+0x74>)
 80009f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a22:	2228      	movs	r2, #40	; 0x28
 8000a24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a3a:	2207      	movs	r2, #7
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a46:	2208      	movs	r2, #8
 8000a48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a4c:	f002 f8da 	bl	8002c04 <HAL_SPI_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f000 f91f 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20025830 	.word	0x20025830
 8000a64:	40013000 	.word	0x40013000

08000a68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a72:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6493      	str	r3, [r2, #72]	; 0x48
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6493      	str	r3, [r2, #72]	; 0x48
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_DMA_Init+0x50>)
 8000a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	201d      	movs	r0, #29
 8000aa4:	f000 fc31 	bl	800130a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa8:	201d      	movs	r0, #29
 8000aaa:	f000 fc48 	bl	800133e <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	4b6c      	ldr	r3, [pc, #432]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a6b      	ldr	r2, [pc, #428]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b69      	ldr	r3, [pc, #420]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4b66      	ldr	r3, [pc, #408]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a65      	ldr	r2, [pc, #404]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b63      	ldr	r3, [pc, #396]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b02:	4b60      	ldr	r3, [pc, #384]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a5f      	ldr	r2, [pc, #380]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b5d      	ldr	r3, [pc, #372]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b5a      	ldr	r3, [pc, #360]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a59      	ldr	r2, [pc, #356]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b57      	ldr	r3, [pc, #348]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b32:	4b54      	ldr	r3, [pc, #336]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a53      	ldr	r2, [pc, #332]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b51      	ldr	r3, [pc, #324]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b4a:	f001 f909 	bl	8001d60 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <MX_GPIO_Init+0x1c8>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2108      	movs	r1, #8
 8000b6a:	4847      	ldr	r0, [pc, #284]	; (8000c88 <MX_GPIO_Init+0x1cc>)
 8000b6c:	f001 f876 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	4844      	ldr	r0, [pc, #272]	; (8000c88 <MX_GPIO_Init+0x1cc>)
 8000b78:	f001 f870 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b82:	4842      	ldr	r0, [pc, #264]	; (8000c8c <MX_GPIO_Init+0x1d0>)
 8000b84:	f001 f86a 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SPI1_NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f248 0120 	movw	r1, #32800	; 0x8020
 8000b8e:	4840      	ldr	r0, [pc, #256]	; (8000c90 <MX_GPIO_Init+0x1d4>)
 8000b90:	f001 f864 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9a:	483d      	ldr	r0, [pc, #244]	; (8000c90 <MX_GPIO_Init+0x1d4>)
 8000b9c:	f001 f85e 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ba6:	483b      	ldr	r0, [pc, #236]	; (8000c94 <MX_GPIO_Init+0x1d8>)
 8000ba8:	f001 f858 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DCX_Pin */
  GPIO_InitStruct.Pin = DCX_Pin;
 8000bac:	2308      	movs	r3, #8
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCX_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4831      	ldr	r0, [pc, #196]	; (8000c88 <MX_GPIO_Init+0x1cc>)
 8000bc4:	f000 feca 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CTRL_Pin */
  GPIO_InitStruct.Pin = LED_CTRL_Pin;
 8000bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4829      	ldr	r0, [pc, #164]	; (8000c88 <MX_GPIO_Init+0x1cc>)
 8000be2:	f000 febb 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4823      	ldr	r0, [pc, #140]	; (8000c8c <MX_GPIO_Init+0x1d0>)
 8000c00:	f000 feac 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000c04:	2320      	movs	r3, #32
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c10:	2302      	movs	r3, #2
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481d      	ldr	r0, [pc, #116]	; (8000c90 <MX_GPIO_Init+0x1d4>)
 8000c1c:	f000 fe9e 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8000c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4815      	ldr	r0, [pc, #84]	; (8000c90 <MX_GPIO_Init+0x1d4>)
 8000c3a:	f000 fe8f 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <MX_GPIO_Init+0x1d4>)
 8000c58:	f000 fe80 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <MX_GPIO_Init+0x1d8>)
 8000c76:	f000 fe71 	bl	800195c <HAL_GPIO_Init>

}
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	; 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000
 8000c88:	42021000 	.word	0x42021000
 8000c8c:	42020c00 	.word	0x42020c00
 8000c90:	42021800 	.word	0x42021800
 8000c94:	42020400 	.word	0x42020400

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_MspInit+0x44>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_MspInit+0x44>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x44>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x44>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cde:	f001 f84f 	bl	8001d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <HAL_SPI_MspInit+0xe4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d15b      	bne.n	8000dca <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d12:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <HAL_SPI_MspInit+0xe8>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	4a30      	ldr	r2, [pc, #192]	; (8000dd8 <HAL_SPI_MspInit+0xe8>)
 8000d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <HAL_SPI_MspInit+0xe8>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <HAL_SPI_MspInit+0xe8>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <HAL_SPI_MspInit+0xe8>)
 8000d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_SPI_MspInit+0xe8>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000d42:	f001 f80d 	bl	8001d60 <HAL_PWREx_EnableVddIO2>
    /**SPI1 GPIO Configuration    
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000d46:	231c      	movs	r3, #28
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d56:	2305      	movs	r3, #5
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	481e      	ldr	r0, [pc, #120]	; (8000ddc <HAL_SPI_MspInit+0xec>)
 8000d62:	f000 fdfb 	bl	800195c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000d68:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <HAL_SPI_MspInit+0xf4>)
 8000d6a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000d74:	2210      	movs	r2, #16
 8000d76:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d9c:	4810      	ldr	r0, [pc, #64]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000d9e:	f000 fae9 	bl	8001374 <HAL_DMA_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000da8:	f7ff ff76 	bl	8000c98 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000dac:	2110      	movs	r1, #16
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000db0:	f000 fd03 	bl	80017ba <HAL_DMA_ConfigChannelAttributes>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000dba:	f7ff ff6d 	bl	8000c98 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000dc2:	655a      	str	r2, [r3, #84]	; 0x54
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_SPI_MspInit+0xf0>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40013000 	.word	0x40013000
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	42021800 	.word	0x42021800
 8000de0:	20025894 	.word	0x20025894
 8000de4:	40020008 	.word	0x40020008

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f94a 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <DMA1_Channel1_IRQHandler+0x10>)
 8000e4a:	f000 fbb6 	bl	80015ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20025894 	.word	0x20025894

08000e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000e82:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <SystemCoreClockUpdate+0x144>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d107      	bne.n	8000e9e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <SystemCoreClockUpdate+0x144>)
 8000e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e005      	b.n	8000eaa <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000e9e:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <SystemCoreClockUpdate+0x144>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	f003 030f 	and.w	r3, r3, #15
 8000ea8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000eaa:	4a46      	ldr	r2, [pc, #280]	; (8000fc4 <SystemCoreClockUpdate+0x148>)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000eb4:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <SystemCoreClockUpdate+0x144>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b0c      	cmp	r3, #12
 8000ebe:	d865      	bhi.n	8000f8c <SystemCoreClockUpdate+0x110>
 8000ec0:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <SystemCoreClockUpdate+0x4c>)
 8000ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec6:	bf00      	nop
 8000ec8:	08000efd 	.word	0x08000efd
 8000ecc:	08000f8d 	.word	0x08000f8d
 8000ed0:	08000f8d 	.word	0x08000f8d
 8000ed4:	08000f8d 	.word	0x08000f8d
 8000ed8:	08000f05 	.word	0x08000f05
 8000edc:	08000f8d 	.word	0x08000f8d
 8000ee0:	08000f8d 	.word	0x08000f8d
 8000ee4:	08000f8d 	.word	0x08000f8d
 8000ee8:	08000f0d 	.word	0x08000f0d
 8000eec:	08000f8d 	.word	0x08000f8d
 8000ef0:	08000f8d 	.word	0x08000f8d
 8000ef4:	08000f8d 	.word	0x08000f8d
 8000ef8:	08000f15 	.word	0x08000f15
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000efc:	4a32      	ldr	r2, [pc, #200]	; (8000fc8 <SystemCoreClockUpdate+0x14c>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	6013      	str	r3, [r2, #0]
      break;
 8000f02:	e047      	b.n	8000f94 <SystemCoreClockUpdate+0x118>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000f04:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <SystemCoreClockUpdate+0x14c>)
 8000f06:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <SystemCoreClockUpdate+0x150>)
 8000f08:	601a      	str	r2, [r3, #0]
      break;
 8000f0a:	e043      	b.n	8000f94 <SystemCoreClockUpdate+0x118>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <SystemCoreClockUpdate+0x14c>)
 8000f0e:	4a30      	ldr	r2, [pc, #192]	; (8000fd0 <SystemCoreClockUpdate+0x154>)
 8000f10:	601a      	str	r2, [r3, #0]
      break;
 8000f12:	e03f      	b.n	8000f94 <SystemCoreClockUpdate+0x118>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <SystemCoreClockUpdate+0x144>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <SystemCoreClockUpdate+0x144>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	091b      	lsrs	r3, r3, #4
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d002      	beq.n	8000f38 <SystemCoreClockUpdate+0xbc>
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d006      	beq.n	8000f44 <SystemCoreClockUpdate+0xc8>
 8000f36:	e00b      	b.n	8000f50 <SystemCoreClockUpdate+0xd4>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000f38:	4a24      	ldr	r2, [pc, #144]	; (8000fcc <SystemCoreClockUpdate+0x150>)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f40:	613b      	str	r3, [r7, #16]
          break;
 8000f42:	e00b      	b.n	8000f5c <SystemCoreClockUpdate+0xe0>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000f44:	4a22      	ldr	r2, [pc, #136]	; (8000fd0 <SystemCoreClockUpdate+0x154>)
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4c:	613b      	str	r3, [r7, #16]
          break;
 8000f4e:	e005      	b.n	8000f5c <SystemCoreClockUpdate+0xe0>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f58:	613b      	str	r3, [r7, #16]
          break;
 8000f5a:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <SystemCoreClockUpdate+0x144>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <SystemCoreClockUpdate+0x144>)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	0e5b      	lsrs	r3, r3, #25
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <SystemCoreClockUpdate+0x14c>)
 8000f88:	6013      	str	r3, [r2, #0]
      break;
 8000f8a:	e003      	b.n	8000f94 <SystemCoreClockUpdate+0x118>

    default:
      SystemCoreClock = msirange;
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <SystemCoreClockUpdate+0x14c>)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	6013      	str	r3, [r2, #0]
      break;
 8000f92:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <SystemCoreClockUpdate+0x144>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <SystemCoreClockUpdate+0x158>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SystemCoreClockUpdate+0x14c>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <SystemCoreClockUpdate+0x14c>)
 8000fb0:	6013      	str	r3, [r2, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	08073da0 	.word	0x08073da0
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	00f42400 	.word	0x00f42400
 8000fd0:	00b71b00 	.word	0x00b71b00
 8000fd4:	08073d90 	.word	0x08073d90

08000fd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001010 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fde:	e003      	b.n	8000fe8 <LoopCopyDataInit>

08000fe0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fe2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fe4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fe6:	3104      	adds	r1, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ff0:	d3f6      	bcc.n	8000fe0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ff4:	e002      	b.n	8000ffc <LoopFillZerobss>

08000ff6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ff6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ff8:	f842 3b04 	str.w	r3, [r2], #4

08000ffc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <LoopForever+0x16>)
	cmp	r2, r3
 8000ffe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001000:	d3f9      	bcc.n	8000ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001002:	f7ff ff29 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f002 fa8b 	bl	8003520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800100a:	f7ff fbf5 	bl	80007f8 <main>

0800100e <LoopForever>:

LoopForever:
    b LoopForever
 800100e:	e7fe      	b.n	800100e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001010:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001014:	08073df0 	.word	0x08073df0
	ldr	r0, =_sdata
 8001018:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800101c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001020:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001024:	20025900 	.word	0x20025900

08001028 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC1_2_IRQHandler>

0800102a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001034:	2004      	movs	r0, #4
 8001036:	f000 f95d 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800103a:	f7ff ff1f 	bl	8000e7c <SystemCoreClockUpdate>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f80e 	bl	8001060 <HAL_InitTick>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	71fb      	strb	r3, [r7, #7]
 800104e:	e001      	b.n	8001054 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001050:	f7ff fe2a 	bl	8000ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001054:	79fb      	ldrb	r3, [r7, #7]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_InitTick+0x68>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d022      	beq.n	80010ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_InitTick+0x6c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_InitTick+0x68>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001080:	fbb1 f3f3 	udiv	r3, r1, r3
 8001084:	fbb2 f3f3 	udiv	r3, r2, r3
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f966 	bl	800135a <HAL_SYSTICK_Config>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10f      	bne.n	80010b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b07      	cmp	r3, #7
 8001098:	d809      	bhi.n	80010ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109a:	2200      	movs	r2, #0
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	f04f 30ff 	mov.w	r0, #4294967295
 80010a2:	f000 f932 	bl	800130a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <HAL_InitTick+0x70>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	e007      	b.n	80010be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e004      	b.n	80010be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e001      	b.n	80010be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000004 	.word	0x20000004

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x1c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x20>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_IncTick+0x1c>)
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	200258fc 	.word	0x200258fc
 80010f4:	20000008 	.word	0x20000008

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200258fc 	.word	0x200258fc

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d004      	beq.n	8001134 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_Delay+0x40>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001134:	bf00      	nop
 8001136:	f7ff ffdf 	bl	80010f8 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	429a      	cmp	r2, r3
 8001144:	d8f7      	bhi.n	8001136 <HAL_Delay+0x26>
  {
  }
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	; (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	; (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0152      	lsls	r2, r2, #5
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0152      	lsls	r2, r2, #5
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b03      	cmp	r3, #3
 8001264:	bf28      	it	cs
 8001266:	2303      	movcs	r3, #3
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3303      	adds	r3, #3
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b04      	subs	r3, #4
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	2107      	movs	r1, #7
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff29 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff40 	bl	800119c <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff90 	bl	8001248 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5f 	bl	80011f4 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff33 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa4 	bl	80012b0 <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e08d      	b.n	80014a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <HAL_DMA_Init+0x138>)
 800138e:	429a      	cmp	r2, r3
 8001390:	d80f      	bhi.n	80013b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <HAL_DMA_Init+0x13c>)
 800139a:	4413      	add	r3, r2
 800139c:	4a45      	ldr	r2, [pc, #276]	; (80014b4 <HAL_DMA_Init+0x140>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	009a      	lsls	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a42      	ldr	r2, [pc, #264]	; (80014b8 <HAL_DMA_Init+0x144>)
 80013ae:	649a      	str	r2, [r3, #72]	; 0x48
 80013b0:	e00e      	b.n	80013d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b40      	ldr	r3, [pc, #256]	; (80014bc <HAL_DMA_Init+0x148>)
 80013ba:	4413      	add	r3, r2
 80013bc:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_DMA_Init+0x140>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	009a      	lsls	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a3c      	ldr	r2, [pc, #240]	; (80014c0 <HAL_DMA_Init+0x14c>)
 80013ce:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 80013e6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80013ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fa38 	bl	8001898 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001430:	d102      	bne.n	8001438 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800144c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d010      	beq.n	8001478 <HAL_DMA_Init+0x104>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b04      	cmp	r3, #4
 800145c:	d80c      	bhi.n	8001478 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fa58 	bl	8001914 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	e008      	b.n	800148a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40020407 	.word	0x40020407
 80014b0:	bffdfff8 	.word	0xbffdfff8
 80014b4:	cccccccd 	.word	0xcccccccd
 80014b8:	40020000 	.word	0x40020000
 80014bc:	bffdfbf8 	.word	0xbffdfbf8
 80014c0:	40020400 	.word	0x40020400

080014c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_DMA_Start_IT+0x20>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e066      	b.n	80015b2 <HAL_DMA_Start_IT+0xee>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d155      	bne.n	80015a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 f97c 	bl	800181a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	2b00      	cmp	r3, #0
 8001528:	d008      	beq.n	800153c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 020e 	orr.w	r2, r2, #14
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e00f      	b.n	800155c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0204 	bic.w	r2, r2, #4
 800154a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 020a 	orr.w	r2, r2, #10
 800155a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001578:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001590:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e005      	b.n	80015b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015ac:	2302      	movs	r3, #2
 80015ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 031c 	and.w	r3, r3, #28
 80015da:	2204      	movs	r2, #4
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d053      	beq.n	800168e <HAL_DMA_IRQHandler+0xd4>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d04e      	beq.n	800168e <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d024      	beq.n	8001648 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 021c 	and.w	r2, r3, #28
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	2104      	movs	r1, #4
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80c0 	beq.w	80017aa <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001632:	e0ba      	b.n	80017aa <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80b6 	beq.w	80017aa <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001646:	e0b0      	b.n	80017aa <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d107      	bne.n	8001666 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0204 	bic.w	r2, r2, #4
 8001664:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 021c 	and.w	r2, r3, #28
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001672:	2104      	movs	r1, #4
 8001674:	fa01 f202 	lsl.w	r2, r1, r2
 8001678:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8093 	beq.w	80017aa <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800168c:	e08d      	b.n	80017aa <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 031c 	and.w	r3, r3, #28
 8001696:	2202      	movs	r2, #2
 8001698:	409a      	lsls	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d04e      	beq.n	8001740 <HAL_DMA_IRQHandler+0x186>
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d049      	beq.n	8001740 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d018      	beq.n	80016ec <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d108      	bne.n	80016da <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d06e      	beq.n	80017ae <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80016d8:	e069      	b.n	80017ae <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d065      	beq.n	80017ae <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80016ea:	e060      	b.n	80017ae <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10b      	bne.n	8001712 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 020a 	bic.w	r2, r2, #10
 8001708:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 021c 	and.w	r2, r3, #28
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171e:	2102      	movs	r1, #2
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d03b      	beq.n	80017ae <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800173e:	e036      	b.n	80017ae <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	f003 031c 	and.w	r3, r3, #28
 8001748:	2208      	movs	r2, #8
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d02e      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x1f8>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d029      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 020e 	bic.w	r2, r2, #14
 800176c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 021c 	and.w	r2, r3, #28
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177a:	2101      	movs	r1, #1
 800177c:	fa01 f202 	lsl.w	r2, r1, r2
 8001780:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017a8:	e002      	b.n	80017b0 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80017aa:	bf00      	nop
 80017ac:	e000      	b.n	80017b0 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80017ae:	bf00      	nop
  return;
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
}
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d103      	bne.n	80017d6 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	72fb      	strb	r3, [r7, #11]
    return status;
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	e01b      	b.n	800180e <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00d      	beq.n	8001804 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	e003      	b.n	8001804 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001802:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	601a      	str	r2, [r3, #0]

  return status;
 800180c:	7afb      	ldrb	r3, [r7, #11]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800181a:	b480      	push	{r7}
 800181c:	b085      	sub	sp, #20
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001830:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001842:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001848:	f003 021c 	and.w	r2, r3, #28
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b10      	cmp	r3, #16
 8001866:	d108      	bne.n	800187a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8001878:	e007      	b.n	800188a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	60da      	str	r2, [r3, #12]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d80a      	bhi.n	80018c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018b8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6513      	str	r3, [r2, #80]	; 0x50
 80018c0:	e007      	b.n	80018d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	009a      	lsls	r2, r3, #2
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80018cc:	4413      	add	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	3b08      	subs	r3, #8
 80018da:	4a0c      	ldr	r2, [pc, #48]	; (800190c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	2201      	movs	r2, #1
 80018f2:	409a      	lsls	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40020407 	.word	0x40020407
 8001908:	40020820 	.word	0x40020820
 800190c:	cccccccd 	.word	0xcccccccd
 8001910:	40020880 	.word	0x40020880

08001914 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a08      	ldr	r2, [pc, #32]	; (8001958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001936:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3b01      	subs	r3, #1
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2201      	movs	r2, #1
 8001942:	409a      	lsls	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	665a      	str	r2, [r3, #100]	; 0x64
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	1000823f 	.word	0x1000823f
 8001958:	40020940 	.word	0x40020940

0800195c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800196a:	e158      	b.n	8001c1e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2101      	movs	r1, #1
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 814a 	beq.w	8001c18 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d00b      	beq.n	80019a4 <HAL_GPIO_Init+0x48>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d007      	beq.n	80019a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001998:	2b11      	cmp	r3, #17
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b12      	cmp	r3, #18
 80019a2:	d130      	bne.n	8001a06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019da:	2201      	movs	r2, #1
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 0201 	and.w	r2, r3, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0xea>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d123      	bne.n	8001a8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	6939      	ldr	r1, [r7, #16]
 8001a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0203 	and.w	r2, r3, #3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80a4 	beq.w	8001c18 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001ad0:	4a5a      	ldr	r2, [pc, #360]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3318      	adds	r3, #24
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d025      	beq.n	8001b48 <HAL_GPIO_Init+0x1ec>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a51      	ldr	r2, [pc, #324]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d01f      	beq.n	8001b44 <HAL_GPIO_Init+0x1e8>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a50      	ldr	r2, [pc, #320]	; (8001c48 <HAL_GPIO_Init+0x2ec>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d019      	beq.n	8001b40 <HAL_GPIO_Init+0x1e4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a4f      	ldr	r2, [pc, #316]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d013      	beq.n	8001b3c <HAL_GPIO_Init+0x1e0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a4e      	ldr	r2, [pc, #312]	; (8001c50 <HAL_GPIO_Init+0x2f4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00d      	beq.n	8001b38 <HAL_GPIO_Init+0x1dc>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a4d      	ldr	r2, [pc, #308]	; (8001c54 <HAL_GPIO_Init+0x2f8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d007      	beq.n	8001b34 <HAL_GPIO_Init+0x1d8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a4c      	ldr	r2, [pc, #304]	; (8001c58 <HAL_GPIO_Init+0x2fc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d101      	bne.n	8001b30 <HAL_GPIO_Init+0x1d4>
 8001b2c:	2306      	movs	r3, #6
 8001b2e:	e00c      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b30:	2307      	movs	r3, #7
 8001b32:	e00a      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b34:	2305      	movs	r3, #5
 8001b36:	e008      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e006      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e004      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e002      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_GPIO_Init+0x1ee>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	f002 0203 	and.w	r2, r2, #3
 8001b50:	00d2      	lsls	r2, r2, #3
 8001b52:	4093      	lsls	r3, r2
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001b5a:	4938      	ldr	r1, [pc, #224]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3318      	adds	r3, #24
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b8e:	4a2b      	ldr	r2, [pc, #172]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f47f ae9f 	bne.w	800196c <HAL_GPIO_Init+0x10>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	4002f400 	.word	0x4002f400
 8001c40:	42020000 	.word	0x42020000
 8001c44:	42020400 	.word	0x42020400
 8001c48:	42020800 	.word	0x42020800
 8001c4c:	42020c00 	.word	0x42020c00
 8001c50:	42021000 	.word	0x42021000
 8001c54:	42021400 	.word	0x42021400
 8001c58:	42021800 	.word	0x42021800

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40007000 	.word	0x40007000

08001ca8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cb8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001cba:	f000 f871 	bl	8001da0 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cc4:	d101      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e03e      	b.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd6:	d101      	bne.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e035      	b.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d101      	bne.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e02f      	b.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001cf0:	4917      	ldr	r1, [pc, #92]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	09db      	lsrs	r3, r3, #7
 8001d06:	2232      	movs	r2, #50	; 0x32
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d18:	e002      	b.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2c:	d102      	bne.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f2      	bne.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d40:	d101      	bne.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e000      	b.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40007000 	.word	0x40007000
 8001d54:	20000000 	.word	0x20000000
 8001d58:	0a7c5ac5 	.word	0x0a7c5ac5
 8001d5c:	cccccccd 	.word	0xcccccccd

08001d60 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6e:	6053      	str	r3, [r2, #4]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40007000 	.word	0x40007000

08001d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @brief Disable dead battery behavior.
  * @note  This feature is secured by secured UCPD1 when system implements security (TZEN=1).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* Disable dead battery behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8e:	6093      	str	r3, [r2, #8]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40007000 	.word	0x40007000

08001da0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	e00a      	b.n	8001dd4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	e001      	b.n	8001dd4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40007000 	.word	0x40007000

08001de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f000 bc5c 	b.w	80026b4 <HAL_RCC_OscConfig+0x8cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfc:	4ba4      	ldr	r3, [pc, #656]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e06:	4ba2      	ldr	r3, [pc, #648]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80e2 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x1fa>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4c>
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	f040 8089 	bne.w	8001f3e <HAL_RCC_OscConfig+0x156>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	f040 8085 	bne.w	8001f3e <HAL_RCC_OscConfig+0x156>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e34:	4b96      	ldr	r3, [pc, #600]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <HAL_RCC_OscConfig+0x66>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f000 bc33 	b.w	80026b4 <HAL_RCC_OscConfig+0x8cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e52:	4b8f      	ldr	r3, [pc, #572]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_RCC_OscConfig+0x80>
 8001e5e:	4b8c      	ldr	r3, [pc, #560]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e66:	e005      	b.n	8001e74 <HAL_RCC_OscConfig+0x8c>
 8001e68:	4b89      	ldr	r3, [pc, #548]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d224      	bcs.n	8001ec2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fde3 	bl	8002a48 <RCC_SetFlashLatencyFromMSIRange>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f000 bc13 	b.w	80026b4 <HAL_RCC_OscConfig+0x8cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e8e:	4b80      	ldr	r3, [pc, #512]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7f      	ldr	r2, [pc, #508]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001e94:	f043 0308 	orr.w	r3, r3, #8
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b7d      	ldr	r3, [pc, #500]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	497a      	ldr	r1, [pc, #488]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eac:	4b78      	ldr	r3, [pc, #480]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	4975      	ldr	r1, [pc, #468]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
 8001ec0:	e025      	b.n	8001f0e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec2:	4b73      	ldr	r3, [pc, #460]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a72      	ldr	r2, [pc, #456]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b70      	ldr	r3, [pc, #448]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	496d      	ldr	r1, [pc, #436]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee0:	4b6b      	ldr	r3, [pc, #428]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	4968      	ldr	r1, [pc, #416]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fda2 	bl	8002a48 <RCC_SetFlashLatencyFromMSIRange>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e3d2      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0e:	f000 fcff 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 8001f12:	4601      	mov	r1, r0
 8001f14:	4b5e      	ldr	r3, [pc, #376]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	fa21 f303 	lsr.w	r3, r1, r3
 8001f26:	4a5c      	ldr	r2, [pc, #368]	; (8002098 <HAL_RCC_OscConfig+0x2b0>)
 8001f28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(TICK_INT_PRIORITY);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7ff f898 	bl	8001060 <HAL_InitTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d052      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x1f8>
        {
          return status;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	e3ba      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d032      	beq.n	8001fac <HAL_RCC_OscConfig+0x1c4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f46:	4b52      	ldr	r3, [pc, #328]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f52:	f7ff f8d1 	bl	80010f8 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f5a:	f7ff f8cd 	bl	80010f8 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x184>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e3a3      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f6c:	4b48      	ldr	r3, [pc, #288]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x172>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f78:	4b45      	ldr	r3, [pc, #276]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a44      	ldr	r2, [pc, #272]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b42      	ldr	r3, [pc, #264]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	493f      	ldr	r1, [pc, #252]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f96:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	493a      	ldr	r1, [pc, #232]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
 8001faa:	e01a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1fa>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fac:	4b38      	ldr	r3, [pc, #224]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a37      	ldr	r2, [pc, #220]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f89e 	bl	80010f8 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1ea>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc0:	f7ff f89a 	bl	80010f8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1ea>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e370      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1d8>
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1fa>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d072      	beq.n	80020d4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_OscConfig+0x218>
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d10e      	bne.n	8002018 <HAL_RCC_OscConfig+0x230>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCC_OscConfig+0x230>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d062      	beq.n	80020d2 <HAL_RCC_OscConfig+0x2ea>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d15e      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e34d      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x248>
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0x284>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x26c>
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a14      	ldr	r2, [pc, #80]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0x284>
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_RCC_OscConfig+0x2a8>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01a      	beq.n	80020aa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7ff f840 	bl	80010f8 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207a:	e00f      	b.n	800209c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff f83c 	bl	80010f8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d908      	bls.n	800209c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e312      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	08073d90 	.word	0x08073d90
 8002098:	20000000 	.word	0x20000000
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209c:	4baa      	ldr	r3, [pc, #680]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0e9      	beq.n	800207c <HAL_RCC_OscConfig+0x294>
 80020a8:	e014      	b.n	80020d4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7ff f825 	bl	80010f8 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2dc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b2:	f7ff f821 	bl	80010f8 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	; 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e2f7      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020c4:	4ba0      	ldr	r3, [pc, #640]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x2ca>
 80020d0:	e000      	b.n	80020d4 <HAL_RCC_OscConfig+0x2ec>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d060      	beq.n	80021a2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x30a>
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d119      	bne.n	8002120 <HAL_RCC_OscConfig+0x338>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f2:	4b95      	ldr	r3, [pc, #596]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x322>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e2d4      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b8f      	ldr	r3, [pc, #572]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	061b      	lsls	r3, r3, #24
 8002118:	498b      	ldr	r1, [pc, #556]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800211e:	e040      	b.n	80021a2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d023      	beq.n	8002170 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b87      	ldr	r3, [pc, #540]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a86      	ldr	r2, [pc, #536]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800212e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe ffe0 	bl	80010f8 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x366>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213c:	f7fe ffdc 	bl	80010f8 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e2b2      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214e:	4b7e      	ldr	r3, [pc, #504]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b7b      	ldr	r3, [pc, #492]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	061b      	lsls	r3, r3, #24
 8002168:	4977      	ldr	r1, [pc, #476]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
 800216e:	e018      	b.n	80021a2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a74      	ldr	r2, [pc, #464]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe ffbc 	bl	80010f8 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002184:	f7fe ffb8 	bl	80010f8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e28e      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002196:	4b6c      	ldr	r3, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d051      	beq.n	8002252 <HAL_RCC_OscConfig+0x46a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d031      	beq.n	800221a <HAL_RCC_OscConfig+0x432>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x3e8>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80021be:	4b62      	ldr	r3, [pc, #392]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c4:	4a60      	ldr	r2, [pc, #384]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80021c6:	f023 0310 	bic.w	r3, r3, #16
 80021ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80021ce:	e007      	b.n	80021e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80021d0:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80021d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d6:	4a5c      	ldr	r2, [pc, #368]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80021d8:	f043 0310 	orr.w	r3, r3, #16
 80021dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80021e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e6:	4a58      	ldr	r2, [pc, #352]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7fe ff82 	bl	80010f8 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x422>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f8:	f7fe ff7e 	bl	80010f8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b07      	cmp	r3, #7
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x422>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e254      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800220a:	4b4f      	ldr	r3, [pc, #316]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800220c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ef      	beq.n	80021f8 <HAL_RCC_OscConfig+0x410>
 8002218:	e01b      	b.n	8002252 <HAL_RCC_OscConfig+0x46a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221a:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002220:	4a49      	ldr	r2, [pc, #292]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7fe ff65 	bl	80010f8 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x45c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7fe ff61 	bl	80010f8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b07      	cmp	r3, #7
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e237      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ef      	bne.n	8002232 <HAL_RCC_OscConfig+0x44a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8109 	beq.w	8002472 <HAL_RCC_OscConfig+0x68a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002264:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10d      	bne.n	800228c <HAL_RCC_OscConfig+0x4a4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	4b35      	ldr	r3, [pc, #212]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4a34      	ldr	r2, [pc, #208]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	4b32      	ldr	r3, [pc, #200]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002288:	2301      	movs	r3, #1
 800228a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228c:	4b2f      	ldr	r3, [pc, #188]	; (800234c <HAL_RCC_OscConfig+0x564>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d118      	bne.n	80022ca <HAL_RCC_OscConfig+0x4e2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_RCC_OscConfig+0x564>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2b      	ldr	r2, [pc, #172]	; (800234c <HAL_RCC_OscConfig+0x564>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a4:	f7fe ff28 	bl	80010f8 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x4d6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ac:	f7fe ff24 	bl	80010f8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x4d6>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1fa      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_RCC_OscConfig+0x564>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x4c4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d01f      	beq.n	8002316 <HAL_RCC_OscConfig+0x52e>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <HAL_RCC_OscConfig+0x51c>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	4a17      	ldr	r2, [pc, #92]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	4a13      	ldr	r2, [pc, #76]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002302:	e018      	b.n	8002336 <HAL_RCC_OscConfig+0x54e>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002304:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002314:	e00f      	b.n	8002336 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231c:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_RCC_OscConfig+0x560>)
 800232e:	f023 0304 	bic.w	r3, r3, #4
 8002332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d058      	beq.n	80023f0 <HAL_RCC_OscConfig+0x608>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7fe fedb 	bl	80010f8 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002344:	e00f      	b.n	8002366 <HAL_RCC_OscConfig+0x57e>
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe fed2 	bl	80010f8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1a6      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002366:	4bb1      	ldr	r3, [pc, #708]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ed      	beq.n	8002350 <HAL_RCC_OscConfig+0x568>
        }
      }

      /* Enable LSESYS additionnally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01b      	beq.n	80023b8 <HAL_RCC_OscConfig+0x5d0>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002380:	4baa      	ldr	r3, [pc, #680]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	4aa9      	ldr	r2, [pc, #676]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x5c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe feb1 	bl	80010f8 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e185      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80023a8:	4ba0      	ldr	r3, [pc, #640]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0ed      	beq.n	8002392 <HAL_RCC_OscConfig+0x5aa>
 80023b6:	e053      	b.n	8002460 <HAL_RCC_OscConfig+0x678>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023b8:	4b9c      	ldr	r3, [pc, #624]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	4a9b      	ldr	r2, [pc, #620]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80023c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x5f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fe95 	bl	80010f8 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x5f8>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e169      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023e0:	4b92      	ldr	r3, [pc, #584]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ed      	bne.n	80023ca <HAL_RCC_OscConfig+0x5e2>
 80023ee:	e037      	b.n	8002460 <HAL_RCC_OscConfig+0x678>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe fe82 	bl	80010f8 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x626>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe7e 	bl	80010f8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x626>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e152      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800240e:	4b87      	ldr	r3, [pc, #540]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ed      	bne.n	80023f8 <HAL_RCC_OscConfig+0x610>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800241c:	4b83      	ldr	r3, [pc, #524]	; (800262c <HAL_RCC_OscConfig+0x844>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002426:	2b00      	cmp	r3, #0
 8002428:	d01a      	beq.n	8002460 <HAL_RCC_OscConfig+0x678>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800242a:	4b80      	ldr	r3, [pc, #512]	; (800262c <HAL_RCC_OscConfig+0x844>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	4a7e      	ldr	r2, [pc, #504]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x66a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fe5c 	bl	80010f8 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x66a>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e130      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002452:	4b76      	ldr	r3, [pc, #472]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ed      	bne.n	800243c <HAL_RCC_OscConfig+0x654>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002460:	7ffb      	ldrb	r3, [r7, #31]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d105      	bne.n	8002472 <HAL_RCC_OscConfig+0x68a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002466:	4b71      	ldr	r3, [pc, #452]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	4a70      	ldr	r2, [pc, #448]	; (800262c <HAL_RCC_OscConfig+0x844>)
 800246c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d03c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x710>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x6d8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002486:	4b69      	ldr	r3, [pc, #420]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800248c:	4a67      	ldr	r2, [pc, #412]	; (800262c <HAL_RCC_OscConfig+0x844>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe fe2f 	bl	80010f8 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x6c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800249e:	f7fe fe2b 	bl	80010f8 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x6c8>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e101      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024b0:	4b5e      	ldr	r3, [pc, #376]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80024b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0ef      	beq.n	800249e <HAL_RCC_OscConfig+0x6b6>
 80024be:	e01b      	b.n	80024f8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024c0:	4b5a      	ldr	r3, [pc, #360]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80024c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c6:	4a59      	ldr	r2, [pc, #356]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7fe fe12 	bl	80010f8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x702>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024d8:	f7fe fe0e 	bl	80010f8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x702>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0e4      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024ea:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80024ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ef      	bne.n	80024d8 <HAL_RCC_OscConfig+0x6f0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80d8 	beq.w	80026b2 <HAL_RCC_OscConfig+0x8ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002502:	4b4a      	ldr	r3, [pc, #296]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b0c      	cmp	r3, #12
 800250c:	f000 8092 	beq.w	8002634 <HAL_RCC_OscConfig+0x84c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	2b02      	cmp	r3, #2
 8002516:	d15a      	bne.n	80025ce <HAL_RCC_OscConfig+0x7e6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b44      	ldr	r3, [pc, #272]	; (800262c <HAL_RCC_OscConfig+0x844>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a43      	ldr	r2, [pc, #268]	; (800262c <HAL_RCC_OscConfig+0x844>)
 800251e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fde8 	bl	80010f8 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x756>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fde4 	bl	80010f8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x756>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0ba      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x744>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254a:	4b38      	ldr	r3, [pc, #224]	; (800262c <HAL_RCC_OscConfig+0x844>)
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <HAL_RCC_OscConfig+0x848>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800255a:	3a01      	subs	r2, #1
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002564:	0212      	lsls	r2, r2, #8
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800256c:	0852      	lsrs	r2, r2, #1
 800256e:	3a01      	subs	r2, #1
 8002570:	0552      	lsls	r2, r2, #21
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002578:	0852      	lsrs	r2, r2, #1
 800257a:	3a01      	subs	r2, #1
 800257c:	0652      	lsls	r2, r2, #25
 800257e:	4311      	orrs	r1, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002584:	06d2      	lsls	r2, r2, #27
 8002586:	430a      	orrs	r2, r1
 8002588:	4928      	ldr	r1, [pc, #160]	; (800262c <HAL_RCC_OscConfig+0x844>)
 800258a:	4313      	orrs	r3, r2
 800258c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258e:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a26      	ldr	r2, [pc, #152]	; (800262c <HAL_RCC_OscConfig+0x844>)
 8002594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002598:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCC_OscConfig+0x844>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80025a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fda7 	bl	80010f8 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x7d8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe fda3 	bl	80010f8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x7d8>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e079      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x7c6>
 80025cc:	e071      	b.n	80026b2 <HAL_RCC_OscConfig+0x8ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a16      	ldr	r2, [pc, #88]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80025d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <HAL_RCC_OscConfig+0x80a>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80025ec:	f023 0303 	bic.w	r3, r3, #3
 80025f0:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4a0d      	ldr	r2, [pc, #52]	; (800262c <HAL_RCC_OscConfig+0x844>)
 80025f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002600:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe fd79 	bl	80010f8 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260a:	f7fe fd75 	bl	80010f8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x834>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e04b      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_RCC_OscConfig+0x844>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x822>
 8002628:	e043      	b.n	80026b2 <HAL_RCC_OscConfig+0x8ca>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x858>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e039      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_RCC_OscConfig+0x8d4>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	429a      	cmp	r2, r3
 8002652:	d12c      	bne.n	80026ae <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	3b01      	subs	r3, #1
 8002660:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d123      	bne.n	80026ae <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d11b      	bne.n	80026ae <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d113      	bne.n	80026ae <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	3b01      	subs	r3, #1
 8002694:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d109      	bne.n	80026ae <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	3b01      	subs	r3, #1
 80026a8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x8ca>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x8cc>
        }
      }
    }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e10d      	b.n	80028f4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCC_ClockConfig+0x23c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d910      	bls.n	8002708 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b85      	ldr	r3, [pc, #532]	; (80028fc <HAL_RCC_ClockConfig+0x23c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 020f 	bic.w	r2, r3, #15
 80026ee:	4983      	ldr	r1, [pc, #524]	; (80028fc <HAL_RCC_ClockConfig+0x23c>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b81      	ldr	r3, [pc, #516]	; (80028fc <HAL_RCC_ClockConfig+0x23c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0f5      	b.n	80028f4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 808b 	beq.w	800282c <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d134      	bne.n	8002788 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	4b78      	ldr	r3, [pc, #480]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0e2      	b.n	80028f4 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800272e:	f000 f9ef 	bl	8002b10 <RCC_GetSysClockFreqFromPLLSource>
 8002732:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4a73      	ldr	r2, [pc, #460]	; (8002904 <HAL_RCC_ClockConfig+0x244>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d956      	bls.n	80027ea <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800273c:	4b70      	ldr	r3, [pc, #448]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002748:	4b6d      	ldr	r3, [pc, #436]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002750:	4a6b      	ldr	r2, [pc, #428]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 8002752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002756:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	e045      	b.n	80027ea <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d03f      	beq.n	80027ea <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d13b      	bne.n	80027ea <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002772:	4b63      	ldr	r3, [pc, #396]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800277a:	4a61      	ldr	r2, [pc, #388]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 800277c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002780:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e030      	b.n	80027ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002790:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d115      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0a9      	b.n	80028f4 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d107      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a8:	4b55      	ldr	r3, [pc, #340]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e09d      	b.n	80028f4 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b8:	4b51      	ldr	r3, [pc, #324]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e095      	b.n	80028f4 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027c8:	f000 f8a2 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4a4c      	ldr	r2, [pc, #304]	; (8002904 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d909      	bls.n	80027ea <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027de:	4a48      	ldr	r2, [pc, #288]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 80027e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b45      	ldr	r3, [pc, #276]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4942      	ldr	r1, [pc, #264]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fc:	f7fe fc7c 	bl	80010f8 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe fc78 	bl	80010f8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e06c      	b.n	80028f4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b39      	ldr	r3, [pc, #228]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d009      	beq.n	800284c <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	492e      	ldr	r1, [pc, #184]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
 800284a:	e008      	b.n	800285e <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b80      	cmp	r3, #128	; 0x80
 8002850:	d105      	bne.n	800285e <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 8002858:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800285c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_RCC_ClockConfig+0x23c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d210      	bcs.n	800288e <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_RCC_ClockConfig+0x23c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 020f 	bic.w	r2, r3, #15
 8002874:	4921      	ldr	r1, [pc, #132]	; (80028fc <HAL_RCC_ClockConfig+0x23c>)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <HAL_RCC_ClockConfig+0x23c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d001      	beq.n	800288e <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e032      	b.n	80028f4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4916      	ldr	r1, [pc, #88]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d009      	beq.n	80028cc <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	490e      	ldr	r1, [pc, #56]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028cc:	f000 f820 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028d0:	4601      	mov	r1, r0
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x240>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <HAL_RCC_ClockConfig+0x248>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	fa21 f303 	lsr.w	r3, r1, r3
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x24c>)
 80028e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7fe fbb9 	bl	8001060 <HAL_InitTick>
 80028ee:	4603      	mov	r3, r0
 80028f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80028f2:	7afb      	ldrb	r3, [r7, #11]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40022000 	.word	0x40022000
 8002900:	40021000 	.word	0x40021000
 8002904:	04c4b400 	.word	0x04c4b400
 8002908:	08073d90 	.word	0x08073d90
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291e:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x34>
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d121      	bne.n	8002982 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d11e      	bne.n	8002982 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002944:	4b3c      	ldr	r3, [pc, #240]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d107      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002950:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 8002952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e005      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002960:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800296c:	4a33      	ldr	r2, [pc, #204]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x12c>)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_CFGR_SWS_MSI)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10d      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_CFGR_SWS_MSI)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_CFGR_SWS_HSI)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d102      	bne.n	800298e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002988:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x130>)
 800298a:	61bb      	str	r3, [r7, #24]
 800298c:	e004      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_CFGR_SWS_HSE)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d101      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x134>)
 8002996:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_CFGR_SWS_PLL)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d145      	bne.n	8002a2a <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800299e:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3301      	adds	r3, #1
 80029b4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d002      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0xb2>
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d00d      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0xcc>
 80029c0:	e019      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029c2:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x130>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	0a12      	lsrs	r2, r2, #8
 80029d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
        break;
 80029da:	e019      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x134>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 80029e6:	68d2      	ldr	r2, [r2, #12]
 80029e8:	0a12      	lsrs	r2, r2, #8
 80029ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
        break;
 80029f4:	e00c      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 8002a00:	68d2      	ldr	r2, [r2, #12]
 8002a02:	0a12      	lsrs	r2, r2, #8
 8002a04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a08:	fb02 f303 	mul.w	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
        break;
 8002a0e:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x128>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	0e5b      	lsrs	r3, r3, #25
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3724      	adds	r7, #36	; 0x24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08073da0 	.word	0x08073da0
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	00b71b00 	.word	0x00b71b00

08002a48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a54:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a60:	f7ff f914 	bl	8001c8c <HAL_PWREx_GetVoltageRange>
 8002a64:	6138      	str	r0, [r7, #16]
 8002a66:	e014      	b.n	8002a92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	; 0x58
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a80:	f7ff f904 	bl	8001c8c <HAL_PWREx_GetVoltageRange>
 8002a84:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9e:	d10b      	bne.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d919      	bls.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2ba0      	cmp	r3, #160	; 0xa0
 8002aaa:	d902      	bls.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aac:	2302      	movs	r3, #2
 8002aae:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002ab0:	e013      	b.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002ab6:	e010      	b.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b80      	cmp	r3, #128	; 0x80
 8002abc:	d902      	bls.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002abe:	2303      	movs	r3, #3
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e00a      	b.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b80      	cmp	r3, #128	; 0x80
 8002ac8:	d102      	bne.n	8002ad0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aca:	2302      	movs	r3, #2
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e004      	b.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b70      	cmp	r3, #112	; 0x70
 8002ad4:	d101      	bne.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 020f 	bic.w	r2, r3, #15
 8002ae2:	490a      	ldr	r1, [pc, #40]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40022000 	.word	0x40022000

08002b10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d118      	bne.n	8002b58 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d107      	bne.n	8002b42 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e005      	b.n	8002b4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002b4e:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b56:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b58:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d002      	beq.n	8002b7c <RCC_GetSysClockFreqFromPLLSource+0x6c>
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d00d      	beq.n	8002b96 <RCC_GetSysClockFreqFromPLLSource+0x86>
 8002b7a:	e019      	b.n	8002bb0 <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b7c:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002b86:	68d2      	ldr	r2, [r2, #12]
 8002b88:	0a12      	lsrs	r2, r2, #8
 8002b8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	613b      	str	r3, [r7, #16]
      break;
 8002b94:	e019      	b.n	8002bca <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b96:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	0a12      	lsrs	r2, r2, #8
 8002ba4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ba8:	fb02 f303 	mul.w	r3, r2, r3
 8002bac:	613b      	str	r3, [r7, #16]
      break;
 8002bae:	e00c      	b.n	8002bca <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002bba:	68d2      	ldr	r2, [r2, #12]
 8002bbc:	0a12      	lsrs	r2, r2, #8
 8002bbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	613b      	str	r3, [r7, #16]
      break;
 8002bc8:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	0e5b      	lsrs	r3, r3, #25
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002be4:	683b      	ldr	r3, [r7, #0]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08073da0 	.word	0x08073da0
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	00b71b00 	.word	0x00b71b00

08002c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07c      	b.n	8002d10 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe f85d 	bl	8000cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c56:	d902      	bls.n	8002c5e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	e002      	b.n	8002c64 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c6c:	d007      	beq.n	8002c7e <HAL_SPI_Init+0x7a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c76:	d002      	beq.n	8002c7e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c8e:	d903      	bls.n	8002c98 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
 8002c96:	e002      	b.n	8002c9e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	ea42 0103 	orr.w	r1, r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0204 	and.w	r2, r3, #4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	ea42 0103 	orr.w	r1, r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_SPI_Transmit+0x22>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e150      	b.n	8002fdc <HAL_SPI_Transmit+0x2c4>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d42:	f7fe f9d9 	bl	80010f8 <HAL_GetTick>
 8002d46:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d002      	beq.n	8002d5e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d5c:	e135      	b.n	8002fca <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_SPI_Transmit+0x52>
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d6e:	e12c      	b.n	8002fca <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2203      	movs	r2, #3
 8002d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dba:	d107      	bne.n	8002dcc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b40      	cmp	r3, #64	; 0x40
 8002dd8:	d007      	beq.n	8002dea <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002df2:	d94b      	bls.n	8002e8c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_SPI_Transmit+0xea>
 8002dfc:	8afb      	ldrh	r3, [r7, #22]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d13e      	bne.n	8002e80 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	1c9a      	adds	r2, r3, #2
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e26:	e02b      	b.n	8002e80 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d112      	bne.n	8002e5c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	881a      	ldrh	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	1c9a      	adds	r2, r3, #2
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e5a:	e011      	b.n	8002e80 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e5c:	f7fe f94c 	bl	80010f8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d803      	bhi.n	8002e74 <HAL_SPI_Transmit+0x15c>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d102      	bne.n	8002e7a <HAL_SPI_Transmit+0x162>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e7e:	e0a4      	b.n	8002fca <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ce      	bne.n	8002e28 <HAL_SPI_Transmit+0x110>
 8002e8a:	e07c      	b.n	8002f86 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_SPI_Transmit+0x182>
 8002e94:	8afb      	ldrh	r3, [r7, #22]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d170      	bne.n	8002f7c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d912      	bls.n	8002eca <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	881a      	ldrh	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	1c9a      	adds	r2, r3, #2
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b02      	subs	r3, #2
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ec8:	e058      	b.n	8002f7c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ef0:	e044      	b.n	8002f7c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d12b      	bne.n	8002f58 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d912      	bls.n	8002f30 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	881a      	ldrh	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	1c9a      	adds	r2, r3, #2
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b02      	subs	r3, #2
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f2e:	e025      	b.n	8002f7c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	7812      	ldrb	r2, [r2, #0]
 8002f3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f56:	e011      	b.n	8002f7c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f58:	f7fe f8ce 	bl	80010f8 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d803      	bhi.n	8002f70 <HAL_SPI_Transmit+0x258>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6e:	d102      	bne.n	8002f76 <HAL_SPI_Transmit+0x25e>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f7a:	e026      	b.n	8002fca <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1b5      	bne.n	8002ef2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fa82 	bl	8003494 <SPI_EndRxTxTransaction>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	e000      	b.n	8002fca <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002fc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_SPI_Transmit_DMA+0x20>
 8003000:	2302      	movs	r3, #2
 8003002:	e0d0      	b.n	80031a6 <HAL_SPI_Transmit_DMA+0x1c2>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d002      	beq.n	800301e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003018:	2302      	movs	r3, #2
 800301a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800301c:	e0be      	b.n	800319c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_SPI_Transmit_DMA+0x46>
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800302e:	e0b5      	b.n	800319c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2203      	movs	r2, #3
 8003034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	88fa      	ldrh	r2, [r7, #6]
 800304e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800307a:	d107      	bne.n	800308c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	4a47      	ldr	r2, [pc, #284]	; (80031b0 <HAL_SPI_Transmit_DMA+0x1cc>)
 8003092:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	4a46      	ldr	r2, [pc, #280]	; (80031b4 <HAL_SPI_Transmit_DMA+0x1d0>)
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	4a45      	ldr	r2, [pc, #276]	; (80031b8 <HAL_SPI_Transmit_DMA+0x1d4>)
 80030a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	2200      	movs	r2, #0
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030ba:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030c4:	d82d      	bhi.n	8003122 <HAL_SPI_Transmit_DMA+0x13e>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d127      	bne.n	8003122 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10f      	bne.n	8003100 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030ee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030fe:	e010      	b.n	8003122 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800310e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	b29b      	uxth	r3, r3
 800311a:	3301      	adds	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	4619      	mov	r1, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003138:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800313a:	f7fe f9c3 	bl	80014c4 <HAL_DMA_Start_IT>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00c      	beq.n	800315e <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003148:	f043 0210 	orr.w	r2, r3, #16
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800315c:	e01e      	b.n	800319c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	d007      	beq.n	800317c <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0220 	orr.w	r2, r2, #32
 800318a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0202 	orr.w	r2, r2, #2
 800319a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	0800328b 	.word	0x0800328b
 80031b4:	080031e5 	.word	0x080031e5
 80031b8:	080032a7 	.word	0x080032a7

080031bc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f2:	f7fd ff81 	bl	80010f8 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b20      	cmp	r3, #32
 8003204:	d03b      	beq.n	800327e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0220 	bic.w	r2, r2, #32
 8003214:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0202 	bic.w	r2, r2, #2
 8003224:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	2164      	movs	r1, #100	; 0x64
 800322a:	6978      	ldr	r0, [r7, #20]
 800322c:	f000 f932 	bl	8003494 <SPI_EndRxTxTransaction>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2200      	movs	r2, #0
 8003264:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003276:	6978      	ldr	r0, [r7, #20]
 8003278:	f7ff ffaa 	bl	80031d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800327c:	e002      	b.n	8003284 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800327e:	6978      	ldr	r0, [r7, #20]
 8003280:	f7fd f834 	bl	80002ec <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff ff8f 	bl	80031bc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0203 	bic.w	r2, r2, #3
 80032c2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c8:	f043 0210 	orr.w	r2, r3, #16
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f7ff ff79 	bl	80031d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f6:	e04c      	b.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d048      	beq.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003300:	f7fd fefa 	bl	80010f8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d902      	bls.n	8003316 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d13d      	bne.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800332e:	d111      	bne.n	8003354 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003338:	d004      	beq.n	8003344 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d107      	bne.n	8003354 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335c:	d10f      	bne.n	800337e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800337c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e00f      	b.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4013      	ands	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1a3      	bne.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80033c8:	e057      	b.n	800347a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033d0:	d106      	bne.n	80033e0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d048      	beq.n	800347a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033e8:	f7fd fe86 	bl	80010f8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d902      	bls.n	80033fe <SPI_WaitFifoStateUntilTimeout+0x44>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d13d      	bne.n	800347a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800340c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003416:	d111      	bne.n	800343c <SPI_WaitFifoStateUntilTimeout+0x82>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003420:	d004      	beq.n	800342c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342a:	d107      	bne.n	800343c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003444:	d10f      	bne.n	8003466 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003464:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e008      	b.n	800348c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	429a      	cmp	r2, r3
 8003488:	d19f      	bne.n	80033ca <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff ff84 	bl	80033ba <SPI_WaitFifoStateUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e027      	b.n	8003518 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2200      	movs	r2, #0
 80034d0:	2180      	movs	r1, #128	; 0x80
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff ff07 	bl	80032e6 <SPI_WaitFlagStateUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e014      	b.n	8003518 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff5d 	bl	80033ba <SPI_WaitFifoStateUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e000      	b.n	8003518 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <__libc_init_array>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	4e0d      	ldr	r6, [pc, #52]	; (8003558 <__libc_init_array+0x38>)
 8003524:	2500      	movs	r5, #0
 8003526:	4c0d      	ldr	r4, [pc, #52]	; (800355c <__libc_init_array+0x3c>)
 8003528:	1ba4      	subs	r4, r4, r6
 800352a:	10a4      	asrs	r4, r4, #2
 800352c:	42a5      	cmp	r5, r4
 800352e:	d109      	bne.n	8003544 <__libc_init_array+0x24>
 8003530:	4e0b      	ldr	r6, [pc, #44]	; (8003560 <__libc_init_array+0x40>)
 8003532:	2500      	movs	r5, #0
 8003534:	4c0b      	ldr	r4, [pc, #44]	; (8003564 <__libc_init_array+0x44>)
 8003536:	f000 f81f 	bl	8003578 <_init>
 800353a:	1ba4      	subs	r4, r4, r6
 800353c:	10a4      	asrs	r4, r4, #2
 800353e:	42a5      	cmp	r5, r4
 8003540:	d105      	bne.n	800354e <__libc_init_array+0x2e>
 8003542:	bd70      	pop	{r4, r5, r6, pc}
 8003544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003548:	3501      	adds	r5, #1
 800354a:	4798      	blx	r3
 800354c:	e7ee      	b.n	800352c <__libc_init_array+0xc>
 800354e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003552:	3501      	adds	r5, #1
 8003554:	4798      	blx	r3
 8003556:	e7f2      	b.n	800353e <__libc_init_array+0x1e>
 8003558:	08073de0 	.word	0x08073de0
 800355c:	08073de0 	.word	0x08073de0
 8003560:	08073de0 	.word	0x08073de0
 8003564:	08073de4 	.word	0x08073de4

08003568 <memset>:
 8003568:	4402      	add	r2, r0
 800356a:	4603      	mov	r3, r0
 800356c:	4293      	cmp	r3, r2
 800356e:	d100      	bne.n	8003572 <memset+0xa>
 8003570:	4770      	bx	lr
 8003572:	f803 1b01 	strb.w	r1, [r3], #1
 8003576:	e7f9      	b.n	800356c <memset+0x4>

08003578 <_init>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	bf00      	nop
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr

08003584 <_fini>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	bf00      	nop
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr
