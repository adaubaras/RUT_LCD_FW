
RUT_LCD_TOUCH_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc0  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080081b8  080081b8  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008398  08008398  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008398  08008398  00018398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083a0  080083a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080083a0  080083a0  000183a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080083a8  080083a8  000183a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080083b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025a28  20000070  08008420  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20025a98  08008420  00025a98  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001418c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002804  00000000  00000000  00034232  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  00036a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  00037ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029850  00000000  00000000  00038bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eae7  00000000  00000000  00062410  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00109daf  00000000  00000000  00070ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017aca6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  0017ad24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	0800819c 	.word	0x0800819c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	0800819c 	.word	0x0800819c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b97c 	b.w	8000558 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	468c      	mov	ip, r1
 800027e:	9d08      	ldr	r5, [sp, #32]
 8000280:	4604      	mov	r4, r0
 8000282:	468a      	mov	sl, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d962      	bls.n	8000354 <__udivmoddi4+0xdc>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	b14e      	cbz	r6, 80002a8 <__udivmoddi4+0x30>
 8000294:	f1c6 0e20 	rsb	lr, r6, #32
 8000298:	fa01 f306 	lsl.w	r3, r1, r6
 800029c:	40b7      	lsls	r7, r6
 800029e:	40b4      	lsls	r4, r6
 80002a0:	fa20 fe0e 	lsr.w	lr, r0, lr
 80002a4:	ea4e 0a03 	orr.w	sl, lr, r3
 80002a8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fa1f f987 	uxth.w	r9, r7
 80002b2:	fbba fef8 	udiv	lr, sl, r8
 80002b6:	fb08 aa1e 	mls	sl, r8, lr, sl
 80002ba:	fb0e f209 	mul.w	r2, lr, r9
 80002be:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d90b      	bls.n	80002de <__udivmoddi4+0x66>
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002cc:	bf2c      	ite	cs
 80002ce:	2001      	movcs	r0, #1
 80002d0:	2000      	movcc	r0, #0
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d902      	bls.n	80002dc <__udivmoddi4+0x64>
 80002d6:	2800      	cmp	r0, #0
 80002d8:	f000 812a 	beq.w	8000530 <__udivmoddi4+0x2b8>
 80002dc:	468e      	mov	lr, r1
 80002de:	1a9a      	subs	r2, r3, r2
 80002e0:	b2a3      	uxth	r3, r4
 80002e2:	fbb2 f0f8 	udiv	r0, r2, r8
 80002e6:	fb08 2210 	mls	r2, r8, r0, r2
 80002ea:	fb00 f909 	mul.w	r9, r0, r9
 80002ee:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x8e>
 80002f6:	193c      	adds	r4, r7, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x8c>
 80002fe:	45a1      	cmp	r9, r4
 8000300:	f200 8110 	bhi.w	8000524 <__udivmoddi4+0x2ac>
 8000304:	4618      	mov	r0, r3
 8000306:	eba4 0409 	sub.w	r4, r4, r9
 800030a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800030e:	2100      	movs	r1, #0
 8000310:	b11d      	cbz	r5, 800031a <__udivmoddi4+0xa2>
 8000312:	40f4      	lsrs	r4, r6
 8000314:	2300      	movs	r3, #0
 8000316:	e9c5 4300 	strd	r4, r3, [r5]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80f2 	beq.w	800050c <__udivmoddi4+0x294>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c5 0c00 	strd	r0, ip, [r5]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d14e      	bne.n	80003da <__udivmoddi4+0x162>
 800033c:	4563      	cmp	r3, ip
 800033e:	f0c0 80e8 	bcc.w	8000512 <__udivmoddi4+0x29a>
 8000342:	4282      	cmp	r2, r0
 8000344:	f240 80e5 	bls.w	8000512 <__udivmoddi4+0x29a>
 8000348:	4608      	mov	r0, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0e5      	beq.n	800031a <__udivmoddi4+0xa2>
 800034e:	e9c5 4a00 	strd	r4, sl, [r5]
 8000352:	e7e2      	b.n	800031a <__udivmoddi4+0xa2>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe0>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f682 	clz	r6, r2
 800035c:	2e00      	cmp	r6, #0
 800035e:	f040 8099 	bne.w	8000494 <__udivmoddi4+0x21c>
 8000362:	1a8b      	subs	r3, r1, r2
 8000364:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000368:	fa1f f882 	uxth.w	r8, r2
 800036c:	2101      	movs	r1, #1
 800036e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000372:	fbb3 f2fe 	udiv	r2, r3, lr
 8000376:	fb0e 3012 	mls	r0, lr, r2, r3
 800037a:	fb08 f902 	mul.w	r9, r8, r2
 800037e:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8000382:	45e1      	cmp	r9, ip
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x120>
 8000386:	eb17 0c0c 	adds.w	ip, r7, ip
 800038a:	f102 33ff 	add.w	r3, r2, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x11e>
 8000390:	45e1      	cmp	r9, ip
 8000392:	f200 80ca 	bhi.w	800052a <__udivmoddi4+0x2b2>
 8000396:	461a      	mov	r2, r3
 8000398:	ebac 0c09 	sub.w	ip, ip, r9
 800039c:	b2a3      	uxth	r3, r4
 800039e:	fbbc f0fe 	udiv	r0, ip, lr
 80003a2:	fb0e cc10 	mls	ip, lr, r0, ip
 80003a6:	fb08 f800 	mul.w	r8, r8, r0
 80003aa:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 80003ae:	45a0      	cmp	r8, r4
 80003b0:	d90e      	bls.n	80003d0 <__udivmoddi4+0x158>
 80003b2:	193c      	adds	r4, r7, r4
 80003b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b8:	bf2c      	ite	cs
 80003ba:	f04f 0c01 	movcs.w	ip, #1
 80003be:	f04f 0c00 	movcc.w	ip, #0
 80003c2:	45a0      	cmp	r8, r4
 80003c4:	d903      	bls.n	80003ce <__udivmoddi4+0x156>
 80003c6:	f1bc 0f00 	cmp.w	ip, #0
 80003ca:	f000 80a8 	beq.w	800051e <__udivmoddi4+0x2a6>
 80003ce:	4618      	mov	r0, r3
 80003d0:	eba4 0408 	sub.w	r4, r4, r8
 80003d4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003d8:	e79a      	b.n	8000310 <__udivmoddi4+0x98>
 80003da:	f1c1 0420 	rsb	r4, r1, #32
 80003de:	408b      	lsls	r3, r1
 80003e0:	fa02 fe01 	lsl.w	lr, r2, r1
 80003e4:	fa0c f601 	lsl.w	r6, ip, r1
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	fa20 f704 	lsr.w	r7, r0, r4
 80003ee:	fa2c fc04 	lsr.w	ip, ip, r4
 80003f2:	fa00 f801 	lsl.w	r8, r0, r1
 80003f6:	4313      	orrs	r3, r2
 80003f8:	433e      	orrs	r6, r7
 80003fa:	0c1f      	lsrs	r7, r3, #16
 80003fc:	0c32      	lsrs	r2, r6, #16
 80003fe:	fa1f f983 	uxth.w	r9, r3
 8000402:	fbbc f0f7 	udiv	r0, ip, r7
 8000406:	fb07 cc10 	mls	ip, r7, r0, ip
 800040a:	fb00 fa09 	mul.w	sl, r0, r9
 800040e:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8000412:	45e2      	cmp	sl, ip
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000416:	eb13 0c0c 	adds.w	ip, r3, ip
 800041a:	f100 32ff 	add.w	r2, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x1ae>
 8000420:	45e2      	cmp	sl, ip
 8000422:	f200 8089 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 8000426:	4610      	mov	r0, r2
 8000428:	ebac 0c0a 	sub.w	ip, ip, sl
 800042c:	b2b6      	uxth	r6, r6
 800042e:	fbbc faf7 	udiv	sl, ip, r7
 8000432:	fb07 cc1a 	mls	ip, r7, sl, ip
 8000436:	fb0a f909 	mul.w	r9, sl, r9
 800043a:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 800043e:	4591      	cmp	r9, r2
 8000440:	d906      	bls.n	8000450 <__udivmoddi4+0x1d8>
 8000442:	189a      	adds	r2, r3, r2
 8000444:	f10a 36ff 	add.w	r6, sl, #4294967295
 8000448:	d201      	bcs.n	800044e <__udivmoddi4+0x1d6>
 800044a:	4591      	cmp	r9, r2
 800044c:	d87a      	bhi.n	8000544 <__udivmoddi4+0x2cc>
 800044e:	46b2      	mov	sl, r6
 8000450:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 8000454:	eba2 0209 	sub.w	r2, r2, r9
 8000458:	fba0 670e 	umull	r6, r7, r0, lr
 800045c:	42ba      	cmp	r2, r7
 800045e:	46b4      	mov	ip, r6
 8000460:	46b9      	mov	r9, r7
 8000462:	d302      	bcc.n	800046a <__udivmoddi4+0x1f2>
 8000464:	d107      	bne.n	8000476 <__udivmoddi4+0x1fe>
 8000466:	45b0      	cmp	r8, r6
 8000468:	d205      	bcs.n	8000476 <__udivmoddi4+0x1fe>
 800046a:	ebb6 0c0e 	subs.w	ip, r6, lr
 800046e:	eb67 0303 	sbc.w	r3, r7, r3
 8000472:	3801      	subs	r0, #1
 8000474:	4699      	mov	r9, r3
 8000476:	2d00      	cmp	r5, #0
 8000478:	d06b      	beq.n	8000552 <__udivmoddi4+0x2da>
 800047a:	ebb8 030c 	subs.w	r3, r8, ip
 800047e:	eb62 0209 	sbc.w	r2, r2, r9
 8000482:	fa02 f404 	lsl.w	r4, r2, r4
 8000486:	40cb      	lsrs	r3, r1
 8000488:	40ca      	lsrs	r2, r1
 800048a:	2100      	movs	r1, #0
 800048c:	431c      	orrs	r4, r3
 800048e:	e9c5 4200 	strd	r4, r2, [r5]
 8000492:	e742      	b.n	800031a <__udivmoddi4+0xa2>
 8000494:	40b7      	lsls	r7, r6
 8000496:	f1c6 0220 	rsb	r2, r6, #32
 800049a:	fa01 f306 	lsl.w	r3, r1, r6
 800049e:	40b4      	lsls	r4, r6
 80004a0:	fa21 fc02 	lsr.w	ip, r1, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fbbc f1fe 	udiv	r1, ip, lr
 80004b4:	431a      	orrs	r2, r3
 80004b6:	fb0e cc11 	mls	ip, lr, r1, ip
 80004ba:	fb01 f008 	mul.w	r0, r1, r8
 80004be:	0c13      	lsrs	r3, r2, #16
 80004c0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80004c4:	4560      	cmp	r0, ip
 80004c6:	d907      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c8:	eb17 0c0c 	adds.w	ip, r7, ip
 80004cc:	f101 33ff 	add.w	r3, r1, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x25e>
 80004d2:	4560      	cmp	r0, ip
 80004d4:	d833      	bhi.n	800053e <__udivmoddi4+0x2c6>
 80004d6:	4619      	mov	r1, r3
 80004d8:	ebac 0c00 	sub.w	ip, ip, r0
 80004dc:	b292      	uxth	r2, r2
 80004de:	fbbc f0fe 	udiv	r0, ip, lr
 80004e2:	fb0e cc10 	mls	ip, lr, r0, ip
 80004e6:	fb00 f308 	mul.w	r3, r0, r8
 80004ea:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 80004ee:	4563      	cmp	r3, ip
 80004f0:	d907      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f2:	eb17 0c0c 	adds.w	ip, r7, ip
 80004f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80004fa:	d201      	bcs.n	8000500 <__udivmoddi4+0x288>
 80004fc:	4563      	cmp	r3, ip
 80004fe:	d825      	bhi.n	800054c <__udivmoddi4+0x2d4>
 8000500:	4610      	mov	r0, r2
 8000502:	ebac 0303 	sub.w	r3, ip, r3
 8000506:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050a:	e730      	b.n	800036e <__udivmoddi4+0xf6>
 800050c:	4629      	mov	r1, r5
 800050e:	4628      	mov	r0, r5
 8000510:	e703      	b.n	800031a <__udivmoddi4+0xa2>
 8000512:	1a84      	subs	r4, r0, r2
 8000514:	eb6c 0303 	sbc.w	r3, ip, r3
 8000518:	2001      	movs	r0, #1
 800051a:	469a      	mov	sl, r3
 800051c:	e715      	b.n	800034a <__udivmoddi4+0xd2>
 800051e:	3802      	subs	r0, #2
 8000520:	443c      	add	r4, r7
 8000522:	e755      	b.n	80003d0 <__udivmoddi4+0x158>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e6ed      	b.n	8000306 <__udivmoddi4+0x8e>
 800052a:	3a02      	subs	r2, #2
 800052c:	44bc      	add	ip, r7
 800052e:	e733      	b.n	8000398 <__udivmoddi4+0x120>
 8000530:	f1ae 0e02 	sub.w	lr, lr, #2
 8000534:	443b      	add	r3, r7
 8000536:	e6d2      	b.n	80002de <__udivmoddi4+0x66>
 8000538:	3802      	subs	r0, #2
 800053a:	449c      	add	ip, r3
 800053c:	e774      	b.n	8000428 <__udivmoddi4+0x1b0>
 800053e:	3902      	subs	r1, #2
 8000540:	44bc      	add	ip, r7
 8000542:	e7c9      	b.n	80004d8 <__udivmoddi4+0x260>
 8000544:	f1aa 0a02 	sub.w	sl, sl, #2
 8000548:	441a      	add	r2, r3
 800054a:	e781      	b.n	8000450 <__udivmoddi4+0x1d8>
 800054c:	3802      	subs	r0, #2
 800054e:	44bc      	add	ip, r7
 8000550:	e7d7      	b.n	8000502 <__udivmoddi4+0x28a>
 8000552:	4629      	mov	r1, r5
 8000554:	e6e1      	b.n	800031a <__udivmoddi4+0xa2>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <CY8CMBR3xxx_ReadDualByte>:
*    TRUE                 Read was successful
*    FALSE                Read was not successful
*
*******************************************************************************/
bool CY8CMBR3xxx_ReadDualByte(uint8 slaveAddress, uint8 registerAddress, uint16 *readData)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	603a      	str	r2, [r7, #0]
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	460b      	mov	r3, r1
 800056a:	71bb      	strb	r3, [r7, #6]
    /* Default return is FALSE if anything goes wrong */
    bool localStatus = FALSE;
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
    
    /* First byte in write buffer should be the register address */
    uint8 localWriteBuffer[CY8CMBR3xxx_REG_ADDRESS_LENGTH] = {CY8CMBR3xxx_BUFFER_INIT_VALUE};    
 8000570:	2300      	movs	r3, #0
 8000572:	733b      	strb	r3, [r7, #12]
    
    /* 2-byte buffer to read the dual-byte */
    uint8 localReadBuffer[CY8CMBR3xxx_DUAL_BYTE_READ_LENGTH] = {CY8CMBR3xxx_BUFFER_INIT_VALUE};  
 8000574:	2300      	movs	r3, #0
 8000576:	813b      	strh	r3, [r7, #8]
    
    /* Execute only if the slave address and buffer location are valid */
    if ((CY8CMBR3xxx_IS_VALID_ADDRESS(slaveAddress)) && (readData))
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	2b07      	cmp	r3, #7
 800057c:	d927      	bls.n	80005ce <CY8CMBR3xxx_ReadDualByte+0x72>
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b77      	cmp	r3, #119	; 0x77
 8000582:	d824      	bhi.n	80005ce <CY8CMBR3xxx_ReadDualByte+0x72>
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d021      	beq.n	80005ce <CY8CMBR3xxx_ReadDualByte+0x72>
    {
        /* Use low level host API to write the register address first */
        localWriteBuffer[CY8CMBR3xxx_REG_ADDRESS_OFFSET] = registerAddress;
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	733b      	strb	r3, [r7, #12]
        if (Host_LowLevelWrite(slaveAddress, localWriteBuffer, CY8CMBR3xxx_REG_ADDRESS_LENGTH))
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2201      	movs	r2, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fda6 	bl	80010e8 <Host_LowLevelWrite>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d015      	beq.n	80005ce <CY8CMBR3xxx_ReadDualByte+0x72>
        {
            /* Read the data using the low level host API */
            if (Host_LowLevelRead(slaveAddress, localReadBuffer, CY8CMBR3xxx_DUAL_BYTE_READ_LENGTH))
 80005a2:	f107 0108 	add.w	r1, r7, #8
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2202      	movs	r2, #2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fdd0 	bl	8001150 <Host_LowLevelRead>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00b      	beq.n	80005ce <CY8CMBR3xxx_ReadDualByte+0x72>
            {
                /* Update the read buffer */
                *readData = (((uint16)localReadBuffer[CY8CMBR3xxx_READ_DATA_MSB_OFFSET] << CY8CMBR3xxx_BYTE_SHIFT_BITS)
 80005b6:	7a7b      	ldrb	r3, [r7, #9]
 80005b8:	021b      	lsls	r3, r3, #8
                                | (localReadBuffer[CY8CMBR3xxx_READ_DATA_LSB_OFFSET]));
 80005ba:	b21a      	sxth	r2, r3
 80005bc:	7a3b      	ldrb	r3, [r7, #8]
 80005be:	b21b      	sxth	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	b29a      	uxth	r2, r3
                *readData = (((uint16)localReadBuffer[CY8CMBR3xxx_READ_DATA_MSB_OFFSET] << CY8CMBR3xxx_BYTE_SHIFT_BITS)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	801a      	strh	r2, [r3, #0]
                localStatus = TRUE;
 80005ca:	2301      	movs	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
    
    /* Return the status */
    return localStatus;
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <GUI_FillScreen>:

static uint8_t vvram[GUI_HEIGHT*GUI_WIDTH*sizeof(uint16_t)]; // Virtual Video RAM Big endian for 1 line
static __IO uint8_t Done;

void GUI_FillScreen(uint16_t cl)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	for (uint32_t x = 0; x < GUI_HEIGHT*GUI_WIDTH*2;) {
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e00f      	b.n	8000608 <GUI_FillScreen+0x30>
		vvram[x++] = cl;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	60fa      	str	r2, [r7, #12]
 80005ee:	88fa      	ldrh	r2, [r7, #6]
 80005f0:	b2d1      	uxtb	r1, r2
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <GUI_FillScreen+0x44>)
 80005f4:	54d1      	strb	r1, [r2, r3]
		vvram[x++] = cl >> 8;
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	b299      	uxth	r1, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	60fa      	str	r2, [r7, #12]
 8000602:	b2c9      	uxtb	r1, r1
 8000604:	4a05      	ldr	r2, [pc, #20]	; (800061c <GUI_FillScreen+0x44>)
 8000606:	54d1      	strb	r1, [r2, r3]
	for (uint32_t x = 0; x < GUI_HEIGHT*GUI_WIDTH*2;) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 800060e:	d3eb      	bcc.n	80005e8 <GUI_FillScreen+0x10>

	}
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	2000008c 	.word	0x2000008c

08000620 <GUI_UpdateScreen>:
	ILI9341_SetWindow(x1, y1, x2, y2);
	ILI9341_DrawBitmap(x2-x1+1, y2-y1+1, bmp);
}

void GUI_UpdateScreen(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	// HAL_SPI_Transmit_DMA supports the translation size until 0xffff
	// So, I need to separate bitmap
	for (uint32_t y = 0; y < GUI_HEIGHT; y += MAXTXH) {
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e022      	b.n	8000672 <GUI_UpdateScreen+0x52>
		ILI9341_SetWindow(0, y, GUI_WIDTH-1, y+MAXTXH-1);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	b299      	uxth	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b29b      	uxth	r3, r3
 8000634:	334f      	adds	r3, #79	; 0x4f
 8000636:	b29b      	uxth	r3, r3
 8000638:	22ef      	movs	r2, #239	; 0xef
 800063a:	2000      	movs	r0, #0
 800063c:	f000 f8e9 	bl	8000812 <ILI9341_SetWindow>
		Done = 0;
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <GUI_UpdateScreen+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]

	ILI9341_DrawBitmap(GUI_WIDTH, MAXTXH, &vvram[y*GUI_WIDTH*sizeof(uint16_t)]);
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	4613      	mov	r3, r2
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	015b      	lsls	r3, r3, #5
 8000650:	461a      	mov	r2, r3
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <GUI_UpdateScreen+0x68>)
 8000654:	4413      	add	r3, r2
 8000656:	461a      	mov	r2, r3
 8000658:	2150      	movs	r1, #80	; 0x50
 800065a:	20f0      	movs	r0, #240	; 0xf0
 800065c:	f000 f922 	bl	80008a4 <ILI9341_DrawBitmap>
		while (Done == 0)
 8000660:	bf00      	nop
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <GUI_UpdateScreen+0x64>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0fa      	beq.n	8000662 <GUI_UpdateScreen+0x42>
	for (uint32_t y = 0; y < GUI_HEIGHT; y += MAXTXH) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3350      	adds	r3, #80	; 0x50
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000678:	d3d8      	bcc.n	800062c <GUI_UpdateScreen+0xc>
			;
	}
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2002588c 	.word	0x2002588c
 8000688:	2000008c 	.word	0x2000008c

0800068c <HAL_SPI_TxCpltCallback>:
//			while (Done == 0)
//			;
//		}
//}
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <HAL_SPI_TxCpltCallback+0x24>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d102      	bne.n	80006a4 <HAL_SPI_TxCpltCallback+0x18>
		Done = 1;
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_SPI_TxCpltCallback+0x28>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
	}
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40013000 	.word	0x40013000
 80006b4:	2002588c 	.word	0x2002588c

080006b8 <ILI9341_Init>:
void LCD_direction(LCD_Horizontal_t direction);


// Initialization
void ILI9341_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	ILI9341_Reset();
 80006bc:	f000 f912 	bl	80008e4 <ILI9341_Reset>

	ILI9341_SoftReset();
 80006c0:	f000 f928 	bl	8000914 <ILI9341_SoftReset>


#if 1

	/* Power Control A */
	LCD_WR_REG(0xCB);
 80006c4:	20cb      	movs	r0, #203	; 0xcb
 80006c6:	f000 f947 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80006ca:	2039      	movs	r0, #57	; 0x39
 80006cc:	f000 f95e 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80006d0:	202c      	movs	r0, #44	; 0x2c
 80006d2:	f000 f95b 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f958 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80006dc:	2034      	movs	r0, #52	; 0x34
 80006de:	f000 f955 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80006e2:	2002      	movs	r0, #2
 80006e4:	f000 f952 	bl	800098c <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF);
 80006e8:	20cf      	movs	r0, #207	; 0xcf
 80006ea:	f000 f935 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f94c 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80006f4:	20c1      	movs	r0, #193	; 0xc1
 80006f6:	f000 f949 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x30);
 80006fa:	2030      	movs	r0, #48	; 0x30
 80006fc:	f000 f946 	bl	800098c <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8);
 8000700:	20e8      	movs	r0, #232	; 0xe8
 8000702:	f000 f929 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000706:	2085      	movs	r0, #133	; 0x85
 8000708:	f000 f940 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f93d 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x78);
 8000712:	2078      	movs	r0, #120	; 0x78
 8000714:	f000 f93a 	bl	800098c <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA);
 8000718:	20ea      	movs	r0, #234	; 0xea
 800071a:	f000 f91d 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f934 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000724:	2000      	movs	r0, #0
 8000726:	f000 f931 	bl	800098c <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED);
 800072a:	20ed      	movs	r0, #237	; 0xed
 800072c:	f000 f914 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000730:	2064      	movs	r0, #100	; 0x64
 8000732:	f000 f92b 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000736:	2003      	movs	r0, #3
 8000738:	f000 f928 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 800073c:	2012      	movs	r0, #18
 800073e:	f000 f925 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x81);
 8000742:	2081      	movs	r0, #129	; 0x81
 8000744:	f000 f922 	bl	800098c <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7);
 8000748:	20f7      	movs	r0, #247	; 0xf7
 800074a:	f000 f905 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800074e:	2020      	movs	r0, #32
 8000750:	f000 f91c 	bl	800098c <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0);
 8000754:	20c0      	movs	r0, #192	; 0xc0
 8000756:	f000 f8ff 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 800075a:	2010      	movs	r0, #16
 800075c:	f000 f916 	bl	800098c <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1);
 8000760:	20c1      	movs	r0, #193	; 0xc1
 8000762:	f000 f8f9 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 8000766:	2010      	movs	r0, #16
 8000768:	f000 f910 	bl	800098c <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5);
 800076c:	20c5      	movs	r0, #197	; 0xc5
 800076e:	f000 f8f3 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x3E);
 8000772:	203e      	movs	r0, #62	; 0x3e
 8000774:	f000 f90a 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000778:	2028      	movs	r0, #40	; 0x28
 800077a:	f000 f907 	bl	800098c <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7);
 800077e:	20c7      	movs	r0, #199	; 0xc7
 8000780:	f000 f8ea 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x86);
 8000784:	2086      	movs	r0, #134	; 0x86
 8000786:	f000 f901 	bl	800098c <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36);
 800078a:	2036      	movs	r0, #54	; 0x36
 800078c:	f000 f8e4 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x48);
 8000790:	2048      	movs	r0, #72	; 0x48
 8000792:	f000 f8fb 	bl	800098c <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A);
 8000796:	203a      	movs	r0, #58	; 0x3a
 8000798:	f000 f8de 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x55);    //16bit
 800079c:	2055      	movs	r0, #85	; 0x55
 800079e:	f000 f8f5 	bl	800098c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80007a2:	20b1      	movs	r0, #177	; 0xb1
 80007a4:	f000 f8d8 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 f8ef 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x18);
 80007ae:	2018      	movs	r0, #24
 80007b0:	f000 f8ec 	bl	800098c <LCD_WR_DATA>



	/* Display Function Control */
	LCD_WR_REG(0xB6);
 80007b4:	20b6      	movs	r0, #182	; 0xb6
 80007b6:	f000 f8cf 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x08);
 80007ba:	2008      	movs	r0, #8
 80007bc:	f000 f8e6 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x82);
 80007c0:	2082      	movs	r0, #130	; 0x82
 80007c2:	f000 f8e3 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x27);
 80007c6:	2027      	movs	r0, #39	; 0x27
 80007c8:	f000 f8e0 	bl	800098c <LCD_WR_DATA>

	/* Display Function Control */
	LCD_WR_REG(0xB0);
 80007cc:	20b0      	movs	r0, #176	; 0xb0
 80007ce:	f000 f8c3 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 f8da 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x82);
 80007d8:	2082      	movs	r0, #130	; 0x82
 80007da:	f000 f8d7 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
	LCD_WR_DATA(0x36);
	LCD_WR_DATA(0x0F);
*/
	/*Inversion on */
	LCD_WR_REG(0x21);
 80007de:	2021      	movs	r0, #33	; 0x21
 80007e0:	f000 f8ba 	bl	8000958 <LCD_WR_REG>
	HAL_Delay(10);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f001 f83f 	bl	8001868 <HAL_Delay>
	//EXIT SLEEP
	LCD_WR_REG(0x11);
 80007ea:	2011      	movs	r0, #17
 80007ec:	f000 f8b4 	bl	8000958 <LCD_WR_REG>
	HAL_Delay(120);
 80007f0:	2078      	movs	r0, #120	; 0x78
 80007f2:	f001 f839 	bl	8001868 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29);
 80007f6:	2029      	movs	r0, #41	; 0x29
 80007f8:	f000 f8ae 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(0x2C);
 80007fc:	202c      	movs	r0, #44	; 0x2c
 80007fe:	f000 f8c5 	bl	800098c <LCD_WR_DATA>

	LCD_direction(ROTATE_0);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f8dc 	bl	80009c0 <LCD_direction>
	HAL_Delay(100);
 8000808:	2064      	movs	r0, #100	; 0x64
 800080a:	f001 f82d 	bl	8001868 <HAL_Delay>
	//LED_H();


#endif

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}

08000812 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y)
{
 8000812:	b590      	push	{r4, r7, lr}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	4604      	mov	r4, r0
 800081a:	4608      	mov	r0, r1
 800081c:	4611      	mov	r1, r2
 800081e:	461a      	mov	r2, r3
 8000820:	4623      	mov	r3, r4
 8000822:	80fb      	strh	r3, [r7, #6]
 8000824:	4603      	mov	r3, r0
 8000826:	80bb      	strh	r3, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	807b      	strh	r3, [r7, #2]
 800082c:	4613      	mov	r3, r2
 800082e:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a);
 8000830:	202a      	movs	r0, #42	; 0x2a
 8000832:	f000 f891 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8);
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f8a4 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x);
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f89f 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8);
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	b29b      	uxth	r3, r3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f898 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x);
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f893 	bl	800098c <LCD_WR_DATA>

	LCD_WR_REG(0x2b);
 8000866:	202b      	movs	r0, #43	; 0x2b
 8000868:	f000 f876 	bl	8000958 <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8);
 800086c:	88bb      	ldrh	r3, [r7, #4]
 800086e:	0a1b      	lsrs	r3, r3, #8
 8000870:	b29b      	uxth	r3, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f889 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y);
 800087a:	88bb      	ldrh	r3, [r7, #4]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f884 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8);
 8000884:	883b      	ldrh	r3, [r7, #0]
 8000886:	0a1b      	lsrs	r3, r3, #8
 8000888:	b29b      	uxth	r3, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f87d 	bl	800098c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y);
 8000892:	883b      	ldrh	r3, [r7, #0]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f878 	bl	800098c <LCD_WR_DATA>

}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd90      	pop	{r4, r7, pc}

080008a4 <ILI9341_DrawBitmap>:

// Call this function after ILI9341_SetWindow
// This function is non blocked
// The variable for Callback is open. User should set by himself
void ILI9341_DrawBitmap(uint16_t w, uint16_t h, uint8_t *s)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	603a      	str	r2, [r7, #0]
 80008ae:	80fb      	strh	r3, [r7, #6]
 80008b0:	460b      	mov	r3, r1
 80008b2:	80bb      	strh	r3, [r7, #4]
	// Enable to access GRAM
	LCD_WR_REG(0x2c);
 80008b4:	202c      	movs	r0, #44	; 0x2c
 80008b6:	f000 f84f 	bl	8000958 <LCD_WR_REG>

	DC_H();
 80008ba:	f000 f8e5 	bl	8000a88 <DC_H>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)s, w * h *sizeof(uint16_t));
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	88bb      	ldrh	r3, [r7, #4]
 80008c2:	fb12 f303 	smulbb	r3, r2, r3
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	6839      	ldr	r1, [r7, #0]
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <ILI9341_DrawBitmap+0x3c>)
 80008d2:	f004 ff2f 	bl	8005734 <HAL_SPI_Transmit_DMA>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200259c0 	.word	0x200259c0

080008e4 <ILI9341_Reset>:
//	for (int i = 0; i < lcd_window.height; i++) {
//		HAL_SPI_Transmit(&hspi1, data, lcd_window.width*2, 1000);
//	}
//	//CS_H();
void ILI9341_Reset(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80008e8:	2064      	movs	r0, #100	; 0x64
 80008ea:	f000 ffbd 	bl	8001868 <HAL_Delay>
	RESET_L();
 80008ee:	f000 f89b 	bl	8000a28 <RESET_L>
	HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f000 ffb8 	bl	8001868 <HAL_Delay>
	RESET_H();
 80008f8:	f000 f8a2 	bl	8000a40 <RESET_H>
	HAL_Delay(100);
 80008fc:	2064      	movs	r0, #100	; 0x64
 80008fe:	f000 ffb3 	bl	8001868 <HAL_Delay>
	CS_L();
 8000902:	f000 f8a9 	bl	8000a58 <CS_L>
	LED_H();
 8000906:	f000 f8cb 	bl	8000aa0 <LED_H>
	HAL_Delay(100);
 800090a:	2064      	movs	r0, #100	; 0x64
 800090c:	f000 ffac 	bl	8001868 <HAL_Delay>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <ILI9341_SoftReset>:

void ILI9341_SoftReset(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800091a:	2064      	movs	r0, #100	; 0x64
 800091c:	f000 ffa4 	bl	8001868 <HAL_Delay>
	uint8_t cmd;
	cmd = 0x01; //Software reset
 8000920:	2301      	movs	r3, #1
 8000922:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f000 ff9f 	bl	8001868 <HAL_Delay>
	DC_L();
 800092a:	f000 f8a1 	bl	8000a70 <DC_L>
	if (HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000) != HAL_OK) {
 800092e:	1df9      	adds	r1, r7, #7
 8000930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000934:	2201      	movs	r2, #1
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <ILI9341_SoftReset+0x40>)
 8000938:	f004 fd96 	bl	8005468 <HAL_SPI_Transmit>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d004      	beq.n	800094c <ILI9341_SoftReset+0x38>
		Error_Handler();
 8000942:	f000 fc39 	bl	80011b8 <Error_Handler>
		HAL_Delay(200);
 8000946:	20c8      	movs	r0, #200	; 0xc8
 8000948:	f000 ff8e 	bl	8001868 <HAL_Delay>
	}
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200259c0 	.word	0x200259c0

08000958 <LCD_WR_REG>:


void LCD_WR_REG(uint8_t data)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	DC_L();
 8000962:	f000 f885 	bl	8000a70 <DC_L>
	if (HAL_SPI_Transmit(&hspi1, &data, 1, 1000) != HAL_OK) {
 8000966:	1df9      	adds	r1, r7, #7
 8000968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096c:	2201      	movs	r2, #1
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <LCD_WR_REG+0x30>)
 8000970:	f004 fd7a 	bl	8005468 <HAL_SPI_Transmit>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <LCD_WR_REG+0x26>
		Error_Handler();
 800097a:	f000 fc1d 	bl	80011b8 <Error_Handler>
	}
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200259c0 	.word	0x200259c0

0800098c <LCD_WR_DATA>:

void LCD_WR_DATA(uint8_t data)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	DC_H();
 8000996:	f000 f877 	bl	8000a88 <DC_H>
	if (HAL_SPI_Transmit(&hspi1, &data, 1, 1000) != HAL_OK) {
 800099a:	1df9      	adds	r1, r7, #7
 800099c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a0:	2201      	movs	r2, #1
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <LCD_WR_DATA+0x30>)
 80009a4:	f004 fd60 	bl	8005468 <HAL_SPI_Transmit>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <LCD_WR_DATA+0x26>
		Error_Handler();
 80009ae:	f000 fc03 	bl	80011b8 <Error_Handler>
	}
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200259c0 	.word	0x200259c0

080009c0 <LCD_direction>:

void LCD_direction(LCD_Horizontal_t direction)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d826      	bhi.n	8000a1e <LCD_direction+0x5e>
 80009d0:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <LCD_direction+0x18>)
 80009d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d6:	bf00      	nop
 80009d8:	080009e9 	.word	0x080009e9
 80009dc:	080009f7 	.word	0x080009f7
 80009e0:	08000a05 	.word	0x08000a05
 80009e4:	08000a11 	.word	0x08000a11
	case ROTATE_0:
		LCD_WR_REG(0x36);
 80009e8:	2036      	movs	r0, #54	; 0x36
 80009ea:	f7ff ffb5 	bl	8000958 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 80009ee:	2048      	movs	r0, #72	; 0x48
 80009f0:	f7ff ffcc 	bl	800098c <LCD_WR_DATA>
		break;
 80009f4:	e013      	b.n	8000a1e <LCD_direction+0x5e>
	case ROTATE_90:
		LCD_WR_REG(0x36);
 80009f6:	2036      	movs	r0, #54	; 0x36
 80009f8:	f7ff ffae 	bl	8000958 <LCD_WR_REG>
		LCD_WR_DATA(0x28);
 80009fc:	2028      	movs	r0, #40	; 0x28
 80009fe:	f7ff ffc5 	bl	800098c <LCD_WR_DATA>
		break;
 8000a02:	e00c      	b.n	8000a1e <LCD_direction+0x5e>
	case ROTATE_180:
		LCD_WR_REG(0x36);
 8000a04:	2036      	movs	r0, #54	; 0x36
 8000a06:	f7ff ffa7 	bl	8000958 <LCD_WR_REG>
		LCD_WR_DATA(0x88);
 8000a0a:	2088      	movs	r0, #136	; 0x88
 8000a0c:	f7ff ffbe 	bl	800098c <LCD_WR_DATA>
	case ROTATE_270:
		LCD_WR_REG(0x36);
 8000a10:	2036      	movs	r0, #54	; 0x36
 8000a12:	f7ff ffa1 	bl	8000958 <LCD_WR_REG>
		LCD_WR_DATA(0xE8);
 8000a16:	20e8      	movs	r0, #232	; 0xe8
 8000a18:	f7ff ffb8 	bl	800098c <LCD_WR_DATA>
		break;
 8000a1c:	bf00      	nop
	}
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop

08000a28 <RESET_L>:


void RESET_L(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a32:	4802      	ldr	r0, [pc, #8]	; (8000a3c <RESET_L+0x14>)
 8000a34:	f001 fd2a 	bl	800248c <HAL_GPIO_WritePin>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	42021800 	.word	0x42021800

08000a40 <RESET_H>:

void RESET_H(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <RESET_H+0x14>)
 8000a4c:	f001 fd1e 	bl	800248c <HAL_GPIO_WritePin>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	42021800 	.word	0x42021800

08000a58 <CS_L>:

void CS_L(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2120      	movs	r1, #32
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <CS_L+0x14>)
 8000a62:	f001 fd13 	bl	800248c <HAL_GPIO_WritePin>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	42021800 	.word	0x42021800

08000a70 <DC_L>:

void DC_L(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2108      	movs	r1, #8
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <DC_L+0x14>)
 8000a7a:	f001 fd07 	bl	800248c <HAL_GPIO_WritePin>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	42021000 	.word	0x42021000

08000a88 <DC_H>:

void DC_H(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2108      	movs	r1, #8
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <DC_H+0x14>)
 8000a92:	f001 fcfb 	bl	800248c <HAL_GPIO_WritePin>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	42021000 	.word	0x42021000

08000aa0 <LED_H>:

void LED_H(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aaa:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <LED_H+0x14>)
 8000aac:	f001 fcee 	bl	800248c <HAL_GPIO_WritePin>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	42020400 	.word	0x42020400

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abc:	f000 fe61 	bl	8001782 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_PWREx_EnableVddIO2();
 8000ac0:	f002 fff0 	bl	8003aa4 <HAL_PWREx_EnableVddIO2>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f880 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f000 f9cc 	bl	8000e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000acc:	f000 f9a0 	bl	8000e10 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ad0:	f000 f914 	bl	8000cfc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ad4:	f000 f950 	bl	8000d78 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ad8:	f000 f8d0 	bl	8000c7c <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000adc:	f000 f8c2 	bl	8000c64 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* Wait a second for the MBR3 device to bootup */
  HAL_Delay(MBR3_BOOT_DELAY);
 8000ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae4:	f000 fec0 	bl	8001868 <HAL_Delay>

  memset(buff, 0x00, sizeof(buff));
 8000ae8:	2240      	movs	r2, #64	; 0x40
 8000aea:	2100      	movs	r1, #0
 8000aec:	4832      	ldr	r0, [pc, #200]	; (8000bb8 <main+0x100>)
 8000aee:	f006 ff37 	bl	8007960 <memset>
  sprintf(buff, "\r\nLCD Display Touch demo Application Started\r\n");
 8000af2:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <main+0x100>)
 8000af4:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <main+0x104>)
 8000af6:	4614      	mov	r4, r2
 8000af8:	461d      	mov	r5, r3
 8000afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b06:	c407      	stmia	r4!, {r0, r1, r2}
 8000b08:	8023      	strh	r3, [r4, #0]
 8000b0a:	3402      	adds	r4, #2
 8000b0c:	0c1b      	lsrs	r3, r3, #16
 8000b0e:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8000b10:	4829      	ldr	r0, [pc, #164]	; (8000bb8 <main+0x100>)
 8000b12:	f7ff fb91 	bl	8000238 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	4926      	ldr	r1, [pc, #152]	; (8000bb8 <main+0x100>)
 8000b20:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <main+0x108>)
 8000b22:	f005 f8f5 	bl	8005d10 <HAL_UART_Transmit>

	ILI9341_Init();
 8000b26:	f7ff fdc7 	bl	80006b8 <ILI9341_Init>
	HAL_Delay(100);
 8000b2a:	2064      	movs	r0, #100	; 0x64
 8000b2c:	f000 fe9c 	bl	8001868 <HAL_Delay>
  		//I2c_ALL_scanner();
		// LCD_DRAW_image();
		 //MBR_configuration_init; //send MBR3 EZclick config file

		 //SENSOR_Poll();
		 Button_read();
 8000b30:	f000 faaa 	bl	8001088 <Button_read>
//
//		 }

		// uint8 a=buttonData;

 		 if (buttonData == 0x01)
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <main+0x10c>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d108      	bne.n	8000b4e <main+0x96>
				{
					//GUI_FillScreen(RED);
 			 	 	Show_color(RED);
 8000b3c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000b40:	f000 fa8a 	bl	8001058 <Show_color>
					HAL_Delay(10);
 8000b44:	200a      	movs	r0, #10
 8000b46:	f000 fe8f 	bl	8001868 <HAL_Delay>
					GUI_UpdateScreen();
 8000b4a:	f7ff fd69 	bl	8000620 <GUI_UpdateScreen>
				}
		 if (buttonData == 0x02)
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <main+0x10c>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d108      	bne.n	8000b68 <main+0xb0>
				{
					//GUI_FillScreen(GREEN);
			 	 	Show_color(GREEN);
 8000b56:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000b5a:	f000 fa7d 	bl	8001058 <Show_color>
					HAL_Delay(10);
 8000b5e:	200a      	movs	r0, #10
 8000b60:	f000 fe82 	bl	8001868 <HAL_Delay>
					GUI_UpdateScreen();
 8000b64:	f7ff fd5c 	bl	8000620 <GUI_UpdateScreen>
				}
		 if (buttonData == 0x04)
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <main+0x10c>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d107      	bne.n	8000b80 <main+0xc8>
				{
					GUI_FillScreen(BLACK);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fd31 	bl	80005d8 <GUI_FillScreen>
					HAL_Delay(10);
 8000b76:	200a      	movs	r0, #10
 8000b78:	f000 fe76 	bl	8001868 <HAL_Delay>
					GUI_UpdateScreen();
 8000b7c:	f7ff fd50 	bl	8000620 <GUI_UpdateScreen>
				}
		 if (buttonData == 0x08)
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <main+0x10c>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	d108      	bne.n	8000b9a <main+0xe2>
				{
					GUI_FillScreen(MAGENTA);
 8000b88:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000b8c:	f7ff fd24 	bl	80005d8 <GUI_FillScreen>
					HAL_Delay(10);
 8000b90:	200a      	movs	r0, #10
 8000b92:	f000 fe69 	bl	8001868 <HAL_Delay>
					GUI_UpdateScreen();
 8000b96:	f7ff fd43 	bl	8000620 <GUI_UpdateScreen>
				}
		 if (buttonData == 0x10)
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <main+0x10c>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2b10      	cmp	r3, #16
 8000ba0:	d1c6      	bne.n	8000b30 <main+0x78>
				{
					GUI_FillScreen(WHITE);
 8000ba2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ba6:	f7ff fd17 	bl	80005d8 <GUI_FillScreen>
					HAL_Delay(10);
 8000baa:	200a      	movs	r0, #10
 8000bac:	f000 fe5c 	bl	8001868 <HAL_Delay>
					GUI_UpdateScreen();
 8000bb0:	f7ff fd36 	bl	8000620 <GUI_UpdateScreen>
		 Button_read();
 8000bb4:	e7bc      	b.n	8000b30 <main+0x78>
 8000bb6:	bf00      	nop
 8000bb8:	20025890 	.word	0x20025890
 8000bbc:	080081b8 	.word	0x080081b8
 8000bc0:	20025934 	.word	0x20025934
 8000bc4:	2002588e 	.word	0x2002588e

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b098      	sub	sp, #96	; 0x60
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	2248      	movs	r2, #72	; 0x48
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f006 fec2 	bl	8007960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000bea:	2000      	movs	r0, #0
 8000bec:	f002 fefe 	bl	80039ec <HAL_PWREx_ControlVoltageScaling>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000bf6:	f000 fadf 	bl	80011b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c04:	2302      	movs	r3, #2
 8000c06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000c10:	2337      	movs	r3, #55	; 0x37
 8000c12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c14:	2307      	movs	r3, #7
 8000c16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 ff81 	bl	8003b2c <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000c30:	f000 fac2 	bl	80011b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fbd9 	bl	8004404 <HAL_RCC_ClockConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c58:	f000 faae 	bl	80011b8 <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3760      	adds	r7, #96	; 0x60
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2037      	movs	r0, #55	; 0x37
 8000c6e:	f000 fef8 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c72:	2037      	movs	r0, #55	; 0x37
 8000c74:	f000 ff0f 	bl	8001a96 <HAL_NVIC_EnableIRQ>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <MX_I2C1_Init+0x78>)
 8000c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30606DA3;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000c88:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <MX_I2C1_Init+0x7c>)
 8000c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000cb8:	f001 fc19 	bl	80024ee <HAL_I2C_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cc2:	f000 fa79 	bl	80011b8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000ccc:	f002 fde8 	bl	80038a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000cd6:	f000 fa6f 	bl	80011b8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000cde:	f002 fe2a 	bl	8003936 <HAL_I2CEx_ConfigDigitalFilter>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ce8:	f000 fa66 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200258e8 	.word	0x200258e8
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	30606da3 	.word	0x30606da3

08000cfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d02:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <MX_SPI1_Init+0x78>)
 8000d04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d32:	2228      	movs	r2, #40	; 0x28
 8000d34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d56:	2208      	movs	r2, #8
 8000d58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_SPI1_Init+0x74>)
 8000d5c:	f004 fafa 	bl	8005354 <HAL_SPI_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d66:	f000 fa27 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200259c0 	.word	0x200259c0
 8000d74:	40013000 	.word	0x40013000

08000d78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d7e:	4a23      	ldr	r2, [pc, #140]	; (8000e0c <MX_USART1_UART_Init+0x94>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc0:	4811      	ldr	r0, [pc, #68]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000dc2:	f004 ff55 	bl	8005c70 <HAL_UART_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000dcc:	f000 f9f4 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000dd4:	f006 fcb5 	bl	8007742 <HAL_UARTEx_SetTxFifoThreshold>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dde:	f000 f9eb 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4808      	ldr	r0, [pc, #32]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000de6:	f006 fcea 	bl	80077be <HAL_UARTEx_SetRxFifoThreshold>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000df0:	f000 f9e2 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000df6:	f006 fc6b 	bl	80076d0 <HAL_UARTEx_DisableFifoMode>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e00:	f000 f9da 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20025934 	.word	0x20025934
 8000e0c:	40013800 	.word	0x40013800

08000e10 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_DMA_Init+0x50>)
 8000e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e1a:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <MX_DMA_Init+0x50>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6493      	str	r3, [r2, #72]	; 0x48
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_DMA_Init+0x50>)
 8000e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_DMA_Init+0x50>)
 8000e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <MX_DMA_Init+0x50>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6493      	str	r3, [r2, #72]	; 0x48
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_DMA_Init+0x50>)
 8000e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	201d      	movs	r0, #29
 8000e4c:	f000 fe09 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e50:	201d      	movs	r0, #29
 8000e52:	f000 fe20 	bl	8001a96 <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	4b72      	ldr	r3, [pc, #456]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a71      	ldr	r2, [pc, #452]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000e80:	f043 0310 	orr.w	r3, r3, #16
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b6f      	ldr	r3, [pc, #444]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	4b6c      	ldr	r3, [pc, #432]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a6b      	ldr	r2, [pc, #428]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b69      	ldr	r3, [pc, #420]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eaa:	4b66      	ldr	r3, [pc, #408]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a65      	ldr	r2, [pc, #404]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b63      	ldr	r3, [pc, #396]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	4b60      	ldr	r3, [pc, #384]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a5f      	ldr	r2, [pc, #380]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b5d      	ldr	r3, [pc, #372]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eda:	4b5a      	ldr	r3, [pc, #360]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a59      	ldr	r2, [pc, #356]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b57      	ldr	r3, [pc, #348]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000ef2:	f002 fdd7 	bl	8003aa4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b53      	ldr	r3, [pc, #332]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4a52      	ldr	r2, [pc, #328]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4b50      	ldr	r3, [pc, #320]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4a4c      	ldr	r2, [pc, #304]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4b4a      	ldr	r3, [pc, #296]	; (8001044 <MX_GPIO_Init+0x1e0>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2108      	movs	r1, #8
 8000f2a:	4847      	ldr	r0, [pc, #284]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000f2c:	f001 faae 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f36:	4844      	ldr	r0, [pc, #272]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000f38:	f001 faa8 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	4842      	ldr	r0, [pc, #264]	; (800104c <MX_GPIO_Init+0x1e8>)
 8000f44:	f001 faa2 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SPI1_NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f248 0120 	movw	r1, #32800	; 0x8020
 8000f4e:	4840      	ldr	r0, [pc, #256]	; (8001050 <MX_GPIO_Init+0x1ec>)
 8000f50:	f001 fa9c 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5a:	483d      	ldr	r0, [pc, #244]	; (8001050 <MX_GPIO_Init+0x1ec>)
 8000f5c:	f001 fa96 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f66:	483b      	ldr	r0, [pc, #236]	; (8001054 <MX_GPIO_Init+0x1f0>)
 8000f68:	f001 fa90 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DCX_Pin */
  GPIO_InitStruct.Pin = DCX_Pin;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f74:	2302      	movs	r3, #2
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCX_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	4831      	ldr	r0, [pc, #196]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000f84:	f001 f902 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CTRL_Pin */
  GPIO_InitStruct.Pin = LED_CTRL_Pin;
 8000f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4829      	ldr	r0, [pc, #164]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000fa2:	f001 f8f3 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4823      	ldr	r0, [pc, #140]	; (800104c <MX_GPIO_Init+0x1e8>)
 8000fc0:	f001 f8e4 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481d      	ldr	r0, [pc, #116]	; (8001050 <MX_GPIO_Init+0x1ec>)
 8000fdc:	f001 f8d6 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4815      	ldr	r0, [pc, #84]	; (8001050 <MX_GPIO_Init+0x1ec>)
 8000ffa:	f001 f8c7 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	480e      	ldr	r0, [pc, #56]	; (8001050 <MX_GPIO_Init+0x1ec>)
 8001018:	f001 f8b8 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800101c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <MX_GPIO_Init+0x1f0>)
 8001036:	f001 f8a9 	bl	800218c <HAL_GPIO_Init>

}
 800103a:	bf00      	nop
 800103c:	3730      	adds	r7, #48	; 0x30
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000
 8001048:	42021000 	.word	0x42021000
 800104c:	42020c00 	.word	0x42020c00
 8001050:	42021800 	.word	0x42021800
 8001054:	42020400 	.word	0x42020400

08001058 <Show_color>:
* Summary:
*  This function reads button status.
*/

void Show_color(uint16_t cl)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
	//TURN OFF DISPLAY
	LCD_WR_REG(0x28);
 8001062:	2028      	movs	r0, #40	; 0x28
 8001064:	f7ff fc78 	bl	8000958 <LCD_WR_REG>
	//LCD_WR_DATA(0x2C);


		GUI_FillScreen(cl);
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fab4 	bl	80005d8 <GUI_FillScreen>
		HAL_Delay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f000 fbf9 	bl	8001868 <HAL_Delay>
		GUI_UpdateScreen();
 8001076:	f7ff fad3 	bl	8000620 <GUI_UpdateScreen>

		//TURN ON DISPLAY
		LCD_WR_REG(0x29);
 800107a:	2029      	movs	r0, #41	; 0x29
 800107c:	f7ff fc6c 	bl	8000958 <LCD_WR_REG>
		//LCD_WR_DATA(0x2C);



}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <Button_read>:

void Button_read(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
		if (TRUE == CY8CMBR3xxx_ReadDualByte(SLAVE_ADDRESS, CY8CMBR3xxx_BUTTON_STAT,  &buttonData))
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <Button_read+0x50>)
 8001090:	21aa      	movs	r1, #170	; 0xaa
 8001092:	2037      	movs	r0, #55	; 0x37
 8001094:	f7ff fa62 	bl	800055c <CY8CMBR3xxx_ReadDualByte>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	d118      	bne.n	80010d0 <Button_read+0x48>
			{
				/* Indicate a success using GREEN LED */
			  memset(buff, 0x00, sizeof(buff));
 800109e:	2240      	movs	r2, #64	; 0x40
 80010a0:	2100      	movs	r1, #0
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <Button_read+0x54>)
 80010a4:	f006 fc5c 	bl	8007960 <memset>
			  uint8 i= buttonData;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <Button_read+0x50>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	71fb      	strb	r3, [r7, #7]
			  sprintf(buff, "button press stat: 0x%X\r\n", i);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	461a      	mov	r2, r3
 80010b2:	490b      	ldr	r1, [pc, #44]	; (80010e0 <Button_read+0x58>)
 80010b4:	4809      	ldr	r0, [pc, #36]	; (80010dc <Button_read+0x54>)
 80010b6:	f006 fc5b 	bl	8007970 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <Button_read+0x54>)
 80010bc:	f7ff f8bc 	bl	8000238 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	4904      	ldr	r1, [pc, #16]	; (80010dc <Button_read+0x54>)
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <Button_read+0x5c>)
 80010cc:	f004 fe20 	bl	8005d10 <HAL_UART_Transmit>
			}
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2002588e 	.word	0x2002588e
 80010dc:	20025890 	.word	0x20025890
 80010e0:	080081e8 	.word	0x080081e8
 80010e4:	20025934 	.word	0x20025934

080010e8 <Host_LowLevelWrite>:
*    TRUE                 Write process was successful
*    FALSE                Write process was not successful
*
*******************************************************************************/
bool Host_LowLevelWrite(uint8 slaveAddress, uint8 *writeBuffer, uint8 numberOfBytes)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
    bool status = FALSE;                                       /* Default return is FALSE if anything goes wrong */
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
   // uint32 localBufStatus = 0;             /* Error status variable */
    uint8 retryCount = CY8CMBR3xxx_RETRY_TIMES;                /* Retry count, in case of any issue */
 80010fc:	230a      	movs	r3, #10
 80010fe:	73bb      	strb	r3, [r7, #14]
   // if(HAL_I2C_IsDeviceReady(&hi2c1, slaveAddress<<1, 10, 1000)==HAL_OK)


    	while (HAL_I2C_Master_Transmit(&hi2c1, slaveAddress<<1, writeBuffer, numberOfBytes, 10000) != HAL_OK)
 8001100:	e007      	b.n	8001112 <Host_LowLevelWrite+0x2a>
    	{
    		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001102:	4812      	ldr	r0, [pc, #72]	; (800114c <Host_LowLevelWrite+0x64>)
 8001104:	f001 fd27 	bl	8002b56 <HAL_I2C_GetError>
 8001108:	4603      	mov	r3, r0
 800110a:	2b04      	cmp	r3, #4
 800110c:	d001      	beq.n	8001112 <Host_LowLevelWrite+0x2a>
    		    {
    		      Error_Handler();
 800110e:	f000 f853 	bl	80011b8 <Error_Handler>
    	while (HAL_I2C_Master_Transmit(&hi2c1, slaveAddress<<1, writeBuffer, numberOfBytes, 10000) != HAL_OK)
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	b29b      	uxth	r3, r3
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	b299      	uxth	r1, r3
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	b29a      	uxth	r2, r3
 800111e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4613      	mov	r3, r2
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <Host_LowLevelWrite+0x64>)
 800112a:	f001 fa6f 	bl	800260c <HAL_I2C_Master_Transmit>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1e6      	bne.n	8001102 <Host_LowLevelWrite+0x1a>
    		    }
    	}


   // HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2)
    status = (retryCount)? TRUE: FALSE;
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	2b00      	cmp	r3, #0
 8001138:	bf14      	ite	ne
 800113a:	2301      	movne	r3, #1
 800113c:	2300      	moveq	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	73fb      	strb	r3, [r7, #15]
    return status;
 8001142:	7bfb      	ldrb	r3, [r7, #15]

}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200258e8 	.word	0x200258e8

08001150 <Host_LowLevelRead>:
*    TRUE                 Read process was successful
*    FALSE                Read process was not successful
*
*******************************************************************************/
bool Host_LowLevelRead(uint8 slaveAddress, uint8 *readBuffer, uint8 numberOfBytes)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af02      	add	r7, sp, #8
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
    bool status = FALSE;                                       /* Default return is FALSE if anything goes wrong */
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
 //   uint32 localBufStatus = HAL_OK;             /* Error status variable */
    uint8 retryCount = CY8CMBR3xxx_RETRY_TIMES;                /* Retry count, in case of any issue */
 8001164:	230a      	movs	r3, #10
 8001166:	73bb      	strb	r3, [r7, #14]
   // localBufStatus = SCB_I2CMasterWriteBuf(slaveAddress, writeBuffer, numberOfBytes, SCB_I2C_MODE_COMPLETE_XFER);
  //  if(HAL_I2C_IsDeviceReady(&hi2c1, slaveAddress<<1, 10, 1000)==HAL_OK)
//    {
//    HAL_I2C_Master_Receive(&hi2c1, slaveAddress<<1, writeBuffer, numberOfBytes, 10000);
	while (HAL_I2C_Master_Receive(&hi2c1, slaveAddress<<1, readBuffer, numberOfBytes, 10000) != HAL_OK)
 8001168:	e007      	b.n	800117a <Host_LowLevelRead+0x2a>
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800116a:	4812      	ldr	r0, [pc, #72]	; (80011b4 <Host_LowLevelRead+0x64>)
 800116c:	f001 fcf3 	bl	8002b56 <HAL_I2C_GetError>
 8001170:	4603      	mov	r3, r0
 8001172:	2b04      	cmp	r3, #4
 8001174:	d001      	beq.n	800117a <Host_LowLevelRead+0x2a>
			{
			  Error_Handler();
 8001176:	f000 f81f 	bl	80011b8 <Error_Handler>
	while (HAL_I2C_Master_Receive(&hi2c1, slaveAddress<<1, readBuffer, numberOfBytes, 10000) != HAL_OK)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	b29b      	uxth	r3, r3
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	b299      	uxth	r1, r3
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	b29a      	uxth	r2, r3
 8001186:	f242 7310 	movw	r3, #10000	; 0x2710
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4613      	mov	r3, r2
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <Host_LowLevelRead+0x64>)
 8001192:	f001 fb2f 	bl	80027f4 <HAL_I2C_Master_Receive>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1e6      	bne.n	800116a <Host_LowLevelRead+0x1a>

//    }
   // HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2)

    /* Check whether the transaction was successful or it timed-out */
    status = (retryCount)? TRUE: FALSE;
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bf14      	ite	ne
 80011a2:	2301      	movne	r3, #1
 80011a4:	2300      	moveq	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	73fb      	strb	r3, [r7, #15]

    return status;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200258e8 	.word	0x200258e8

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* USER CODE BEGIN Error_Handler_Debug */
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <Error_Handler+0x38>)
 80011c4:	f001 f962 	bl	800248c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <Error_Handler+0x38>)
 80011d0:	f001 f95c 	bl	800248c <HAL_GPIO_WritePin>
	  while(1)
	  {
	    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <Error_Handler+0x38>)
 80011da:	f001 f96f 	bl	80024bc <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80011de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <Error_Handler+0x38>)
 80011e4:	f001 f96a 	bl	80024bc <HAL_GPIO_TogglePin>
	    HAL_Delay(100);
 80011e8:	2064      	movs	r0, #100	; 0x64
 80011ea:	f000 fb3d 	bl	8001868 <HAL_Delay>
	    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80011ee:	e7f1      	b.n	80011d4 <Error_Handler+0x1c>
 80011f0:	42020400 	.word	0x42020400

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_MspInit+0x44>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_MspInit+0x44>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6613      	str	r3, [r2, #96]	; 0x60
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_MspInit+0x44>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_MspInit+0x44>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_MspInit+0x44>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6593      	str	r3, [r2, #88]	; 0x58
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_MspInit+0x44>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800122a:	f002 fc4b 	bl	8003ac4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0ae      	sub	sp, #184	; 0xb8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2294      	movs	r2, #148	; 0x94
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f006 fb7f 	bl	8007960 <memset>
  if(hi2c->Instance==I2C1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_I2C_MspInit+0xc4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d145      	bne.n	80012f8 <HAL_I2C_MspInit+0xbc>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock 
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001270:	2300      	movs	r3, #0
 8001272:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fb97 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001284:	f7ff ff98 	bl	80011b8 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <HAL_I2C_MspInit+0xc8>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_I2C_MspInit+0xc8>)
 800128e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_I2C_MspInit+0xc8>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80012a0:	f002 fc00 	bl	8003aa4 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration    
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ac:	2312      	movs	r3, #18
 80012ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012be:	2304      	movs	r3, #4
 80012c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012c8:	4619      	mov	r1, r3
 80012ca:	480f      	ldr	r0, [pc, #60]	; (8001308 <HAL_I2C_MspInit+0xcc>)
 80012cc:	f000 ff5e 	bl	800218c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_I2C_MspInit+0xc8>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <HAL_I2C_MspInit+0xc8>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012da:	6593      	str	r3, [r2, #88]	; 0x58
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_I2C_MspInit+0xc8>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2038      	movs	r0, #56	; 0x38
 80012ee:	f000 fbb8 	bl	8001a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012f2:	2038      	movs	r0, #56	; 0x38
 80012f4:	f000 fbcf 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	37b8      	adds	r7, #184	; 0xb8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40005400 	.word	0x40005400
 8001304:	40021000 	.word	0x40021000
 8001308:	42021800 	.word	0x42021800

0800130c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a31      	ldr	r2, [pc, #196]	; (80013f0 <HAL_SPI_MspInit+0xe4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d15b      	bne.n	80013e6 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_SPI_MspInit+0xe8>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001332:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <HAL_SPI_MspInit+0xe8>)
 8001334:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001338:	6613      	str	r3, [r2, #96]	; 0x60
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <HAL_SPI_MspInit+0xe8>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_SPI_MspInit+0xe8>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a2a      	ldr	r2, [pc, #168]	; (80013f4 <HAL_SPI_MspInit+0xe8>)
 800134c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_SPI_MspInit+0xe8>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 800135e:	f002 fba1 	bl	8003aa4 <HAL_PWREx_EnableVddIO2>
    /**SPI1 GPIO Configuration    
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001362:	231c      	movs	r3, #28
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	2301      	movs	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	2302      	movs	r3, #2
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001372:	2305      	movs	r3, #5
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	481e      	ldr	r0, [pc, #120]	; (80013f8 <HAL_SPI_MspInit+0xec>)
 800137e:	f000 ff05 	bl	800218c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_SPI_MspInit+0xf4>)
 8001386:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 800138a:	220c      	movs	r2, #12
 800138c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 8001390:	2210      	movs	r2, #16
 8001392:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013b8:	4810      	ldr	r0, [pc, #64]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 80013ba:	f000 fb87 	bl	8001acc <HAL_DMA_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80013c4:	f7ff fef8 	bl	80011b8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80013c8:	2110      	movs	r1, #16
 80013ca:	480c      	ldr	r0, [pc, #48]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 80013cc:	f000 fe0e 	bl	8001fec <HAL_DMA_ConfigChannelAttributes>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80013d6:	f7ff feef 	bl	80011b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 80013de:	655a      	str	r2, [r3, #84]	; 0x54
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_SPI_MspInit+0xf0>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40013000 	.word	0x40013000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	42021800 	.word	0x42021800
 80013fc:	20025a24 	.word	0x20025a24
 8001400:	40020008 	.word	0x40020008

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0ae      	sub	sp, #184	; 0xb8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	2294      	movs	r2, #148	; 0x94
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f006 fa9b 	bl	8007960 <memset>
  if(huart->Instance==USART1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <HAL_UART_MspInit+0xb0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d13b      	bne.n	80014ac <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock 
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001434:	2301      	movs	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001438:	2300      	movs	r3, #0
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4618      	mov	r0, r3
 8001442:	f003 fab3 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800144c:	f7ff feb4 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_UART_MspInit+0xb4>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001454:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <HAL_UART_MspInit+0xb4>)
 8001456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145a:	6613      	str	r3, [r2, #96]	; 0x60
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_UART_MspInit+0xb4>)
 800145e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_UART_MspInit+0xb4>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <HAL_UART_MspInit+0xb4>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_UART_MspInit+0xb4>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001480:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001484:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148e:	2301      	movs	r3, #1
 8001490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800149a:	2307      	movs	r3, #7
 800149c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a4:	4619      	mov	r1, r3
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_UART_MspInit+0xb8>)
 80014a8:	f000 fe70 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	37b8      	adds	r7, #184	; 0xb8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40013800 	.word	0x40013800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	42020000 	.word	0x42020000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 f98a 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA1_Channel1_IRQHandler+0x10>)
 8001522:	f000 fc55 	bl	8001dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20025a24 	.word	0x20025a24

08001530 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <I2C1_EV_IRQHandler+0x10>)
 8001536:	f001 fa53 	bl	80029e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200258e8 	.word	0x200258e8

08001544 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <I2C1_ER_IRQHandler+0x10>)
 800154a:	f001 fa63 	bl	8002a14 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200258e8 	.word	0x200258e8

08001558 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <_sbrk+0x50>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x16>
		heap_end = &end;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <_sbrk+0x50>)
 800156a:	4a10      	ldr	r2, [pc, #64]	; (80015ac <_sbrk+0x54>)
 800156c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <_sbrk+0x50>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <_sbrk+0x50>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	466a      	mov	r2, sp
 800157e:	4293      	cmp	r3, r2
 8001580:	d907      	bls.n	8001592 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001582:	f006 f9c3 	bl	800790c <__errno>
 8001586:	4602      	mov	r2, r0
 8001588:	230c      	movs	r3, #12
 800158a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	e006      	b.n	80015a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <_sbrk+0x50>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <_sbrk+0x50>)
 800159c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200258d0 	.word	0x200258d0
 80015ac:	20025a98 	.word	0x20025a98

080015b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <SystemInit+0x20>)
 80015b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <SystemInit+0x20>)
 80015bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80015da:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <SystemCoreClockUpdate+0x144>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d107      	bne.n	80015f6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80015e6:	4b4c      	ldr	r3, [pc, #304]	; (8001718 <SystemCoreClockUpdate+0x144>)
 80015e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e005      	b.n	8001602 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80015f6:	4b48      	ldr	r3, [pc, #288]	; (8001718 <SystemCoreClockUpdate+0x144>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001602:	4a46      	ldr	r2, [pc, #280]	; (800171c <SystemCoreClockUpdate+0x148>)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800160c:	4b42      	ldr	r3, [pc, #264]	; (8001718 <SystemCoreClockUpdate+0x144>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b0c      	cmp	r3, #12
 8001616:	d865      	bhi.n	80016e4 <SystemCoreClockUpdate+0x110>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <SystemCoreClockUpdate+0x4c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001655 	.word	0x08001655
 8001624:	080016e5 	.word	0x080016e5
 8001628:	080016e5 	.word	0x080016e5
 800162c:	080016e5 	.word	0x080016e5
 8001630:	0800165d 	.word	0x0800165d
 8001634:	080016e5 	.word	0x080016e5
 8001638:	080016e5 	.word	0x080016e5
 800163c:	080016e5 	.word	0x080016e5
 8001640:	08001665 	.word	0x08001665
 8001644:	080016e5 	.word	0x080016e5
 8001648:	080016e5 	.word	0x080016e5
 800164c:	080016e5 	.word	0x080016e5
 8001650:	0800166d 	.word	0x0800166d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001654:	4a32      	ldr	r2, [pc, #200]	; (8001720 <SystemCoreClockUpdate+0x14c>)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	6013      	str	r3, [r2, #0]
      break;
 800165a:	e047      	b.n	80016ec <SystemCoreClockUpdate+0x118>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <SystemCoreClockUpdate+0x14c>)
 800165e:	4a31      	ldr	r2, [pc, #196]	; (8001724 <SystemCoreClockUpdate+0x150>)
 8001660:	601a      	str	r2, [r3, #0]
      break;
 8001662:	e043      	b.n	80016ec <SystemCoreClockUpdate+0x118>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <SystemCoreClockUpdate+0x14c>)
 8001666:	4a30      	ldr	r2, [pc, #192]	; (8001728 <SystemCoreClockUpdate+0x154>)
 8001668:	601a      	str	r2, [r3, #0]
      break;
 800166a:	e03f      	b.n	80016ec <SystemCoreClockUpdate+0x118>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <SystemCoreClockUpdate+0x144>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <SystemCoreClockUpdate+0x144>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	3301      	adds	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d002      	beq.n	8001690 <SystemCoreClockUpdate+0xbc>
 800168a:	2b03      	cmp	r3, #3
 800168c:	d006      	beq.n	800169c <SystemCoreClockUpdate+0xc8>
 800168e:	e00b      	b.n	80016a8 <SystemCoreClockUpdate+0xd4>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001690:	4a24      	ldr	r2, [pc, #144]	; (8001724 <SystemCoreClockUpdate+0x150>)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	fbb2 f3f3 	udiv	r3, r2, r3
 8001698:	613b      	str	r3, [r7, #16]
          break;
 800169a:	e00b      	b.n	80016b4 <SystemCoreClockUpdate+0xe0>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800169c:	4a22      	ldr	r2, [pc, #136]	; (8001728 <SystemCoreClockUpdate+0x154>)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	613b      	str	r3, [r7, #16]
          break;
 80016a6:	e005      	b.n	80016b4 <SystemCoreClockUpdate+0xe0>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	613b      	str	r3, [r7, #16]
          break;
 80016b2:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <SystemCoreClockUpdate+0x144>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <SystemCoreClockUpdate+0x144>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	0e5b      	lsrs	r3, r3, #25
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	3301      	adds	r3, #1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <SystemCoreClockUpdate+0x14c>)
 80016e0:	6013      	str	r3, [r2, #0]
      break;
 80016e2:	e003      	b.n	80016ec <SystemCoreClockUpdate+0x118>

    default:
      SystemCoreClock = msirange;
 80016e4:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <SystemCoreClockUpdate+0x14c>)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	6013      	str	r3, [r2, #0]
      break;
 80016ea:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <SystemCoreClockUpdate+0x144>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	4a0d      	ldr	r2, [pc, #52]	; (800172c <SystemCoreClockUpdate+0x158>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <SystemCoreClockUpdate+0x14c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <SystemCoreClockUpdate+0x14c>)
 8001708:	6013      	str	r3, [r2, #0]
}
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	08008320 	.word	0x08008320
 8001720:	20000000 	.word	0x20000000
 8001724:	00f42400 	.word	0x00f42400
 8001728:	00b71b00 	.word	0x00b71b00
 800172c:	08008308 	.word	0x08008308

08001730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001734:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001736:	e003      	b.n	8001740 <LoopCopyDataInit>

08001738 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800173a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800173c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800173e:	3104      	adds	r1, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001744:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001746:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001748:	d3f6      	bcc.n	8001738 <CopyDataInit>
	ldr	r2, =_sbss
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <LoopForever+0x12>)
	b	LoopFillZerobss
 800174c:	e002      	b.n	8001754 <LoopFillZerobss>

0800174e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800174e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001750:	f842 3b04 	str.w	r3, [r2], #4

08001754 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <LoopForever+0x16>)
	cmp	r2, r3
 8001756:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001758:	d3f9      	bcc.n	800174e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800175a:	f7ff ff29 	bl	80015b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175e:	f006 f8db 	bl	8007918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001762:	f7ff f9a9 	bl	8000ab8 <main>

08001766 <LoopForever>:

LoopForever:
    b LoopForever
 8001766:	e7fe      	b.n	8001766 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001768:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800176c:	080083b0 	.word	0x080083b0
	ldr	r0, =_sdata
 8001770:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001774:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001778:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800177c:	20025a98 	.word	0x20025a98

08001780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC1_2_IRQHandler>

08001782 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800178c:	2004      	movs	r0, #4
 800178e:	f000 f95d 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001792:	f7ff ff1f 	bl	80015d4 <SystemCoreClockUpdate>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f80e 	bl	80017b8 <HAL_InitTick>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	71fb      	strb	r3, [r7, #7]
 80017a6:	e001      	b.n	80017ac <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017a8:	f7ff fd24 	bl	80011f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ac:	79fb      	ldrb	r3, [r7, #7]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_InitTick+0x68>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d022      	beq.n	8001812 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_InitTick+0x6c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_InitTick+0x68>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f966 	bl	8001ab2 <HAL_SYSTICK_Config>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10f      	bne.n	800180c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	d809      	bhi.n	8001806 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f2:	2200      	movs	r2, #0
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	f04f 30ff 	mov.w	r0, #4294967295
 80017fa:	f000 f932 	bl	8001a62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <HAL_InitTick+0x70>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e007      	b.n	8001816 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
 800180a:	e004      	b.n	8001816 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e001      	b.n	8001816 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000008 	.word	0x20000008
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x1c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x20>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4413      	add	r3, r2
 800183a:	4a03      	ldr	r2, [pc, #12]	; (8001848 <HAL_IncTick+0x1c>)
 800183c:	6013      	str	r3, [r2, #0]
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	20025a8c 	.word	0x20025a8c
 800184c:	20000008 	.word	0x20000008

08001850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_GetTick+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20025a8c 	.word	0x20025a8c

08001868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff ffee 	bl	8001850 <HAL_GetTick>
 8001874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001880:	d004      	beq.n	800188c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_Delay+0x40>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4413      	add	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800188c:	bf00      	nop
 800188e:	f7ff ffdf 	bl	8001850 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	429a      	cmp	r2, r3
 800189c:	d8f7      	bhi.n	800188e <HAL_Delay+0x26>
  {
  }
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4907      	ldr	r1, [pc, #28]	; (8001948 <__NVIC_EnableIRQ+0x38>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0152      	lsls	r2, r2, #5
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0152      	lsls	r2, r2, #5
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	bf28      	it	cs
 80019be:	2303      	movcs	r3, #3
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3303      	adds	r3, #3
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b04      	subs	r3, #4
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	2107      	movs	r1, #7
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f7ff ff8e 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff29 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff40 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff90 	bl	80019a0 <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5f 	bl	800194c <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff33 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa4 	bl	8001a08 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e08d      	b.n	8001bfa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_DMA_Init+0x138>)
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d80f      	bhi.n	8001b0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <HAL_DMA_Init+0x13c>)
 8001af2:	4413      	add	r3, r2
 8001af4:	4a45      	ldr	r2, [pc, #276]	; (8001c0c <HAL_DMA_Init+0x140>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	009a      	lsls	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a42      	ldr	r2, [pc, #264]	; (8001c10 <HAL_DMA_Init+0x144>)
 8001b06:	649a      	str	r2, [r3, #72]	; 0x48
 8001b08:	e00e      	b.n	8001b28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <HAL_DMA_Init+0x148>)
 8001b12:	4413      	add	r3, r2
 8001b14:	4a3d      	ldr	r2, [pc, #244]	; (8001c0c <HAL_DMA_Init+0x140>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	009a      	lsls	r2, r3, #2
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a3c      	ldr	r2, [pc, #240]	; (8001c18 <HAL_DMA_Init+0x14c>)
 8001b26:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8001b3e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001b42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 faa4 	bl	80020c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b88:	d102      	bne.n	8001b90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001ba4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d010      	beq.n	8001bd0 <HAL_DMA_Init+0x104>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d80c      	bhi.n	8001bd0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fac4 	bl	8002144 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	e008      	b.n	8001be2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40020407 	.word	0x40020407
 8001c08:	bffdfff8 	.word	0xbffdfff8
 8001c0c:	cccccccd 	.word	0xcccccccd
 8001c10:	40020000 	.word	0x40020000
 8001c14:	bffdfbf8 	.word	0xbffdfbf8
 8001c18:	40020400 	.word	0x40020400

08001c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_DMA_Start_IT+0x20>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e066      	b.n	8001d0a <HAL_DMA_Start_IT+0xee>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d155      	bne.n	8001cfc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f9e9 	bl	800204c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 020e 	orr.w	r2, r2, #14
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e00f      	b.n	8001cb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0204 	bic.w	r2, r2, #4
 8001ca2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 020a 	orr.w	r2, r2, #10
 8001cb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e005      	b.n	8001d08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
 8001d06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d005      	beq.n	8001d36 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	e047      	b.n	8001dc6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 020e 	bic.w	r2, r2, #14
 8001d44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 021c 	and.w	r2, r3, #28
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d72:	2101      	movs	r1, #1
 8001d74:	fa01 f202 	lsl.w	r2, r1, r2
 8001d78:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d82:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00c      	beq.n	8001da6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001da4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
    }
  }
  return status;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dec:	f003 031c 	and.w	r3, r3, #28
 8001df0:	2204      	movs	r2, #4
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d053      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd4>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d04e      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d024      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	f003 021c 	and.w	r2, r3, #28
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	2104      	movs	r1, #4
 8001e22:	fa01 f202 	lsl.w	r2, r1, r2
 8001e26:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80c0 	beq.w	8001fc0 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001e48:	e0ba      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80b6 	beq.w	8001fc0 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001e5c:	e0b0      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d107      	bne.n	8001e7c <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0204 	bic.w	r2, r2, #4
 8001e7a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e80:	f003 021c 	and.w	r2, r3, #28
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e88:	2104      	movs	r1, #4
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 8093 	beq.w	8001fc0 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001ea2:	e08d      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	f003 031c 	and.w	r3, r3, #28
 8001eac:	2202      	movs	r2, #2
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d04e      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x186>
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d049      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d018      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d108      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d06e      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001eee:	e069      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d065      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001f00:	e060      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10b      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 020a 	bic.w	r2, r2, #10
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2c:	f003 021c 	and.w	r2, r3, #28
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f34:	2102      	movs	r1, #2
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d03b      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001f54:	e036      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	f003 031c 	and.w	r3, r3, #28
 8001f5e:	2208      	movs	r2, #8
 8001f60:	409a      	lsls	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d02e      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x1f8>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d029      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 020e 	bic.w	r2, r2, #14
 8001f82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f88:	f003 021c 	and.w	r2, r3, #28
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001fbe:	e002      	b.n	8001fc6 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001fc4:	bf00      	nop
  return;
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
}
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fde:	b2db      	uxtb	r3, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d103      	bne.n	8002008 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	72fb      	strb	r3, [r7, #11]
    return status;
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	e01b      	b.n	8002040 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00d      	beq.n	8002036 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e003      	b.n	8002036 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002034:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	601a      	str	r2, [r3, #0]

  return status;
 800203e:	7afb      	ldrb	r3, [r7, #11]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002062:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002074:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f003 021c 	and.w	r2, r3, #28
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b10      	cmp	r3, #16
 8002098:	d108      	bne.n	80020ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 80020aa:	e007      	b.n	80020bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80020d8:	429a      	cmp	r2, r3
 80020da:	d80a      	bhi.n	80020f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020e8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6513      	str	r3, [r2, #80]	; 0x50
 80020f0:	e007      	b.n	8002102 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	009a      	lsls	r2, r3, #2
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80020fc:	4413      	add	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	3b08      	subs	r3, #8
 800210a:	4a0c      	ldr	r2, [pc, #48]	; (800213c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2201      	movs	r2, #1
 8002122:	409a      	lsls	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40020407 	.word	0x40020407
 8002138:	40020820 	.word	0x40020820
 800213c:	cccccccd 	.word	0xcccccccd
 8002140:	40020880 	.word	0x40020880

08002144 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	461a      	mov	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a08      	ldr	r2, [pc, #32]	; (8002188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002166:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3b01      	subs	r3, #1
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2201      	movs	r2, #1
 8002172:	409a      	lsls	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	1000823f 	.word	0x1000823f
 8002188:	40020940 	.word	0x40020940

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800219a:	e158      	b.n	800244e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 814a 	beq.w	8002448 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d00b      	beq.n	80021d4 <HAL_GPIO_Init+0x48>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d007      	beq.n	80021d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c8:	2b11      	cmp	r3, #17
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b12      	cmp	r3, #18
 80021d2:	d130      	bne.n	8002236 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800220a:	2201      	movs	r2, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	f003 0201 	and.w	r2, r3, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0xea>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b12      	cmp	r3, #18
 8002274:	d123      	bne.n	80022be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	6939      	ldr	r1, [r7, #16]
 80022ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0203 	and.w	r2, r3, #3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80a4 	beq.w	8002448 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002300:	4a5a      	ldr	r2, [pc, #360]	; (800246c <HAL_GPIO_Init+0x2e0>)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3318      	adds	r3, #24
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_GPIO_Init+0x2e4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d025      	beq.n	8002378 <HAL_GPIO_Init+0x1ec>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a51      	ldr	r2, [pc, #324]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d01f      	beq.n	8002374 <HAL_GPIO_Init+0x1e8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a50      	ldr	r2, [pc, #320]	; (8002478 <HAL_GPIO_Init+0x2ec>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d019      	beq.n	8002370 <HAL_GPIO_Init+0x1e4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a4f      	ldr	r2, [pc, #316]	; (800247c <HAL_GPIO_Init+0x2f0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <HAL_GPIO_Init+0x1e0>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a4e      	ldr	r2, [pc, #312]	; (8002480 <HAL_GPIO_Init+0x2f4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00d      	beq.n	8002368 <HAL_GPIO_Init+0x1dc>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a4d      	ldr	r2, [pc, #308]	; (8002484 <HAL_GPIO_Init+0x2f8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d007      	beq.n	8002364 <HAL_GPIO_Init+0x1d8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a4c      	ldr	r2, [pc, #304]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_GPIO_Init+0x1d4>
 800235c:	2306      	movs	r3, #6
 800235e:	e00c      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002360:	2307      	movs	r3, #7
 8002362:	e00a      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002364:	2305      	movs	r3, #5
 8002366:	e008      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002368:	2304      	movs	r3, #4
 800236a:	e006      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 800236c:	2303      	movs	r3, #3
 800236e:	e004      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002370:	2302      	movs	r3, #2
 8002372:	e002      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002378:	2300      	movs	r3, #0
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	f002 0203 	and.w	r2, r2, #3
 8002380:	00d2      	lsls	r2, r2, #3
 8002382:	4093      	lsls	r3, r2
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800238a:	4938      	ldr	r1, [pc, #224]	; (800246c <HAL_GPIO_Init+0x2e0>)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3318      	adds	r3, #24
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_GPIO_Init+0x2e0>)
 800239a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023be:	4a2b      	ldr	r2, [pc, #172]	; (800246c <HAL_GPIO_Init+0x2e0>)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_GPIO_Init+0x2e0>)
 80023c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023ec:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_GPIO_Init+0x2e0>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_GPIO_Init+0x2e0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <HAL_GPIO_Init+0x2e0>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_GPIO_Init+0x2e0>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_GPIO_Init+0x2e0>)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	f47f ae9f 	bne.w	800219c <HAL_GPIO_Init+0x10>
  }
}
 800245e:	bf00      	nop
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	4002f400 	.word	0x4002f400
 8002470:	42020000 	.word	0x42020000
 8002474:	42020400 	.word	0x42020400
 8002478:	42020800 	.word	0x42020800
 800247c:	42020c00 	.word	0x42020c00
 8002480:	42021000 	.word	0x42021000
 8002484:	42021400 	.word	0x42021400
 8002488:	42021800 	.word	0x42021800

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024d4:	887a      	ldrh	r2, [r7, #2]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80024da:	e002      	b.n	80024e2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024dc:	887a      	ldrh	r2, [r7, #2]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e081      	b.n	8002604 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7fe fe91 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2224      	movs	r2, #36	; 0x24
 800251e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800254e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d107      	bne.n	8002568 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	e006      	b.n	8002576 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002574:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d104      	bne.n	8002588 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002586:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	ea42 0103 	orr.w	r1, r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	021a      	lsls	r2, r3, #8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69d9      	ldr	r1, [r3, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1a      	ldr	r2, [r3, #32]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	461a      	mov	r2, r3
 8002618:	460b      	mov	r3, r1
 800261a:	817b      	strh	r3, [r7, #10]
 800261c:	4613      	mov	r3, r2
 800261e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b20      	cmp	r3, #32
 800262a:	f040 80da 	bne.w	80027e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_I2C_Master_Transmit+0x30>
 8002638:	2302      	movs	r3, #2
 800263a:	e0d3      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002644:	f7ff f904 	bl	8001850 <HAL_GetTick>
 8002648:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2319      	movs	r3, #25
 8002650:	2201      	movs	r2, #1
 8002652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 ff07 	bl	800346a <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0be      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2221      	movs	r2, #33	; 0x21
 800266a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2210      	movs	r2, #16
 8002672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	893a      	ldrh	r2, [r7, #8]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	2bff      	cmp	r3, #255	; 0xff
 8002696:	d90e      	bls.n	80026b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	22ff      	movs	r2, #255	; 0xff
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	8979      	ldrh	r1, [r7, #10]
 80026a6:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_I2C_Master_Transmit+0x1e0>)
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f001 f86a 	bl	8003788 <I2C_TransferConfig>
 80026b4:	e06c      	b.n	8002790 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	4b48      	ldr	r3, [pc, #288]	; (80027ec <HAL_I2C_Master_Transmit+0x1e0>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f001 f859 	bl	8003788 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80026d6:	e05b      	b.n	8002790 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	6a39      	ldr	r1, [r7, #32]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 ff04 	bl	80034ea <I2C_WaitOnTXISFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e07b      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d034      	beq.n	8002790 <HAL_I2C_Master_Transmit+0x184>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	d130      	bne.n	8002790 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	2200      	movs	r2, #0
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fe96 	bl	800346a <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e04d      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2bff      	cmp	r3, #255	; 0xff
 8002750:	d90e      	bls.n	8002770 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	22ff      	movs	r2, #255	; 0xff
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	b2da      	uxtb	r2, r3
 800275e:	8979      	ldrh	r1, [r7, #10]
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f001 f80d 	bl	8003788 <I2C_TransferConfig>
 800276e:	e00f      	b.n	8002790 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	b2da      	uxtb	r2, r3
 8002780:	8979      	ldrh	r1, [r7, #10]
 8002782:	2300      	movs	r3, #0
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fffc 	bl	8003788 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d19e      	bne.n	80026d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	6a39      	ldr	r1, [r7, #32]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fee3 	bl	800356a <I2C_WaitOnSTOPFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e01a      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2220      	movs	r2, #32
 80027b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80027c2:	400b      	ands	r3, r1
 80027c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	80002000 	.word	0x80002000
 80027f0:	fe00e800 	.word	0xfe00e800

080027f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	460b      	mov	r3, r1
 8002802:	817b      	strh	r3, [r7, #10]
 8002804:	4613      	mov	r3, r2
 8002806:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b20      	cmp	r3, #32
 8002812:	f040 80db 	bne.w	80029cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_I2C_Master_Receive+0x30>
 8002820:	2302      	movs	r3, #2
 8002822:	e0d4      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800282c:	f7ff f810 	bl	8001850 <HAL_GetTick>
 8002830:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2319      	movs	r3, #25
 8002838:	2201      	movs	r2, #1
 800283a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fe13 	bl	800346a <I2C_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0bf      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2222      	movs	r2, #34	; 0x22
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2210      	movs	r2, #16
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	893a      	ldrh	r2, [r7, #8]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2bff      	cmp	r3, #255	; 0xff
 800287e:	d90e      	bls.n	800289e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	22ff      	movs	r2, #255	; 0xff
 8002884:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	b2da      	uxtb	r2, r3
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	4b52      	ldr	r3, [pc, #328]	; (80029d8 <HAL_I2C_Master_Receive+0x1e4>)
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 ff76 	bl	8003788 <I2C_TransferConfig>
 800289c:	e06d      	b.n	800297a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	8979      	ldrh	r1, [r7, #10]
 80028b0:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <HAL_I2C_Master_Receive+0x1e4>)
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 ff65 	bl	8003788 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80028be:	e05c      	b.n	800297a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	6a39      	ldr	r1, [r7, #32]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fe8d 	bl	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e07c      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d034      	beq.n	800297a <HAL_I2C_Master_Receive+0x186>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d130      	bne.n	800297a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2200      	movs	r2, #0
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fda1 	bl	800346a <I2C_WaitOnFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e04d      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	2bff      	cmp	r3, #255	; 0xff
 800293a:	d90e      	bls.n	800295a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	22ff      	movs	r2, #255	; 0xff
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	b2da      	uxtb	r2, r3
 8002948:	8979      	ldrh	r1, [r7, #10]
 800294a:	2300      	movs	r3, #0
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 ff18 	bl	8003788 <I2C_TransferConfig>
 8002958:	e00f      	b.n	800297a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	b2da      	uxtb	r2, r3
 800296a:	8979      	ldrh	r1, [r7, #10]
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 ff07 	bl	8003788 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d19d      	bne.n	80028c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	6a39      	ldr	r1, [r7, #32]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fdee 	bl	800356a <I2C_WaitOnSTOPFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e01a      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2220      	movs	r2, #32
 800299e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <HAL_I2C_Master_Receive+0x1e8>)
 80029ac:	400b      	ands	r3, r1
 80029ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	80002400 	.word	0x80002400
 80029dc:	fe00e800 	.word	0xfe00e800

080029e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	68f9      	ldr	r1, [r7, #12]
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d010      	beq.n	8002a5a <HAL_I2C_ER_IRQHandler+0x46>
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	09db      	lsrs	r3, r3, #7
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a58:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	0a9b      	lsrs	r3, r3, #10
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d010      	beq.n	8002a88 <HAL_I2C_ER_IRQHandler+0x74>
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	09db      	lsrs	r3, r3, #7
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f043 0208 	orr.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a86:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	0a5b      	lsrs	r3, r3, #9
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_I2C_ER_IRQHandler+0xa2>
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	09db      	lsrs	r3, r3, #7
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	f043 0202 	orr.w	r2, r3, #2
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 030b 	and.w	r3, r3, #11
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002ac6:	68f9      	ldr	r1, [r7, #12]
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fb95 	bl	80031f8 <I2C_ITError>
  }
}
 8002ace:	bf00      	nop
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	70fb      	strb	r3, [r7, #3]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <I2C_Slave_ISR_IT+0x24>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e0ec      	b.n	8002d6c <I2C_Slave_ISR_IT+0x1fe>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <I2C_Slave_ISR_IT+0x4c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002bb2:	6939      	ldr	r1, [r7, #16]
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f9bf 	bl	8002f38 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d04d      	beq.n	8002c62 <I2C_Slave_ISR_IT+0xf4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d047      	beq.n	8002c62 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d128      	bne.n	8002c2e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b28      	cmp	r3, #40	; 0x28
 8002be6:	d108      	bne.n	8002bfa <I2C_Slave_ISR_IT+0x8c>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bee:	d104      	bne.n	8002bfa <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002bf0:	6939      	ldr	r1, [r7, #16]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 faaa 	bl	800314c <I2C_ITListenCplt>
 8002bf8:	e032      	b.n	8002c60 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b29      	cmp	r3, #41	; 0x29
 8002c04:	d10e      	bne.n	8002c24 <I2C_Slave_ISR_IT+0xb6>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c0c:	d00a      	beq.n	8002c24 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2210      	movs	r2, #16
 8002c14:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fbe5 	bl	80033e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f92d 	bl	8002e7c <I2C_ITSlaveSeqCplt>
 8002c22:	e01d      	b.n	8002c60 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002c2c:	e096      	b.n	8002d5c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2210      	movs	r2, #16
 8002c34:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f043 0204 	orr.w	r2, r3, #4
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <I2C_Slave_ISR_IT+0xe4>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c4e:	f040 8085 	bne.w	8002d5c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4619      	mov	r1, r3
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 facd 	bl	80031f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002c5e:	e07d      	b.n	8002d5c <I2C_Slave_ISR_IT+0x1ee>
 8002c60:	e07c      	b.n	8002d5c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d030      	beq.n	8002cd0 <I2C_Slave_ISR_IT+0x162>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d02a      	beq.n	8002cd0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d018      	beq.n	8002cb6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d14f      	bne.n	8002d60 <I2C_Slave_ISR_IT+0x1f2>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc6:	d04b      	beq.n	8002d60 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f8d7 	bl	8002e7c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002cce:	e047      	b.n	8002d60 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	08db      	lsrs	r3, r3, #3
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <I2C_Slave_ISR_IT+0x184>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	08db      	lsrs	r3, r3, #3
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ce8:	6939      	ldr	r1, [r7, #16]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f842 	bl	8002d74 <I2C_ITAddrCplt>
 8002cf0:	e037      	b.n	8002d62 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d031      	beq.n	8002d62 <I2C_Slave_ISR_IT+0x1f4>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d02b      	beq.n	8002d62 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d018      	beq.n	8002d46 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	851a      	strh	r2, [r3, #40]	; 0x28
 8002d44:	e00d      	b.n	8002d62 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d4c:	d002      	beq.n	8002d54 <I2C_Slave_ISR_IT+0x1e6>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d106      	bne.n	8002d62 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f891 	bl	8002e7c <I2C_ITSlaveSeqCplt>
 8002d5a:	e002      	b.n	8002d62 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002d5c:	bf00      	nop
 8002d5e:	e000      	b.n	8002d62 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002d60:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d8a:	2b28      	cmp	r3, #40	; 0x28
 8002d8c:	d16a      	bne.n	8002e64 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002dac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002dc8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d138      	bne.n	8002e44 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	09db      	lsrs	r3, r3, #7
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	89bb      	ldrh	r3, [r7, #12]
 8002dda:	4053      	eors	r3, r2
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f003 0306 	and.w	r3, r3, #6
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11c      	bne.n	8002e20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d13b      	bne.n	8002e74 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2208      	movs	r2, #8
 8002e08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e12:	89ba      	ldrh	r2, [r7, #12]
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fe70 	bl	8002afe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e1e:	e029      	b.n	8002e74 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002e20:	893b      	ldrh	r3, [r7, #8]
 8002e22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fcdb 	bl	80037e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e36:	89ba      	ldrh	r2, [r7, #12]
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff fe5e 	bl	8002afe <HAL_I2C_AddrCallback>
}
 8002e42:	e017      	b.n	8002e74 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fccb 	bl	80037e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e56:	89ba      	ldrh	r2, [r7, #12]
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fe4e 	bl	8002afe <HAL_I2C_AddrCallback>
}
 8002e62:	e007      	b.n	8002e74 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2208      	movs	r2, #8
 8002e6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	0b9b      	lsrs	r3, r3, #14
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e00d      	b.n	8002ece <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0bdb      	lsrs	r3, r3, #15
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ecc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b29      	cmp	r3, #41	; 0x29
 8002ed8:	d112      	bne.n	8002f00 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2228      	movs	r2, #40	; 0x28
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2221      	movs	r2, #33	; 0x21
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ee8:	2101      	movs	r1, #1
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fc7a 	bl	80037e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff fdec 	bl	8002ad6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002efe:	e017      	b.n	8002f30 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b2a      	cmp	r3, #42	; 0x2a
 8002f0a:	d111      	bne.n	8002f30 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2228      	movs	r2, #40	; 0x28
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2222      	movs	r2, #34	; 0x22
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fc61 	bl	80037e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fddd 	bl	8002aea <HAL_I2C_SlaveRxCpltCallback>
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f54:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b21      	cmp	r3, #33	; 0x21
 8002f62:	d002      	beq.n	8002f6a <I2C_ITSlaveCplt+0x32>
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b29      	cmp	r3, #41	; 0x29
 8002f68:	d108      	bne.n	8002f7c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002f6a:	f248 0101 	movw	r1, #32769	; 0x8001
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fc38 	bl	80037e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2221      	movs	r2, #33	; 0x21
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
 8002f7a:	e00d      	b.n	8002f98 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b22      	cmp	r3, #34	; 0x22
 8002f80:	d002      	beq.n	8002f88 <I2C_ITSlaveCplt+0x50>
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b2a      	cmp	r3, #42	; 0x2a
 8002f86:	d107      	bne.n	8002f98 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002f88:	f248 0102 	movw	r1, #32770	; 0x8002
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fc29 	bl	80037e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2222      	movs	r2, #34	; 0x22
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b64      	ldr	r3, [pc, #400]	; (8003144 <I2C_ITSlaveCplt+0x20c>)
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fa14 	bl	80033e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	0b9b      	lsrs	r3, r3, #14
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d013      	beq.n	8002ff2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fd8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d020      	beq.n	8003024 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ff0:	e018      	b.n	8003024 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	0bdb      	lsrs	r3, r3, #15
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d012      	beq.n	8003024 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800300c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 0304 	bic.w	r3, r3, #4
 8003036:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00c      	beq.n	8003072 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f043 0204 	orr.w	r2, r3, #4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	2b00      	cmp	r3, #0
 800309c:	d010      	beq.n	80030c0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	4619      	mov	r1, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8a7 	bl	80031f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b28      	cmp	r3, #40	; 0x28
 80030b4:	d141      	bne.n	800313a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80030b6:	6979      	ldr	r1, [r7, #20]
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f847 	bl	800314c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030be:	e03c      	b.n	800313a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030c8:	d014      	beq.n	80030f4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fed6 	bl	8002e7c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <I2C_ITSlaveCplt+0x210>)
 80030d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff fd14 	bl	8002b1a <HAL_I2C_ListenCpltCallback>
}
 80030f2:	e022      	b.n	800313a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b22      	cmp	r3, #34	; 0x22
 80030fe:	d10e      	bne.n	800311e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fce7 	bl	8002aea <HAL_I2C_SlaveRxCpltCallback>
}
 800311c:	e00d      	b.n	800313a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff fcce 	bl	8002ad6 <HAL_I2C_SlaveTxCpltCallback>
}
 800313a:	bf00      	nop
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	fe00e800 	.word	0xfe00e800
 8003148:	ffff0000 	.word	0xffff0000

0800314c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <I2C_ITListenCplt+0xa8>)
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d022      	beq.n	80031ca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f043 0204 	orr.w	r2, r3, #4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031ca:	f248 0103 	movw	r1, #32771	; 0x8003
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fb08 	bl	80037e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2210      	movs	r2, #16
 80031da:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fc98 	bl	8002b1a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	ffff0000 	.word	0xffff0000

080031f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a5d      	ldr	r2, [pc, #372]	; (800338c <I2C_ITError+0x194>)
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b28      	cmp	r3, #40	; 0x28
 800322e:	d005      	beq.n	800323c <I2C_ITError+0x44>
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b29      	cmp	r3, #41	; 0x29
 8003234:	d002      	beq.n	800323c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b2a      	cmp	r3, #42	; 0x2a
 800323a:	d10b      	bne.n	8003254 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800323c:	2103      	movs	r1, #3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fad0 	bl	80037e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2228      	movs	r2, #40	; 0x28
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a50      	ldr	r2, [pc, #320]	; (8003390 <I2C_ITError+0x198>)
 8003250:	635a      	str	r2, [r3, #52]	; 0x34
 8003252:	e011      	b.n	8003278 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003254:	f248 0103 	movw	r1, #32771	; 0x8003
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fac3 	bl	80037e4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b60      	cmp	r3, #96	; 0x60
 8003268:	d003      	beq.n	8003272 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	2b00      	cmp	r3, #0
 8003284:	d039      	beq.n	80032fa <I2C_ITError+0x102>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b11      	cmp	r3, #17
 800328a:	d002      	beq.n	8003292 <I2C_ITError+0x9a>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b21      	cmp	r3, #33	; 0x21
 8003290:	d133      	bne.n	80032fa <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032a0:	d107      	bne.n	80032b2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fe8a 	bl	8001fd0 <HAL_DMA_GetState>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d017      	beq.n	80032f2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	4a33      	ldr	r2, [pc, #204]	; (8003394 <I2C_ITError+0x19c>)
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fd1b 	bl	8001d12 <HAL_DMA_Abort_IT>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d04d      	beq.n	800337e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032ec:	4610      	mov	r0, r2
 80032ee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032f0:	e045      	b.n	800337e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f850 	bl	8003398 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032f8:	e041      	b.n	800337e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d039      	beq.n	8003376 <I2C_ITError+0x17e>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b12      	cmp	r3, #18
 8003306:	d002      	beq.n	800330e <I2C_ITError+0x116>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b22      	cmp	r3, #34	; 0x22
 800330c:	d133      	bne.n	8003376 <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331c:	d107      	bne.n	800332e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800332c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fe4c 	bl	8001fd0 <HAL_DMA_GetState>
 8003338:	4603      	mov	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d017      	beq.n	800336e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <I2C_ITError+0x19c>)
 8003344:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fcdd 	bl	8001d12 <HAL_DMA_Abort_IT>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d011      	beq.n	8003382 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003368:	4610      	mov	r0, r2
 800336a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800336c:	e009      	b.n	8003382 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f812 	bl	8003398 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003374:	e005      	b.n	8003382 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f80e 	bl	8003398 <I2C_TreatErrorCallback>
  }
}
 800337c:	e002      	b.n	8003384 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003382:	bf00      	nop
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	ffff0000 	.word	0xffff0000
 8003390:	08002b6f 	.word	0x08002b6f
 8003394:	0800342f 	.word	0x0800342f

08003398 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b60      	cmp	r3, #96	; 0x60
 80033aa:	d10e      	bne.n	80033ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fbbd 	bl	8002b42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033c8:	e009      	b.n	80033de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fba8 	bl	8002b2e <HAL_I2C_ErrorCallback>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d103      	bne.n	8003404 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2200      	movs	r2, #0
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b01      	cmp	r3, #1
 8003410:	d007      	beq.n	8003422 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	619a      	str	r2, [r3, #24]
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	2200      	movs	r2, #0
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  if (hi2c->hdmarx != NULL)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	2200      	movs	r2, #0
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  I2C_TreatErrorCallback(hi2c);
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f7ff ff9b 	bl	8003398 <I2C_TreatErrorCallback>
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800347a:	e022      	b.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d01e      	beq.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003484:	f7fe f9e4 	bl	8001850 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d302      	bcc.n	800349a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d113      	bne.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e00f      	b.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699a      	ldr	r2, [r3, #24]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4013      	ands	r3, r2
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d0cd      	beq.n	800347c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f6:	e02c      	b.n	8003552 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f8dd 	bl	80036bc <I2C_IsAcknowledgeFailed>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e02a      	b.n	8003562 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d01e      	beq.n	8003552 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003514:	f7fe f99c 	bl	8001850 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	429a      	cmp	r2, r3
 8003522:	d302      	bcc.n	800352a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d113      	bne.n	8003552 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f043 0220 	orr.w	r2, r3, #32
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e007      	b.n	8003562 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b02      	cmp	r3, #2
 800355e:	d1cb      	bne.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003576:	e028      	b.n	80035ca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f89d 	bl	80036bc <I2C_IsAcknowledgeFailed>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e026      	b.n	80035da <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358c:	f7fe f960 	bl	8001850 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	429a      	cmp	r2, r3
 800359a:	d302      	bcc.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d113      	bne.n	80035ca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f043 0220 	orr.w	r2, r3, #32
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e007      	b.n	80035da <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d1cf      	bne.n	8003578 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035f0:	e055      	b.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f860 	bl	80036bc <I2C_IsAcknowledgeFailed>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e053      	b.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b20      	cmp	r3, #32
 8003612:	d129      	bne.n	8003668 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b04      	cmp	r3, #4
 8003620:	d105      	bne.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e03f      	b.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2220      	movs	r2, #32
 8003634:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003642:	400b      	ands	r3, r1
 8003644:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e022      	b.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003668:	f7fe f8f2 	bl	8001850 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	429a      	cmp	r2, r3
 8003676:	d302      	bcc.n	800367e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10f      	bne.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e007      	b.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d1a2      	bne.n	80035f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	fe00e800 	.word	0xfe00e800

080036bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d151      	bne.n	800377a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d6:	e022      	b.n	800371e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d01e      	beq.n	800371e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e0:	f7fe f8b6 	bl	8001850 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <I2C_IsAcknowledgeFailed+0x3a>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d113      	bne.n	800371e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f043 0220 	orr.w	r2, r3, #32
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e02e      	b.n	800377c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b20      	cmp	r3, #32
 800372a:	d1d5      	bne.n	80036d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2210      	movs	r2, #16
 8003732:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2220      	movs	r2, #32
 800373a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff fe52 	bl	80033e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <I2C_IsAcknowledgeFailed+0xc8>)
 800374e:	400b      	ands	r3, r1
 8003750:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	fe00e800 	.word	0xfe00e800

08003788 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	817b      	strh	r3, [r7, #10]
 8003796:	4613      	mov	r3, r2
 8003798:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	0d5b      	lsrs	r3, r3, #21
 80037a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <I2C_TransferConfig+0x58>)
 80037aa:	430b      	orrs	r3, r1
 80037ac:	43db      	mvns	r3, r3
 80037ae:	ea02 0103 	and.w	r1, r2, r3
 80037b2:	897b      	ldrh	r3, [r7, #10]
 80037b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037b8:	7a7b      	ldrb	r3, [r7, #9]
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	03ff63ff 	.word	0x03ff63ff

080037e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80037f4:	887b      	ldrh	r3, [r7, #2]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003804:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003812:	2b28      	cmp	r3, #40	; 0x28
 8003814:	d003      	beq.n	800381e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800381c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00f      	beq.n	8003848 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800382e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800383c:	2b28      	cmp	r3, #40	; 0x28
 800383e:	d003      	beq.n	8003848 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003846:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003848:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800384c:	2b00      	cmp	r3, #0
 800384e:	da03      	bge.n	8003858 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003856:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003858:	887b      	ldrh	r3, [r7, #2]
 800385a:	2b10      	cmp	r3, #16
 800385c:	d103      	bne.n	8003866 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003864:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003866:	887b      	ldrh	r3, [r7, #2]
 8003868:	2b20      	cmp	r3, #32
 800386a:	d103      	bne.n	8003874 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f043 0320 	orr.w	r3, r3, #32
 8003872:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003874:	887b      	ldrh	r3, [r7, #2]
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d103      	bne.n	8003882 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003880:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6819      	ldr	r1, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	43da      	mvns	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	400a      	ands	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d138      	bne.n	8003928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e032      	b.n	800392a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	e000      	b.n	800392a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003928:	2302      	movs	r3, #2
  }
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b20      	cmp	r3, #32
 800394a:	d139      	bne.n	80039c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003956:	2302      	movs	r3, #2
 8003958:	e033      	b.n	80039c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2224      	movs	r2, #36	; 0x24
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003988:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40007000 	.word	0x40007000

080039ec <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80039f4:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039fc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80039fe:	f000 f871 	bl	8003ae4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a08:	d101      	bne.n	8003a0e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e03e      	b.n	8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003a0e:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1a:	d101      	bne.n	8003a20 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e035      	b.n	8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d101      	bne.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e02f      	b.n	8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003a34:	4917      	ldr	r1, [pc, #92]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003a3c:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	09db      	lsrs	r3, r3, #7
 8003a4a:	2232      	movs	r2, #50	; 0x32
 8003a4c:	fb02 f303 	mul.w	r3, r2, r3
 8003a50:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	08db      	lsrs	r3, r3, #3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a5c:	e002      	b.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d102      	bne.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f2      	bne.n	8003a5e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a84:	d101      	bne.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e000      	b.n	8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40007000 	.word	0x40007000
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003aa0:	cccccccd 	.word	0xcccccccd

08003aa4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ab2:	6053      	str	r3, [r2, #4]
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40007000 	.word	0x40007000

08003ac4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @brief Disable dead battery behavior.
  * @note  This feature is secured by secured UCPD1 when system implements security (TZEN=1).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* Disable dead battery behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad2:	6093      	str	r3, [r2, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40007000 	.word	0x40007000

08003ae4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003aea:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	e00a      	b.n	8003b18 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	e001      	b.n	8003b18 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003b14:	2300      	movs	r3, #0
 8003b16:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003b18:	687b      	ldr	r3, [r7, #4]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40007000 	.word	0x40007000

08003b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f000 bc5c 	b.w	80043f8 <HAL_RCC_OscConfig+0x8cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b40:	4ba4      	ldr	r3, [pc, #656]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b4a:	4ba2      	ldr	r3, [pc, #648]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80e2 	beq.w	8003d26 <HAL_RCC_OscConfig+0x1fa>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <HAL_RCC_OscConfig+0x4c>
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b0c      	cmp	r3, #12
 8003b6c:	f040 8089 	bne.w	8003c82 <HAL_RCC_OscConfig+0x156>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	f040 8085 	bne.w	8003c82 <HAL_RCC_OscConfig+0x156>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b78:	4b96      	ldr	r3, [pc, #600]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d006      	beq.n	8003b92 <HAL_RCC_OscConfig+0x66>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f000 bc33 	b.w	80043f8 <HAL_RCC_OscConfig+0x8cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b96:	4b8f      	ldr	r3, [pc, #572]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_RCC_OscConfig+0x80>
 8003ba2:	4b8c      	ldr	r3, [pc, #560]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003baa:	e005      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8c>
 8003bac:	4b89      	ldr	r3, [pc, #548]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d224      	bcs.n	8003c06 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fe15 	bl	80047f0 <RCC_SetFlashLatencyFromMSIRange>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f000 bc13 	b.w	80043f8 <HAL_RCC_OscConfig+0x8cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bd2:	4b80      	ldr	r3, [pc, #512]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a7f      	ldr	r2, [pc, #508]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003bd8:	f043 0308 	orr.w	r3, r3, #8
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b7d      	ldr	r3, [pc, #500]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	497a      	ldr	r1, [pc, #488]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bf0:	4b78      	ldr	r3, [pc, #480]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	4975      	ldr	r1, [pc, #468]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
 8003c04:	e025      	b.n	8003c52 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c06:	4b73      	ldr	r3, [pc, #460]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003c0c:	f043 0308 	orr.w	r3, r3, #8
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b70      	ldr	r3, [pc, #448]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	496d      	ldr	r1, [pc, #436]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c24:	4b6b      	ldr	r3, [pc, #428]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	4968      	ldr	r1, [pc, #416]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_CFGR_SWS_MSI)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fdd4 	bl	80047f0 <RCC_SetFlashLatencyFromMSIRange>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e3d2      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c52:	f000 fcff 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8003c56:	4601      	mov	r1, r0
 8003c58:	4b5e      	ldr	r3, [pc, #376]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	4a5d      	ldr	r2, [pc, #372]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	5cd3      	ldrb	r3, [r2, r3]
 8003c66:	fa21 f303 	lsr.w	r3, r1, r3
 8003c6a:	4a5c      	ldr	r2, [pc, #368]	; (8003ddc <HAL_RCC_OscConfig+0x2b0>)
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(TICK_INT_PRIORITY);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f7fd fda2 	bl	80017b8 <HAL_InitTick>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d052      	beq.n	8003d24 <HAL_RCC_OscConfig+0x1f8>
        {
          return status;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	e3ba      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d032      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x1c4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c8a:	4b52      	ldr	r3, [pc, #328]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a51      	ldr	r2, [pc, #324]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c96:	f7fd fddb 	bl	8001850 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c9e:	f7fd fdd7 	bl	8001850 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x184>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e3a3      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cb0:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x172>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cbc:	4b45      	ldr	r3, [pc, #276]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a44      	ldr	r2, [pc, #272]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003cc2:	f043 0308 	orr.w	r3, r3, #8
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b42      	ldr	r3, [pc, #264]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	493f      	ldr	r1, [pc, #252]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cda:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	493a      	ldr	r1, [pc, #232]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]
 8003cee:	e01a      	b.n	8003d26 <HAL_RCC_OscConfig+0x1fa>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cf0:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a37      	ldr	r2, [pc, #220]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cfc:	f7fd fda8 	bl	8001850 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x1ea>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d04:	f7fd fda4 	bl	8001850 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x1ea>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e370      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d16:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x1d8>
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x1fa>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d072      	beq.n	8003e18 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d005      	beq.n	8003d44 <HAL_RCC_OscConfig+0x218>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b0c      	cmp	r3, #12
 8003d3c:	d10e      	bne.n	8003d5c <HAL_RCC_OscConfig+0x230>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d10b      	bne.n	8003d5c <HAL_RCC_OscConfig+0x230>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d44:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d062      	beq.n	8003e16 <HAL_RCC_OscConfig+0x2ea>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d15e      	bne.n	8003e16 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e34d      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d64:	d106      	bne.n	8003d74 <HAL_RCC_OscConfig+0x248>
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e01d      	b.n	8003db0 <HAL_RCC_OscConfig+0x284>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x26c>
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_OscConfig+0x284>
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a0d      	ldr	r2, [pc, #52]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <HAL_RCC_OscConfig+0x2a8>)
 8003daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01a      	beq.n	8003dee <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fd fd4a 	bl	8001850 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dbe:	e00f      	b.n	8003de0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc0:	f7fd fd46 	bl	8001850 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d908      	bls.n	8003de0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e312      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	08008308 	.word	0x08008308
 8003ddc:	20000000 	.word	0x20000000
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de0:	4baa      	ldr	r3, [pc, #680]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0e9      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x294>
 8003dec:	e014      	b.n	8003e18 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dee:	f7fd fd2f 	bl	8001850 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x2dc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df6:	f7fd fd2b 	bl	8001850 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b64      	cmp	r3, #100	; 0x64
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e2f7      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e08:	4ba0      	ldr	r3, [pc, #640]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f0      	bne.n	8003df6 <HAL_RCC_OscConfig+0x2ca>
 8003e14:	e000      	b.n	8003e18 <HAL_RCC_OscConfig+0x2ec>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e16:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d060      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d005      	beq.n	8003e36 <HAL_RCC_OscConfig+0x30a>
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d119      	bne.n	8003e64 <HAL_RCC_OscConfig+0x338>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d116      	bne.n	8003e64 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e36:	4b95      	ldr	r3, [pc, #596]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x322>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e2d4      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b8f      	ldr	r3, [pc, #572]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	061b      	lsls	r3, r3, #24
 8003e5c:	498b      	ldr	r1, [pc, #556]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e62:	e040      	b.n	8003ee6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d023      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e6c:	4b87      	ldr	r3, [pc, #540]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a86      	ldr	r2, [pc, #536]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fd fcea 	bl	8001850 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x366>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e80:	f7fd fce6 	bl	8001850 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e2b2      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e92:	4b7e      	ldr	r3, [pc, #504]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9e:	4b7b      	ldr	r3, [pc, #492]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	4977      	ldr	r1, [pc, #476]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
 8003eb2:	e018      	b.n	8003ee6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb4:	4b75      	ldr	r3, [pc, #468]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a74      	ldr	r2, [pc, #464]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fcc6 	bl	8001850 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fcc2 	bl	8001850 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e28e      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eda:	4b6c      	ldr	r3, [pc, #432]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d051      	beq.n	8003f96 <HAL_RCC_OscConfig+0x46a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d031      	beq.n	8003f5e <HAL_RCC_OscConfig+0x432>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d108      	bne.n	8003f14 <HAL_RCC_OscConfig+0x3e8>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003f02:	4b62      	ldr	r3, [pc, #392]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f08:	4a60      	ldr	r2, [pc, #384]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003f0a:	f023 0310 	bic.w	r3, r3, #16
 8003f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003f12:	e007      	b.n	8003f24 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003f14:	4b5d      	ldr	r3, [pc, #372]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1a:	4a5c      	ldr	r2, [pc, #368]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003f1c:	f043 0310 	orr.w	r3, r3, #16
 8003f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f24:	4b59      	ldr	r3, [pc, #356]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2a:	4a58      	ldr	r2, [pc, #352]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fd fc8c 	bl	8001850 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x422>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7fd fc88 	bl	8001850 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b07      	cmp	r3, #7
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x422>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e254      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f4e:	4b4f      	ldr	r3, [pc, #316]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ef      	beq.n	8003f3c <HAL_RCC_OscConfig+0x410>
 8003f5c:	e01b      	b.n	8003f96 <HAL_RCC_OscConfig+0x46a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5e:	4b4b      	ldr	r3, [pc, #300]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f64:	4a49      	ldr	r2, [pc, #292]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6e:	f7fd fc6f 	bl	8001850 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x45c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f76:	f7fd fc6b 	bl	8001850 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b07      	cmp	r3, #7
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e237      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f88:	4b40      	ldr	r3, [pc, #256]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1ef      	bne.n	8003f76 <HAL_RCC_OscConfig+0x44a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8109 	beq.w	80041b6 <HAL_RCC_OscConfig+0x68a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fa8:	4b38      	ldr	r3, [pc, #224]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10d      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4a4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	4a34      	ldr	r2, [pc, #208]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc0:	4b32      	ldr	r3, [pc, #200]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd0:	4b2f      	ldr	r3, [pc, #188]	; (8004090 <HAL_RCC_OscConfig+0x564>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d118      	bne.n	800400e <HAL_RCC_OscConfig+0x4e2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fdc:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <HAL_RCC_OscConfig+0x564>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a2b      	ldr	r2, [pc, #172]	; (8004090 <HAL_RCC_OscConfig+0x564>)
 8003fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe8:	f7fd fc32 	bl	8001850 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x4d6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff0:	f7fd fc2e 	bl	8001850 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x4d6>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1fa      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_RCC_OscConfig+0x564>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x4c4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01f      	beq.n	800405a <HAL_RCC_OscConfig+0x52e>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <HAL_RCC_OscConfig+0x51c>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004026:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_RCC_OscConfig+0x560>)
 800402e:	f043 0304 	orr.w	r3, r3, #4
 8004032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004036:	4b15      	ldr	r3, [pc, #84]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	4a13      	ldr	r2, [pc, #76]	; (800408c <HAL_RCC_OscConfig+0x560>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004046:	e018      	b.n	800407a <HAL_RCC_OscConfig+0x54e>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_RCC_OscConfig+0x560>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	4a0f      	ldr	r2, [pc, #60]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004058:	e00f      	b.n	800407a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <HAL_RCC_OscConfig+0x560>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	4a0a      	ldr	r2, [pc, #40]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <HAL_RCC_OscConfig+0x560>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	4a06      	ldr	r2, [pc, #24]	; (800408c <HAL_RCC_OscConfig+0x560>)
 8004072:	f023 0304 	bic.w	r3, r3, #4
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d058      	beq.n	8004134 <HAL_RCC_OscConfig+0x608>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fd fbe5 	bl	8001850 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004088:	e00f      	b.n	80040aa <HAL_RCC_OscConfig+0x57e>
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
 8004090:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fd fbdc 	bl	8001850 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e1a6      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040aa:	4bb1      	ldr	r3, [pc, #708]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0ed      	beq.n	8004094 <HAL_RCC_OscConfig+0x568>
        }
      }

      /* Enable LSESYS additionnally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01b      	beq.n	80040fc <HAL_RCC_OscConfig+0x5d0>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040c4:	4baa      	ldr	r3, [pc, #680]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	4aa9      	ldr	r2, [pc, #676]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80040cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x5c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fd fbbb 	bl	8001850 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e185      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80040ec:	4ba0      	ldr	r3, [pc, #640]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0ed      	beq.n	80040d6 <HAL_RCC_OscConfig+0x5aa>
 80040fa:	e053      	b.n	80041a4 <HAL_RCC_OscConfig+0x678>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040fc:	4b9c      	ldr	r3, [pc, #624]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	4a9b      	ldr	r2, [pc, #620]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x5f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fd fb9f 	bl	8001850 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x5f8>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e169      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004124:	4b92      	ldr	r3, [pc, #584]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ed      	bne.n	800410e <HAL_RCC_OscConfig+0x5e2>
 8004132:	e037      	b.n	80041a4 <HAL_RCC_OscConfig+0x678>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fd fb8c 	bl	8001850 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x626>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fd fb88 	bl	8001850 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x626>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e152      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004152:	4b87      	ldr	r3, [pc, #540]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ed      	bne.n	800413c <HAL_RCC_OscConfig+0x610>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004160:	4b83      	ldr	r3, [pc, #524]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01a      	beq.n	80041a4 <HAL_RCC_OscConfig+0x678>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800416e:	4b80      	ldr	r3, [pc, #512]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004174:	4a7e      	ldr	r2, [pc, #504]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_OscConfig+0x66a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004180:	f7fd fb66 	bl	8001850 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x66a>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e130      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004196:	4b76      	ldr	r3, [pc, #472]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ed      	bne.n	8004180 <HAL_RCC_OscConfig+0x654>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d105      	bne.n	80041b6 <HAL_RCC_OscConfig+0x68a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041aa:	4b71      	ldr	r3, [pc, #452]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	4a70      	ldr	r2, [pc, #448]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80041b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d03c      	beq.n	800423c <HAL_RCC_OscConfig+0x710>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01c      	beq.n	8004204 <HAL_RCC_OscConfig+0x6d8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041ca:	4b69      	ldr	r3, [pc, #420]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80041cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041d0:	4a67      	ldr	r2, [pc, #412]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041da:	f7fd fb39 	bl	8001850 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x6c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041e2:	f7fd fb35 	bl	8001850 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x6c8>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e101      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041f4:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80041f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0ef      	beq.n	80041e2 <HAL_RCC_OscConfig+0x6b6>
 8004202:	e01b      	b.n	800423c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004204:	4b5a      	ldr	r3, [pc, #360]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800420a:	4a59      	ldr	r2, [pc, #356]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fd fb1c 	bl	8001850 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x702>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800421c:	f7fd fb18 	bl	8001850 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x702>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e0e4      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800422e:	4b50      	ldr	r3, [pc, #320]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ef      	bne.n	800421c <HAL_RCC_OscConfig+0x6f0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80d8 	beq.w	80043f6 <HAL_RCC_OscConfig+0x8ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004246:	4b4a      	ldr	r3, [pc, #296]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b0c      	cmp	r3, #12
 8004250:	f000 8092 	beq.w	8004378 <HAL_RCC_OscConfig+0x84c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	2b02      	cmp	r3, #2
 800425a:	d15a      	bne.n	8004312 <HAL_RCC_OscConfig+0x7e6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b44      	ldr	r3, [pc, #272]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a43      	ldr	r2, [pc, #268]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd faf2 	bl	8001850 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x756>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fd faee 	bl	8001850 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x756>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e0ba      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004282:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x744>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428e:	4b38      	ldr	r3, [pc, #224]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	4b38      	ldr	r3, [pc, #224]	; (8004374 <HAL_RCC_OscConfig+0x848>)
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800429e:	3a01      	subs	r2, #1
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	4311      	orrs	r1, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042a8:	0212      	lsls	r2, r2, #8
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042b0:	0852      	lsrs	r2, r2, #1
 80042b2:	3a01      	subs	r2, #1
 80042b4:	0552      	lsls	r2, r2, #21
 80042b6:	4311      	orrs	r1, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042bc:	0852      	lsrs	r2, r2, #1
 80042be:	3a01      	subs	r2, #1
 80042c0:	0652      	lsls	r2, r2, #25
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042c8:	06d2      	lsls	r2, r2, #27
 80042ca:	430a      	orrs	r2, r1
 80042cc:	4928      	ldr	r1, [pc, #160]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d2:	4b27      	ldr	r3, [pc, #156]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a26      	ldr	r2, [pc, #152]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80042d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042dc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4a23      	ldr	r2, [pc, #140]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 80042e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fd fab1 	bl	8001850 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x7d8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f2:	f7fd faad 	bl	8001850 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x7d8>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e079      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004304:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x7c6>
 8004310:	e071      	b.n	80043f6 <HAL_RCC_OscConfig+0x8ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a16      	ldr	r2, [pc, #88]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800431c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800431e:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d105      	bne.n	8004336 <HAL_RCC_OscConfig+0x80a>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	4a10      	ldr	r2, [pc, #64]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004330:	f023 0303 	bic.w	r3, r3, #3
 8004334:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 800433c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004344:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7fd fa83 	bl	8001850 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434e:	f7fd fa7f 	bl	8001850 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x834>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e04b      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <HAL_RCC_OscConfig+0x844>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f0      	bne.n	800434e <HAL_RCC_OscConfig+0x822>
 800436c:	e043      	b.n	80043f6 <HAL_RCC_OscConfig+0x8ca>
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
 8004374:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_RCC_OscConfig+0x858>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e039      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004384:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_RCC_OscConfig+0x8d4>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f003 0203 	and.w	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	429a      	cmp	r2, r3
 8004396:	d12c      	bne.n	80043f2 <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	3b01      	subs	r3, #1
 80043a4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d123      	bne.n	80043f2 <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d11b      	bne.n	80043f2 <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d113      	bne.n	80043f2 <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d109      	bne.n	80043f2 <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	3b01      	subs	r3, #1
 80043ec:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_OscConfig+0x8ca>
        {
          return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_RCC_OscConfig+0x8cc>
        }
      }
    }
  }

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000

08004404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e10d      	b.n	8004638 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800441c:	4b88      	ldr	r3, [pc, #544]	; (8004640 <HAL_RCC_ClockConfig+0x23c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d910      	bls.n	800444c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b85      	ldr	r3, [pc, #532]	; (8004640 <HAL_RCC_ClockConfig+0x23c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 020f 	bic.w	r2, r3, #15
 8004432:	4983      	ldr	r1, [pc, #524]	; (8004640 <HAL_RCC_ClockConfig+0x23c>)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	4313      	orrs	r3, r2
 8004438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443a:	4b81      	ldr	r3, [pc, #516]	; (8004640 <HAL_RCC_ClockConfig+0x23c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d001      	beq.n	800444c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0f5      	b.n	8004638 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 808b 	beq.w	8004570 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d134      	bne.n	80044cc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004462:	4b78      	ldr	r3, [pc, #480]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e0e2      	b.n	8004638 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004472:	f000 fa21 	bl	80048b8 <RCC_GetSysClockFreqFromPLLSource>
 8004476:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4a73      	ldr	r2, [pc, #460]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d956      	bls.n	800452e <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004480:	4b70      	ldr	r3, [pc, #448]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800448c:	4b6d      	ldr	r3, [pc, #436]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004494:	4a6b      	ldr	r2, [pc, #428]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	e045      	b.n	800452e <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d03f      	beq.n	800452e <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d13b      	bne.n	800452e <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044b6:	4b63      	ldr	r3, [pc, #396]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044be:	4a61      	ldr	r2, [pc, #388]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 80044c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e030      	b.n	800452e <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d4:	4b5b      	ldr	r3, [pc, #364]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d115      	bne.n	800450c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0a9      	b.n	8004638 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ec:	4b55      	ldr	r3, [pc, #340]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e09d      	b.n	8004638 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044fc:	4b51      	ldr	r3, [pc, #324]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e095      	b.n	8004638 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800450c:	f000 f8a2 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004510:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4a4c      	ldr	r2, [pc, #304]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d909      	bls.n	800452e <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800451a:	4b4a      	ldr	r3, [pc, #296]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004522:	4a48      	ldr	r2, [pc, #288]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004528:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800452e:	4b45      	ldr	r3, [pc, #276]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 0203 	bic.w	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4942      	ldr	r1, [pc, #264]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 800453c:	4313      	orrs	r3, r2
 800453e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004540:	f7fd f986 	bl	8001850 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	e00a      	b.n	800455e <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004548:	f7fd f982 	bl	8001850 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e06c      	b.n	8004638 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	4b39      	ldr	r3, [pc, #228]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 020c 	and.w	r2, r3, #12
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	429a      	cmp	r2, r3
 800456e:	d1eb      	bne.n	8004548 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457c:	4b31      	ldr	r3, [pc, #196]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	492e      	ldr	r1, [pc, #184]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
 800458e:	e008      	b.n	80045a2 <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d105      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004596:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 800459c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045a2:	4b27      	ldr	r3, [pc, #156]	; (8004640 <HAL_RCC_ClockConfig+0x23c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d210      	bcs.n	80045d2 <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b0:	4b23      	ldr	r3, [pc, #140]	; (8004640 <HAL_RCC_ClockConfig+0x23c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f023 020f 	bic.w	r2, r3, #15
 80045b8:	4921      	ldr	r1, [pc, #132]	; (8004640 <HAL_RCC_ClockConfig+0x23c>)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c0:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <HAL_RCC_ClockConfig+0x23c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d001      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e032      	b.n	8004638 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045de:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4916      	ldr	r1, [pc, #88]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	490e      	ldr	r1, [pc, #56]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 800460c:	4313      	orrs	r3, r2
 800460e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004610:	f000 f820 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004614:	4601      	mov	r1, r0
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	4a0a      	ldr	r2, [pc, #40]	; (800464c <HAL_RCC_ClockConfig+0x248>)
 8004622:	5cd3      	ldrb	r3, [r2, r3]
 8004624:	fa21 f303 	lsr.w	r3, r1, r3
 8004628:	4a09      	ldr	r2, [pc, #36]	; (8004650 <HAL_RCC_ClockConfig+0x24c>)
 800462a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800462c:	2000      	movs	r0, #0
 800462e:	f7fd f8c3 	bl	80017b8 <HAL_InitTick>
 8004632:	4603      	mov	r3, r0
 8004634:	72fb      	strb	r3, [r7, #11]

  return status;
 8004636:	7afb      	ldrb	r3, [r7, #11]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40022000 	.word	0x40022000
 8004644:	40021000 	.word	0x40021000
 8004648:	04c4b400 	.word	0x04c4b400
 800464c:	08008308 	.word	0x08008308
 8004650:	20000000 	.word	0x20000000

08004654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004654:	b480      	push	{r7}
 8004656:	b089      	sub	sp, #36	; 0x24
 8004658:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004662:	4b46      	ldr	r3, [pc, #280]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800466c:	4b43      	ldr	r3, [pc, #268]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0x34>
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b0c      	cmp	r3, #12
 8004680:	d121      	bne.n	80046c6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d11e      	bne.n	80046c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004688:	4b3c      	ldr	r3, [pc, #240]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004694:	4b39      	ldr	r3, [pc, #228]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 8004696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e005      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046a4:	4b35      	ldr	r3, [pc, #212]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80046b0:	4a33      	ldr	r2, [pc, #204]	; (8004780 <HAL_RCC_GetSysClockFreq+0x12c>)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_CFGR_SWS_MSI)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10d      	bne.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_CFGR_SWS_MSI)
 80046c4:	e00a      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_CFGR_SWS_HSI)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d102      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046cc:	4b2d      	ldr	r3, [pc, #180]	; (8004784 <HAL_RCC_GetSysClockFreq+0x130>)
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e004      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_CFGR_SWS_HSE)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046d8:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <HAL_RCC_GetSysClockFreq+0x134>)
 80046da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_CFGR_SWS_PLL)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	d145      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80046e2:	4b26      	ldr	r3, [pc, #152]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	3301      	adds	r3, #1
 80046f8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d002      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0xb2>
 8004700:	2b03      	cmp	r3, #3
 8004702:	d00d      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0xcc>
 8004704:	e019      	b.n	800473a <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004706:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <HAL_RCC_GetSysClockFreq+0x130>)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	4a1b      	ldr	r2, [pc, #108]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 8004710:	68d2      	ldr	r2, [r2, #12]
 8004712:	0a12      	lsrs	r2, r2, #8
 8004714:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004718:	fb02 f303 	mul.w	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
        break;
 800471e:	e019      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <HAL_RCC_GetSysClockFreq+0x134>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	4a14      	ldr	r2, [pc, #80]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 800472a:	68d2      	ldr	r2, [r2, #12]
 800472c:	0a12      	lsrs	r2, r2, #8
 800472e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	617b      	str	r3, [r7, #20]
        break;
 8004738:	e00c      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	4a0e      	ldr	r2, [pc, #56]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 8004744:	68d2      	ldr	r2, [r2, #12]
 8004746:	0a12      	lsrs	r2, r2, #8
 8004748:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]
        break;
 8004752:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <HAL_RCC_GetSysClockFreq+0x128>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	0e5b      	lsrs	r3, r3, #25
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800476e:	69bb      	ldr	r3, [r7, #24]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3724      	adds	r7, #36	; 0x24
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40021000 	.word	0x40021000
 8004780:	08008320 	.word	0x08008320
 8004784:	00f42400 	.word	0x00f42400
 8004788:	00b71b00 	.word	0x00b71b00

0800478c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 8004790:	f7fc ff20 	bl	80015d4 <SystemCoreClockUpdate>

  return SystemCoreClock;
 8004794:	4b01      	ldr	r3, [pc, #4]	; (800479c <HAL_RCC_GetHCLKFreq+0x10>)
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	4618      	mov	r0, r3
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000000 	.word	0x20000000

080047a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047a4:	f7ff fff2 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047a8:	4601      	mov	r1, r0
 80047aa:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	0a1b      	lsrs	r3, r3, #8
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4a03      	ldr	r2, [pc, #12]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b6:	5cd3      	ldrb	r3, [r2, r3]
 80047b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40021000 	.word	0x40021000
 80047c4:	08008318 	.word	0x08008318

080047c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047cc:	f7ff ffde 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047d0:	4601      	mov	r1, r0
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	0adb      	lsrs	r3, r3, #11
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4a03      	ldr	r2, [pc, #12]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80047de:	5cd3      	ldrb	r3, [r2, r3]
 80047e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40021000 	.word	0x40021000
 80047ec:	08008318 	.word	0x08008318

080047f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047fc:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004808:	f7ff f8e2 	bl	80039d0 <HAL_PWREx_GetVoltageRange>
 800480c:	6138      	str	r0, [r7, #16]
 800480e:	e014      	b.n	800483a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004810:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	4a26      	ldr	r2, [pc, #152]	; (80048b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481a:	6593      	str	r3, [r2, #88]	; 0x58
 800481c:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800481e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004828:	f7ff f8d2 	bl	80039d0 <HAL_PWREx_GetVoltageRange>
 800482c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800482e:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004846:	d10b      	bne.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b80      	cmp	r3, #128	; 0x80
 800484c:	d919      	bls.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2ba0      	cmp	r3, #160	; 0xa0
 8004852:	d902      	bls.n	800485a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004854:	2302      	movs	r3, #2
 8004856:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004858:	e013      	b.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800485a:	2301      	movs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800485e:	e010      	b.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b80      	cmp	r3, #128	; 0x80
 8004864:	d902      	bls.n	800486c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004866:	2303      	movs	r3, #3
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e00a      	b.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b80      	cmp	r3, #128	; 0x80
 8004870:	d102      	bne.n	8004878 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004872:	2302      	movs	r3, #2
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e004      	b.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b70      	cmp	r3, #112	; 0x70
 800487c:	d101      	bne.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800487e:	2301      	movs	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004882:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 020f 	bic.w	r2, r3, #15
 800488a:	490a      	ldr	r1, [pc, #40]	; (80048b4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40022000 	.word	0x40022000

080048b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80048c2:	4b36      	ldr	r3, [pc, #216]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d118      	bne.n	8004900 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048ce:	4b33      	ldr	r3, [pc, #204]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048da:	4b30      	ldr	r3, [pc, #192]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80048dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e0:	0a1b      	lsrs	r3, r3, #8
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e005      	b.n	80048f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048ea:	4b2c      	ldr	r3, [pc, #176]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fe:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004900:	4b26      	ldr	r3, [pc, #152]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0303 	and.w	r3, r3, #3
 8004908:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	3301      	adds	r3, #1
 8004916:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d002      	beq.n	8004924 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 800491e:	2b03      	cmp	r3, #3
 8004920:	d00d      	beq.n	800493e <RCC_GetSysClockFreqFromPLLSource+0x86>
 8004922:	e019      	b.n	8004958 <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004924:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	4a1b      	ldr	r2, [pc, #108]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800492e:	68d2      	ldr	r2, [r2, #12]
 8004930:	0a12      	lsrs	r2, r2, #8
 8004932:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	613b      	str	r3, [r7, #16]
      break;
 800493c:	e019      	b.n	8004972 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800493e:	4a1a      	ldr	r2, [pc, #104]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	fbb2 f3f3 	udiv	r3, r2, r3
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004948:	68d2      	ldr	r2, [r2, #12]
 800494a:	0a12      	lsrs	r2, r2, #8
 800494c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	613b      	str	r3, [r7, #16]
      break;
 8004956:	e00c      	b.n	8004972 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	4a0e      	ldr	r2, [pc, #56]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004962:	68d2      	ldr	r2, [r2, #12]
 8004964:	0a12      	lsrs	r2, r2, #8
 8004966:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	613b      	str	r3, [r7, #16]
      break;
 8004970:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	0e5b      	lsrs	r3, r3, #25
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	3301      	adds	r3, #1
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800498c:	683b      	ldr	r3, [r7, #0]
}
 800498e:	4618      	mov	r0, r3
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	08008320 	.word	0x08008320
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	00b71b00 	.word	0x00b71b00

080049ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049b4:	2300      	movs	r3, #0
 80049b6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049b8:	2300      	movs	r3, #0
 80049ba:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d03d      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d00b      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d804      	bhi.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x32>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d015      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80049dc:	e01d      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80049de:	2b60      	cmp	r3, #96	; 0x60
 80049e0:	d01e      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d01c      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049e6:	e018      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049e8:	4b84      	ldr	r3, [pc, #528]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4a83      	ldr	r2, [pc, #524]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f2:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80049f4:	e015      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fb3f 	bl	8005080 <RCCEx_PLLSAI1_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004a06:	e00c      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3320      	adds	r3, #32
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fc08 	bl	8005224 <RCCEx_PLLSAI2_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004a18:	e003      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	77fb      	strb	r3, [r7, #31]
        break;
 8004a1e:	e000      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
        break;
 8004a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a22:	7ffb      	ldrb	r3, [r7, #31]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a28:	4b74      	ldr	r3, [pc, #464]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a2e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a36:	4971      	ldr	r1, [pc, #452]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a3e:	e001      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	7ffb      	ldrb	r3, [r7, #31]
 8004a42:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d042      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a58:	d00f      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5e:	d805      	bhi.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d011      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a68:	d017      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8004a6a:	e01f      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a70:	d01f      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a76:	d01c      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a78:	e018      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a7a:	4b60      	ldr	r3, [pc, #384]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4a5f      	ldr	r2, [pc, #380]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a84:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004a86:	e015      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 faf6 	bl	8005080 <RCCEx_PLLSAI1_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004a98:	e00c      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3320      	adds	r3, #32
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fbbf 	bl	8005224 <RCCEx_PLLSAI2_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004aaa:	e003      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	77fb      	strb	r3, [r7, #31]
        break;
 8004ab0:	e000      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        break;
 8004ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab4:	7ffb      	ldrb	r3, [r7, #31]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aba:	4b50      	ldr	r3, [pc, #320]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	494c      	ldr	r1, [pc, #304]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ad0:	e001      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad2:	7ffb      	ldrb	r3, [r7, #31]
 8004ad4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 809b 	beq.w	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae8:	4b44      	ldr	r3, [pc, #272]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10d      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af4:	4b41      	ldr	r3, [pc, #260]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af8:	4a40      	ldr	r2, [pc, #256]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6593      	str	r3, [r2, #88]	; 0x58
 8004b00:	4b3e      	ldr	r3, [pc, #248]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b10:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a3a      	ldr	r2, [pc, #232]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b1c:	f7fc fe98 	bl	8001850 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b22:	e009      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b24:	f7fc fe94 	bl	8001850 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d902      	bls.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      {
        ret = HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	77fb      	strb	r3, [r7, #31]
        break;
 8004b36:	e005      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x198>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b38:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ef      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x178>
      }
    }

    if (ret == HAL_OK)
 8004b44:	7ffb      	ldrb	r3, [r7, #31]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d15c      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b4a:	4b2c      	ldr	r3, [pc, #176]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b54:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01f      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d019      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b68:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b72:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b74:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	4a20      	ldr	r2, [pc, #128]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b94:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fc fe53 	bl	8001850 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bac:	e00b      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bae:	f7fc fe4f 	bl	8001850 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d902      	bls.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
          {
            ret = HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	77fb      	strb	r3, [r7, #31]
            break;
 8004bc4:	e006      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ec      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x202>
          }
        }
      }

      if (ret == HAL_OK)
 8004bd4:	7ffb      	ldrb	r3, [r7, #31]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bda:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4904      	ldr	r1, [pc, #16]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bf2:	e009      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf4:	7ffb      	ldrb	r3, [r7, #31]
 8004bf6:	77bb      	strb	r3, [r7, #30]
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	7ffb      	ldrb	r3, [r7, #31]
 8004c06:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d105      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c0e:	4bae      	ldr	r3, [pc, #696]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	4aad      	ldr	r2, [pc, #692]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c26:	4ba8      	ldr	r3, [pc, #672]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	f023 0203 	bic.w	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	49a4      	ldr	r1, [pc, #656]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c48:	4b9f      	ldr	r3, [pc, #636]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	f023 020c 	bic.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	499c      	ldr	r1, [pc, #624]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c6a:	4b97      	ldr	r3, [pc, #604]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c78:	4993      	ldr	r1, [pc, #588]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c8c:	4b8e      	ldr	r3, [pc, #568]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	498b      	ldr	r1, [pc, #556]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cae:	4b86      	ldr	r3, [pc, #536]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	4982      	ldr	r1, [pc, #520]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd0:	4b7d      	ldr	r3, [pc, #500]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cde:	497a      	ldr	r1, [pc, #488]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cf2:	4b75      	ldr	r3, [pc, #468]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	4971      	ldr	r1, [pc, #452]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d14:	4b6c      	ldr	r3, [pc, #432]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d22:	4969      	ldr	r1, [pc, #420]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004d36:	4b64      	ldr	r3, [pc, #400]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d44:	4960      	ldr	r1, [pc, #384]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d60:	d005      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8004d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d66:	d009      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004d6c:	e00f      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d6e:	4b56      	ldr	r3, [pc, #344]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4a55      	ldr	r2, [pc, #340]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d78:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004d7a:	e00c      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f97c 	bl	8005080 <RCCEx_PLLSAI1_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004d8c:	e003      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      default:
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	77fb      	strb	r3, [r7, #31]
        break;
 8004d92:	e000      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8004d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d96:	7ffb      	ldrb	r3, [r7, #31]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10b      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d9c:	4b4a      	ldr	r3, [pc, #296]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004daa:	4947      	ldr	r1, [pc, #284]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004db2:	e001      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db4:	7ffb      	ldrb	r3, [r7, #31]
 8004db6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x42e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dc4:	4b40      	ldr	r3, [pc, #256]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd2:	493d      	ldr	r1, [pc, #244]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004de6:	4b38      	ldr	r3, [pc, #224]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	4934      	ldr	r1, [pc, #208]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e08:	4b2f      	ldr	r3, [pc, #188]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	492c      	ldr	r1, [pc, #176]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e2a:	4b27      	ldr	r3, [pc, #156]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e30:	f023 0203 	bic.w	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	4923      	ldr	r1, [pc, #140]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d028      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5a:	491b      	ldr	r1, [pc, #108]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e6c:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e76:	60d3      	str	r3, [r2, #12]
 8004e78:	e011      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e82:	d10c      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	2101      	movs	r1, #1
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f8f8 	bl	8005080 <RCCEx_PLLSAI1_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004e94:	7ffb      	ldrb	r3, [r7, #31]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        {
          /* set overall return value */
          status = ret;
 8004e9a:	7ffb      	ldrb	r3, [r7, #31]
 8004e9c:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d04d      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb2:	d10b      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004eb4:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eba:	4a03      	ldr	r2, [pc, #12]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ec0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ec4:	e015      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x546>
 8004ec6:	bf00      	nop
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	4b6b      	ldr	r3, [pc, #428]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eda:	4968      	ldr	r1, [pc, #416]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ee2:	4b66      	ldr	r3, [pc, #408]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ee8:	4a64      	ldr	r2, [pc, #400]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004efa:	d10d      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3304      	adds	r3, #4
 8004f00:	2101      	movs	r1, #1
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f8bc 	bl	8005080 <RCCEx_PLLSAI1_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004f0c:	7ffb      	ldrb	r3, [r7, #31]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d019      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      {
        /* set overall return value */
        status = ret;
 8004f12:	7ffb      	ldrb	r3, [r7, #31]
 8004f14:	77bb      	strb	r3, [r7, #30]
 8004f16:	e016      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f20:	d106      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x584>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f22:	4b56      	ldr	r3, [pc, #344]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	4a55      	ldr	r2, [pc, #340]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2c:	60d3      	str	r3, [r2, #12]
 8004f2e:	e00a      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f38:	d105      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f3a:	4b50      	ldr	r3, [pc, #320]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	4a4f      	ldr	r2, [pc, #316]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f44:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d028      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f52:	4b4a      	ldr	r3, [pc, #296]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f60:	4946      	ldr	r1, [pc, #280]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f70:	d106      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f72:	4b42      	ldr	r3, [pc, #264]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	4a41      	ldr	r2, [pc, #260]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f7c:	60d3      	str	r3, [r2, #12]
 8004f7e:	e011      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f875 	bl	8005080 <RCCEx_PLLSAI1_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004f9a:	7ffb      	ldrb	r3, [r7, #31]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        /* set overall return value */
        status = ret;
 8004fa0:	7ffb      	ldrb	r3, [r7, #31]
 8004fa2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01e      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x642>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fb0:	4b32      	ldr	r3, [pc, #200]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc0:	492e      	ldr	r1, [pc, #184]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fd2:	d10c      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x642>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	2102      	movs	r1, #2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f850 	bl	8005080 <RCCEx_PLLSAI1_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004fe4:	7ffb      	ldrb	r3, [r7, #31]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* set overall return value */
        status = ret;
 8004fea:	7ffb      	ldrb	r3, [r7, #31]
 8004fec:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x666>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ffa:	4b20      	ldr	r3, [pc, #128]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8004ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005000:	f023 0204 	bic.w	r2, r3, #4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500a:	491c      	ldr	r1, [pc, #112]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800501e:	4b17      	ldr	r3, [pc, #92]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8005020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005024:	f023 0218 	bic.w	r2, r3, #24
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	4913      	ldr	r1, [pc, #76]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d017      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8005044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005052:	490a      	ldr	r1, [pc, #40]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005064:	d105      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	4a04      	ldr	r2, [pc, #16]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800506c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005070:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005072:	7fbb      	ldrb	r3, [r7, #30]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000

08005080 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d00c      	beq.n	80050b0 <RCCEx_PLLSAI1_Config+0x30>
 8005096:	2b03      	cmp	r3, #3
 8005098:	d013      	beq.n	80050c2 <RCCEx_PLLSAI1_Config+0x42>
 800509a:	2b01      	cmp	r3, #1
 800509c:	d11a      	bne.n	80050d4 <RCCEx_PLLSAI1_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800509e:	4b5d      	ldr	r3, [pc, #372]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d117      	bne.n	80050da <RCCEx_PLLSAI1_Config+0x5a>
      {
        status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ae:	e014      	b.n	80050da <RCCEx_PLLSAI1_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050b0:	4b58      	ldr	r3, [pc, #352]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d110      	bne.n	80050de <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c0:	e00d      	b.n	80050de <RCCEx_PLLSAI1_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80050c2:	4b54      	ldr	r3, [pc, #336]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0x62>
      {
        status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d2:	e006      	b.n	80050e2 <RCCEx_PLLSAI1_Config+0x62>
    default:
      status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
      break;
 80050d8:	e004      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0x64>
      break;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0x64>
      break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0x64>
      break;
 80050e2:	bf00      	nop
  }

  if (status == HAL_OK)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f040 808f 	bne.w	800520a <RCCEx_PLLSAI1_Config+0x18a>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050ec:	4b49      	ldr	r3, [pc, #292]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a48      	ldr	r2, [pc, #288]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 80050f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f8:	f7fc fbaa 	bl	8001850 <HAL_GetTick>
 80050fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050fe:	e009      	b.n	8005114 <RCCEx_PLLSAI1_Config+0x94>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005100:	f7fc fba6 	bl	8001850 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d902      	bls.n	8005114 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	73fb      	strb	r3, [r7, #15]
        break;
 8005112:	e005      	b.n	8005120 <RCCEx_PLLSAI1_Config+0xa0>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005114:	4b3f      	ldr	r3, [pc, #252]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1ef      	bne.n	8005100 <RCCEx_PLLSAI1_Config+0x80>
      }
    }

    if (status == HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d171      	bne.n	800520a <RCCEx_PLLSAI1_Config+0x18a>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d116      	bne.n	800515a <RCCEx_PLLSAI1_Config+0xda>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800512c:	4b39      	ldr	r3, [pc, #228]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	4b39      	ldr	r3, [pc, #228]	; (8005218 <RCCEx_PLLSAI1_Config+0x198>)
 8005132:	4013      	ands	r3, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6892      	ldr	r2, [r2, #8]
 8005138:	0211      	lsls	r1, r2, #8
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68d2      	ldr	r2, [r2, #12]
 800513e:	06d2      	lsls	r2, r2, #27
 8005140:	4311      	orrs	r1, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6852      	ldr	r2, [r2, #4]
 8005146:	3a01      	subs	r2, #1
 8005148:	0112      	lsls	r2, r2, #4
 800514a:	4311      	orrs	r1, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	4930      	ldr	r1, [pc, #192]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 8005154:	4313      	orrs	r3, r2
 8005156:	610b      	str	r3, [r1, #16]
 8005158:	e033      	b.n	80051c2 <RCCEx_PLLSAI1_Config+0x142>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d118      	bne.n	8005192 <RCCEx_PLLSAI1_Config+0x112>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005160:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	4b2d      	ldr	r3, [pc, #180]	; (800521c <RCCEx_PLLSAI1_Config+0x19c>)
 8005166:	4013      	ands	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6892      	ldr	r2, [r2, #8]
 800516c:	0211      	lsls	r1, r2, #8
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6912      	ldr	r2, [r2, #16]
 8005172:	0852      	lsrs	r2, r2, #1
 8005174:	3a01      	subs	r2, #1
 8005176:	0552      	lsls	r2, r2, #21
 8005178:	4311      	orrs	r1, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6852      	ldr	r2, [r2, #4]
 800517e:	3a01      	subs	r2, #1
 8005180:	0112      	lsls	r2, r2, #4
 8005182:	4311      	orrs	r1, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	4922      	ldr	r1, [pc, #136]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 800518c:	4313      	orrs	r3, r2
 800518e:	610b      	str	r3, [r1, #16]
 8005190:	e017      	b.n	80051c2 <RCCEx_PLLSAI1_Config+0x142>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005192:	4b20      	ldr	r3, [pc, #128]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	4b22      	ldr	r3, [pc, #136]	; (8005220 <RCCEx_PLLSAI1_Config+0x1a0>)
 8005198:	4013      	ands	r3, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6892      	ldr	r2, [r2, #8]
 800519e:	0211      	lsls	r1, r2, #8
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6952      	ldr	r2, [r2, #20]
 80051a4:	0852      	lsrs	r2, r2, #1
 80051a6:	3a01      	subs	r2, #1
 80051a8:	0652      	lsls	r2, r2, #25
 80051aa:	4311      	orrs	r1, r2
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6852      	ldr	r2, [r2, #4]
 80051b0:	3a01      	subs	r2, #1
 80051b2:	0112      	lsls	r2, r2, #4
 80051b4:	4311      	orrs	r1, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	4915      	ldr	r1, [pc, #84]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051c2:	4b14      	ldr	r3, [pc, #80]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a13      	ldr	r2, [pc, #76]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 80051c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ce:	f7fc fb3f 	bl	8001850 <HAL_GetTick>
 80051d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051d4:	e009      	b.n	80051ea <RCCEx_PLLSAI1_Config+0x16a>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051d6:	f7fc fb3b 	bl	8001850 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d902      	bls.n	80051ea <RCCEx_PLLSAI1_Config+0x16a>
        {
          status = HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	73fb      	strb	r3, [r7, #15]
          break;
 80051e8:	e005      	b.n	80051f6 <RCCEx_PLLSAI1_Config+0x176>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0ef      	beq.n	80051d6 <RCCEx_PLLSAI1_Config+0x156>
        }
      }

      if (status == HAL_OK)
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <RCCEx_PLLSAI1_Config+0x18a>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	4903      	ldr	r1, [pc, #12]	; (8005214 <RCCEx_PLLSAI1_Config+0x194>)
 8005206:	4313      	orrs	r3, r2
 8005208:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40021000 	.word	0x40021000
 8005218:	07ff800c 	.word	0x07ff800c
 800521c:	ff9f800c 	.word	0xff9f800c
 8005220:	f9ff800c 	.word	0xf9ff800c

08005224 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d00c      	beq.n	8005254 <RCCEx_PLLSAI2_Config+0x30>
 800523a:	2b03      	cmp	r3, #3
 800523c:	d013      	beq.n	8005266 <RCCEx_PLLSAI2_Config+0x42>
 800523e:	2b01      	cmp	r3, #1
 8005240:	d11a      	bne.n	8005278 <RCCEx_PLLSAI2_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005242:	4b42      	ldr	r3, [pc, #264]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d117      	bne.n	800527e <RCCEx_PLLSAI2_Config+0x5a>
      {
        status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005252:	e014      	b.n	800527e <RCCEx_PLLSAI2_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005254:	4b3d      	ldr	r3, [pc, #244]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525c:	2b00      	cmp	r3, #0
 800525e:	d110      	bne.n	8005282 <RCCEx_PLLSAI2_Config+0x5e>
      {
        status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005264:	e00d      	b.n	8005282 <RCCEx_PLLSAI2_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005266:	4b39      	ldr	r3, [pc, #228]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d109      	bne.n	8005286 <RCCEx_PLLSAI2_Config+0x62>
      {
        status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005276:	e006      	b.n	8005286 <RCCEx_PLLSAI2_Config+0x62>
    default:
      status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      break;
 800527c:	e004      	b.n	8005288 <RCCEx_PLLSAI2_Config+0x64>
      break;
 800527e:	bf00      	nop
 8005280:	e002      	b.n	8005288 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8005286:	bf00      	nop
  }

  if (status == HAL_OK)
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d159      	bne.n	8005342 <RCCEx_PLLSAI2_Config+0x11e>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800528e:	4b2f      	ldr	r3, [pc, #188]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a2e      	ldr	r2, [pc, #184]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 8005294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529a:	f7fc fad9 	bl	8001850 <HAL_GetTick>
 800529e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052a0:	e009      	b.n	80052b6 <RCCEx_PLLSAI2_Config+0x92>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052a2:	f7fc fad5 	bl	8001850 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d902      	bls.n	80052b6 <RCCEx_PLLSAI2_Config+0x92>
      {
        status = HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	73fb      	strb	r3, [r7, #15]
        break;
 80052b4:	e005      	b.n	80052c2 <RCCEx_PLLSAI2_Config+0x9e>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052b6:	4b25      	ldr	r3, [pc, #148]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ef      	bne.n	80052a2 <RCCEx_PLLSAI2_Config+0x7e>
      }
    }

    if (status == HAL_OK)
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d13c      	bne.n	8005342 <RCCEx_PLLSAI2_Config+0x11e>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d115      	bne.n	80052fa <RCCEx_PLLSAI2_Config+0xd6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052ce:	4b1f      	ldr	r3, [pc, #124]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 80052d0:	695a      	ldr	r2, [r3, #20]
 80052d2:	4b1f      	ldr	r3, [pc, #124]	; (8005350 <RCCEx_PLLSAI2_Config+0x12c>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6892      	ldr	r2, [r2, #8]
 80052da:	0211      	lsls	r1, r2, #8
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	68d2      	ldr	r2, [r2, #12]
 80052e0:	06d2      	lsls	r2, r2, #27
 80052e2:	4311      	orrs	r1, r2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6852      	ldr	r2, [r2, #4]
 80052e8:	3a01      	subs	r2, #1
 80052ea:	0112      	lsls	r2, r2, #4
 80052ec:	4311      	orrs	r1, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	4915      	ldr	r1, [pc, #84]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052fa:	4b14      	ldr	r3, [pc, #80]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a13      	ldr	r2, [pc, #76]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 8005300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005304:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005306:	f7fc faa3 	bl	8001850 <HAL_GetTick>
 800530a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800530c:	e009      	b.n	8005322 <RCCEx_PLLSAI2_Config+0xfe>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800530e:	f7fc fa9f 	bl	8001850 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d902      	bls.n	8005322 <RCCEx_PLLSAI2_Config+0xfe>
        {
          status = HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	73fb      	strb	r3, [r7, #15]
          break;
 8005320:	e005      	b.n	800532e <RCCEx_PLLSAI2_Config+0x10a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0ef      	beq.n	800530e <RCCEx_PLLSAI2_Config+0xea>
        }
      }

      if (status == HAL_OK)
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <RCCEx_PLLSAI2_Config+0x11e>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 8005336:	695a      	ldr	r2, [r3, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	4903      	ldr	r1, [pc, #12]	; (800534c <RCCEx_PLLSAI2_Config+0x128>)
 800533e:	4313      	orrs	r3, r2
 8005340:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021000 	.word	0x40021000
 8005350:	07ff800c 	.word	0x07ff800c

08005354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e07c      	b.n	8005460 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7fb ffc3 	bl	800130c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053a6:	d902      	bls.n	80053ae <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	e002      	b.n	80053b4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053bc:	d007      	beq.n	80053ce <HAL_SPI_Init+0x7a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053c6:	d002      	beq.n	80053ce <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053de:	d903      	bls.n	80053e8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30
 80053e6:	e002      	b.n	80053ee <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	ea42 0103 	orr.w	r1, r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	f003 0204 	and.w	r2, r3, #4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	ea42 0103 	orr.w	r1, r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_SPI_Transmit+0x22>
 8005486:	2302      	movs	r3, #2
 8005488:	e150      	b.n	800572c <HAL_SPI_Transmit+0x2c4>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005492:	f7fc f9dd 	bl	8001850 <HAL_GetTick>
 8005496:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d002      	beq.n	80054ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
 80054aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ac:	e135      	b.n	800571a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_SPI_Transmit+0x52>
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054be:	e12c      	b.n	800571a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2203      	movs	r2, #3
 80054c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	88fa      	ldrh	r2, [r7, #6]
 80054d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	88fa      	ldrh	r2, [r7, #6]
 80054de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550a:	d107      	bne.n	800551c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800551a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	d007      	beq.n	800553a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005538:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005542:	d94b      	bls.n	80055dc <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <HAL_SPI_Transmit+0xea>
 800554c:	8afb      	ldrh	r3, [r7, #22]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d13e      	bne.n	80055d0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	881a      	ldrh	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	1c9a      	adds	r2, r3, #2
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005576:	e02b      	b.n	80055d0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b02      	cmp	r3, #2
 8005584:	d112      	bne.n	80055ac <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	881a      	ldrh	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	1c9a      	adds	r2, r3, #2
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055aa:	e011      	b.n	80055d0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ac:	f7fc f950 	bl	8001850 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d803      	bhi.n	80055c4 <HAL_SPI_Transmit+0x15c>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c2:	d102      	bne.n	80055ca <HAL_SPI_Transmit+0x162>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055ce:	e0a4      	b.n	800571a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1ce      	bne.n	8005578 <HAL_SPI_Transmit+0x110>
 80055da:	e07c      	b.n	80056d6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <HAL_SPI_Transmit+0x182>
 80055e4:	8afb      	ldrh	r3, [r7, #22]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d170      	bne.n	80056cc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d912      	bls.n	800561a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	881a      	ldrh	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	1c9a      	adds	r2, r3, #2
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b02      	subs	r3, #2
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005618:	e058      	b.n	80056cc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	7812      	ldrb	r2, [r2, #0]
 8005626:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005640:	e044      	b.n	80056cc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b02      	cmp	r3, #2
 800564e:	d12b      	bne.n	80056a8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d912      	bls.n	8005680 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	881a      	ldrh	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	1c9a      	adds	r2, r3, #2
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b02      	subs	r3, #2
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800567e:	e025      	b.n	80056cc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056a6:	e011      	b.n	80056cc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a8:	f7fc f8d2 	bl	8001850 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d803      	bhi.n	80056c0 <HAL_SPI_Transmit+0x258>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d102      	bne.n	80056c6 <HAL_SPI_Transmit+0x25e>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056ca:	e026      	b.n	800571a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1b5      	bne.n	8005642 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fa82 	bl	8005be4 <SPI_EndRxTxTransaction>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e000      	b.n	800571a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005718:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800572a:	7ffb      	ldrb	r3, [r7, #31]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_SPI_Transmit_DMA+0x20>
 8005750:	2302      	movs	r3, #2
 8005752:	e0d0      	b.n	80058f6 <HAL_SPI_Transmit_DMA+0x1c2>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	d002      	beq.n	800576e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005768:	2302      	movs	r3, #2
 800576a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800576c:	e0be      	b.n	80058ec <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_SPI_Transmit_DMA+0x46>
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800577e:	e0b5      	b.n	80058ec <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2203      	movs	r2, #3
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	88fa      	ldrh	r2, [r7, #6]
 800579e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	d107      	bne.n	80057dc <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	4a47      	ldr	r2, [pc, #284]	; (8005900 <HAL_SPI_Transmit_DMA+0x1cc>)
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	4a46      	ldr	r2, [pc, #280]	; (8005904 <HAL_SPI_Transmit_DMA+0x1d0>)
 80057ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	4a45      	ldr	r2, [pc, #276]	; (8005908 <HAL_SPI_Transmit_DMA+0x1d4>)
 80057f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f8:	2200      	movs	r2, #0
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800580a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005814:	d82d      	bhi.n	8005872 <HAL_SPI_Transmit_DMA+0x13e>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005820:	d127      	bne.n	8005872 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005826:	b29b      	uxth	r3, r3
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10f      	bne.n	8005850 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800583e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005844:	b29b      	uxth	r3, r3
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800584e:	e010      	b.n	8005872 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800585e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005864:	b29b      	uxth	r3, r3
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	b29b      	uxth	r3, r3
 800586a:	3301      	adds	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	4619      	mov	r1, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	330c      	adds	r3, #12
 8005882:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005888:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800588a:	f7fc f9c7 	bl	8001c1c <HAL_DMA_Start_IT>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00c      	beq.n	80058ae <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005898:	f043 0210 	orr.w	r2, r3, #16
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80058ac:	e01e      	b.n	80058ec <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b40      	cmp	r3, #64	; 0x40
 80058ba:	d007      	beq.n	80058cc <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ca:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0220 	orr.w	r2, r2, #32
 80058da:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0202 	orr.w	r2, r2, #2
 80058ea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	080059db 	.word	0x080059db
 8005904:	08005935 	.word	0x08005935
 8005908:	080059f7 	.word	0x080059f7

0800590c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005942:	f7fb ff85 	bl	8001850 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b20      	cmp	r3, #32
 8005954:	d03b      	beq.n	80059ce <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0220 	bic.w	r2, r2, #32
 8005964:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0202 	bic.w	r2, r2, #2
 8005974:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	2164      	movs	r1, #100	; 0x64
 800597a:	6978      	ldr	r0, [r7, #20]
 800597c:	f000 f932 	bl	8005be4 <SPI_EndRxTxTransaction>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d005      	beq.n	8005992 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80059c6:	6978      	ldr	r0, [r7, #20]
 80059c8:	f7ff ffaa 	bl	8005920 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80059cc:	e002      	b.n	80059d4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80059ce:	6978      	ldr	r0, [r7, #20]
 80059d0:	f7fa fe5c 	bl	800068c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff ff8f 	bl	800590c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0203 	bic.w	r2, r2, #3
 8005a12:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a18:	f043 0210 	orr.w	r2, r3, #16
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff ff79 	bl	8005920 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a46:	e04c      	b.n	8005ae2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d048      	beq.n	8005ae2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a50:	f7fb fefe 	bl	8001850 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d902      	bls.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d13d      	bne.n	8005ae2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7e:	d111      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a88:	d004      	beq.n	8005a94 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a92:	d107      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aac:	d10f      	bne.n	8005ace <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005acc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e00f      	b.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4013      	ands	r3, r2
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	bf0c      	ite	eq
 8005af2:	2301      	moveq	r3, #1
 8005af4:	2300      	movne	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d1a3      	bne.n	8005a48 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b18:	e057      	b.n	8005bca <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b20:	d106      	bne.n	8005b30 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d048      	beq.n	8005bca <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005b38:	f7fb fe8a 	bl	8001850 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d902      	bls.n	8005b4e <SPI_WaitFifoStateUntilTimeout+0x44>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d13d      	bne.n	8005bca <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b66:	d111      	bne.n	8005b8c <SPI_WaitFifoStateUntilTimeout+0x82>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b70:	d004      	beq.n	8005b7c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7a:	d107      	bne.n	8005b8c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b94:	d10f      	bne.n	8005bb6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e008      	b.n	8005bdc <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d19f      	bne.n	8005b1a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff ff84 	bl	8005b0a <SPI_WaitFifoStateUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0c:	f043 0220 	orr.w	r2, r3, #32
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e027      	b.n	8005c68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2180      	movs	r1, #128	; 0x80
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff ff07 	bl	8005a36 <SPI_WaitFlagStateUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c32:	f043 0220 	orr.w	r2, r3, #32
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e014      	b.n	8005c68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff ff5d 	bl	8005b0a <SPI_WaitFifoStateUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e000      	b.n	8005c68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e042      	b.n	8005d08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7fb fbb5 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2224      	movs	r2, #36	; 0x24
 8005c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8c4 	bl	8005e40 <UART_SetConfig>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e022      	b.n	8005d08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 fb96 	bl	80073fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 fc1d 	bl	8007540 <UART_CheckIdleState>
 8005d06:	4603      	mov	r3, r0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	f040 8083 	bne.w	8005e32 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_UART_Transmit+0x28>
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e07b      	b.n	8005e34 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_UART_Transmit+0x3a>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e074      	b.n	8005e34 <HAL_UART_Transmit+0x124>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2221      	movs	r2, #33	; 0x21
 8005d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005d62:	f7fb fd75 	bl	8001850 <HAL_GetTick>
 8005d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	88fa      	ldrh	r2, [r7, #6]
 8005d6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	88fa      	ldrh	r2, [r7, #6]
 8005d74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d80:	d108      	bne.n	8005d94 <HAL_UART_Transmit+0x84>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	e003      	b.n	8005d9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005da4:	e02c      	b.n	8005e00 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2200      	movs	r2, #0
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f001 fc0d 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e039      	b.n	8005e34 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10b      	bne.n	8005dde <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	3302      	adds	r3, #2
 8005dda:	61bb      	str	r3, [r7, #24]
 8005ddc:	e007      	b.n	8005dee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	781a      	ldrb	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	3301      	adds	r3, #1
 8005dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1cc      	bne.n	8005da6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2200      	movs	r2, #0
 8005e14:	2140      	movs	r1, #64	; 0x40
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f001 fbda 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e006      	b.n	8005e34 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e000      	b.n	8005e34 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005e32:	2302      	movs	r3, #2
  }
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	0000      	movs	r0, r0
	...

08005e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005e44:	b08a      	sub	sp, #40	; 0x28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e74:	4313      	orrs	r3, r2
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4baa      	ldr	r3, [pc, #680]	; (8006128 <UART_SetConfig+0x2e8>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a9f      	ldr	r2, [pc, #636]	; (800612c <UART_SetConfig+0x2ec>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ec6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	f023 010f 	bic.w	r1, r3, #15
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a90      	ldr	r2, [pc, #576]	; (8006130 <UART_SetConfig+0x2f0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d126      	bne.n	8005f42 <UART_SetConfig+0x102>
 8005ef4:	4b8f      	ldr	r3, [pc, #572]	; (8006134 <UART_SetConfig+0x2f4>)
 8005ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d81a      	bhi.n	8005f38 <UART_SetConfig+0xf8>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <UART_SetConfig+0xc8>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f19 	.word	0x08005f19
 8005f0c:	08005f29 	.word	0x08005f29
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f31 	.word	0x08005f31
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1e:	e116      	b.n	800614e <UART_SetConfig+0x30e>
 8005f20:	2302      	movs	r3, #2
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f26:	e112      	b.n	800614e <UART_SetConfig+0x30e>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f2e:	e10e      	b.n	800614e <UART_SetConfig+0x30e>
 8005f30:	2308      	movs	r3, #8
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f36:	e10a      	b.n	800614e <UART_SetConfig+0x30e>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f3e:	bf00      	nop
 8005f40:	e105      	b.n	800614e <UART_SetConfig+0x30e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a7c      	ldr	r2, [pc, #496]	; (8006138 <UART_SetConfig+0x2f8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d138      	bne.n	8005fbe <UART_SetConfig+0x17e>
 8005f4c:	4b79      	ldr	r3, [pc, #484]	; (8006134 <UART_SetConfig+0x2f4>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	f003 030c 	and.w	r3, r3, #12
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d82c      	bhi.n	8005fb4 <UART_SetConfig+0x174>
 8005f5a:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <UART_SetConfig+0x120>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f95 	.word	0x08005f95
 8005f64:	08005fb5 	.word	0x08005fb5
 8005f68:	08005fb5 	.word	0x08005fb5
 8005f6c:	08005fb5 	.word	0x08005fb5
 8005f70:	08005fa5 	.word	0x08005fa5
 8005f74:	08005fb5 	.word	0x08005fb5
 8005f78:	08005fb5 	.word	0x08005fb5
 8005f7c:	08005fb5 	.word	0x08005fb5
 8005f80:	08005f9d 	.word	0x08005f9d
 8005f84:	08005fb5 	.word	0x08005fb5
 8005f88:	08005fb5 	.word	0x08005fb5
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	08005fad 	.word	0x08005fad
 8005f94:	2300      	movs	r3, #0
 8005f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9a:	e0d8      	b.n	800614e <UART_SetConfig+0x30e>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa2:	e0d4      	b.n	800614e <UART_SetConfig+0x30e>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005faa:	e0d0      	b.n	800614e <UART_SetConfig+0x30e>
 8005fac:	2308      	movs	r3, #8
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb2:	e0cc      	b.n	800614e <UART_SetConfig+0x30e>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fba:	bf00      	nop
 8005fbc:	e0c7      	b.n	800614e <UART_SetConfig+0x30e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a5e      	ldr	r2, [pc, #376]	; (800613c <UART_SetConfig+0x2fc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d125      	bne.n	8006014 <UART_SetConfig+0x1d4>
 8005fc8:	4b5a      	ldr	r3, [pc, #360]	; (8006134 <UART_SetConfig+0x2f4>)
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fd2:	2b10      	cmp	r3, #16
 8005fd4:	d011      	beq.n	8005ffa <UART_SetConfig+0x1ba>
 8005fd6:	2b10      	cmp	r3, #16
 8005fd8:	d802      	bhi.n	8005fe0 <UART_SetConfig+0x1a0>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <UART_SetConfig+0x1aa>
 8005fde:	e014      	b.n	800600a <UART_SetConfig+0x1ca>
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d006      	beq.n	8005ff2 <UART_SetConfig+0x1b2>
 8005fe4:	2b30      	cmp	r3, #48	; 0x30
 8005fe6:	d00c      	beq.n	8006002 <UART_SetConfig+0x1c2>
 8005fe8:	e00f      	b.n	800600a <UART_SetConfig+0x1ca>
 8005fea:	2300      	movs	r3, #0
 8005fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff0:	e0ad      	b.n	800614e <UART_SetConfig+0x30e>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff8:	e0a9      	b.n	800614e <UART_SetConfig+0x30e>
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006000:	e0a5      	b.n	800614e <UART_SetConfig+0x30e>
 8006002:	2308      	movs	r3, #8
 8006004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006008:	e0a1      	b.n	800614e <UART_SetConfig+0x30e>
 800600a:	2310      	movs	r3, #16
 800600c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006010:	bf00      	nop
 8006012:	e09c      	b.n	800614e <UART_SetConfig+0x30e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a49      	ldr	r2, [pc, #292]	; (8006140 <UART_SetConfig+0x300>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d125      	bne.n	800606a <UART_SetConfig+0x22a>
 800601e:	4b45      	ldr	r3, [pc, #276]	; (8006134 <UART_SetConfig+0x2f4>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006024:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d011      	beq.n	8006050 <UART_SetConfig+0x210>
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d802      	bhi.n	8006036 <UART_SetConfig+0x1f6>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <UART_SetConfig+0x200>
 8006034:	e014      	b.n	8006060 <UART_SetConfig+0x220>
 8006036:	2b80      	cmp	r3, #128	; 0x80
 8006038:	d006      	beq.n	8006048 <UART_SetConfig+0x208>
 800603a:	2bc0      	cmp	r3, #192	; 0xc0
 800603c:	d00c      	beq.n	8006058 <UART_SetConfig+0x218>
 800603e:	e00f      	b.n	8006060 <UART_SetConfig+0x220>
 8006040:	2300      	movs	r3, #0
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006046:	e082      	b.n	800614e <UART_SetConfig+0x30e>
 8006048:	2302      	movs	r3, #2
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604e:	e07e      	b.n	800614e <UART_SetConfig+0x30e>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006056:	e07a      	b.n	800614e <UART_SetConfig+0x30e>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e076      	b.n	800614e <UART_SetConfig+0x30e>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	bf00      	nop
 8006068:	e071      	b.n	800614e <UART_SetConfig+0x30e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a35      	ldr	r2, [pc, #212]	; (8006144 <UART_SetConfig+0x304>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d129      	bne.n	80060c8 <UART_SetConfig+0x288>
 8006074:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <UART_SetConfig+0x2f4>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006082:	d014      	beq.n	80060ae <UART_SetConfig+0x26e>
 8006084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006088:	d802      	bhi.n	8006090 <UART_SetConfig+0x250>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <UART_SetConfig+0x25e>
 800608e:	e016      	b.n	80060be <UART_SetConfig+0x27e>
 8006090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006094:	d007      	beq.n	80060a6 <UART_SetConfig+0x266>
 8006096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800609a:	d00c      	beq.n	80060b6 <UART_SetConfig+0x276>
 800609c:	e00f      	b.n	80060be <UART_SetConfig+0x27e>
 800609e:	2300      	movs	r3, #0
 80060a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060a4:	e053      	b.n	800614e <UART_SetConfig+0x30e>
 80060a6:	2302      	movs	r3, #2
 80060a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ac:	e04f      	b.n	800614e <UART_SetConfig+0x30e>
 80060ae:	2304      	movs	r3, #4
 80060b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060b4:	e04b      	b.n	800614e <UART_SetConfig+0x30e>
 80060b6:	2308      	movs	r3, #8
 80060b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060bc:	e047      	b.n	800614e <UART_SetConfig+0x30e>
 80060be:	2310      	movs	r3, #16
 80060c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c4:	bf00      	nop
 80060c6:	e042      	b.n	800614e <UART_SetConfig+0x30e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a17      	ldr	r2, [pc, #92]	; (800612c <UART_SetConfig+0x2ec>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d13a      	bne.n	8006148 <UART_SetConfig+0x308>
 80060d2:	4b18      	ldr	r3, [pc, #96]	; (8006134 <UART_SetConfig+0x2f4>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e0:	d014      	beq.n	800610c <UART_SetConfig+0x2cc>
 80060e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e6:	d802      	bhi.n	80060ee <UART_SetConfig+0x2ae>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <UART_SetConfig+0x2bc>
 80060ec:	e016      	b.n	800611c <UART_SetConfig+0x2dc>
 80060ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f2:	d007      	beq.n	8006104 <UART_SetConfig+0x2c4>
 80060f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060f8:	d00c      	beq.n	8006114 <UART_SetConfig+0x2d4>
 80060fa:	e00f      	b.n	800611c <UART_SetConfig+0x2dc>
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006102:	e024      	b.n	800614e <UART_SetConfig+0x30e>
 8006104:	2302      	movs	r3, #2
 8006106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800610a:	e020      	b.n	800614e <UART_SetConfig+0x30e>
 800610c:	2304      	movs	r3, #4
 800610e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006112:	e01c      	b.n	800614e <UART_SetConfig+0x30e>
 8006114:	2308      	movs	r3, #8
 8006116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800611a:	e018      	b.n	800614e <UART_SetConfig+0x30e>
 800611c:	2310      	movs	r3, #16
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006122:	bf00      	nop
 8006124:	e013      	b.n	800614e <UART_SetConfig+0x30e>
 8006126:	bf00      	nop
 8006128:	cfff69f3 	.word	0xcfff69f3
 800612c:	40008000 	.word	0x40008000
 8006130:	40013800 	.word	0x40013800
 8006134:	40021000 	.word	0x40021000
 8006138:	40004400 	.word	0x40004400
 800613c:	40004800 	.word	0x40004800
 8006140:	40004c00 	.word	0x40004c00
 8006144:	40005000 	.word	0x40005000
 8006148:	2310      	movs	r3, #16
 800614a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a86      	ldr	r2, [pc, #536]	; (800636c <UART_SetConfig+0x52c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	f040 8512 	bne.w	8006b7e <UART_SetConfig+0xd3e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800615a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800615e:	2b08      	cmp	r3, #8
 8006160:	f200 81c4 	bhi.w	80064ec <UART_SetConfig+0x6ac>
 8006164:	a201      	add	r2, pc, #4	; (adr r2, 800616c <UART_SetConfig+0x32c>)
 8006166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616a:	bf00      	nop
 800616c:	08006191 	.word	0x08006191
 8006170:	08006233 	.word	0x08006233
 8006174:	080062d5 	.word	0x080062d5
 8006178:	080064ed 	.word	0x080064ed
 800617c:	0800639d 	.word	0x0800639d
 8006180:	080064ed 	.word	0x080064ed
 8006184:	080064ed 	.word	0x080064ed
 8006188:	080064ed 	.word	0x080064ed
 800618c:	0800643f 	.word	0x0800643f
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006190:	f7fe fb06 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8006194:	4602      	mov	r2, r0
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	2b00      	cmp	r3, #0
 800619c:	d044      	beq.n	8006228 <UART_SetConfig+0x3e8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d03e      	beq.n	8006224 <UART_SetConfig+0x3e4>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d038      	beq.n	8006220 <UART_SetConfig+0x3e0>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d032      	beq.n	800621c <UART_SetConfig+0x3dc>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d02c      	beq.n	8006218 <UART_SetConfig+0x3d8>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	d026      	beq.n	8006214 <UART_SetConfig+0x3d4>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	2b06      	cmp	r3, #6
 80061cc:	d020      	beq.n	8006210 <UART_SetConfig+0x3d0>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	2b07      	cmp	r3, #7
 80061d4:	d01a      	beq.n	800620c <UART_SetConfig+0x3cc>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d014      	beq.n	8006208 <UART_SetConfig+0x3c8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	d00e      	beq.n	8006204 <UART_SetConfig+0x3c4>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	2b0a      	cmp	r3, #10
 80061ec:	d008      	beq.n	8006200 <UART_SetConfig+0x3c0>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	2b0b      	cmp	r3, #11
 80061f4:	d102      	bne.n	80061fc <UART_SetConfig+0x3bc>
 80061f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061fa:	e016      	b.n	800622a <UART_SetConfig+0x3ea>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e014      	b.n	800622a <UART_SetConfig+0x3ea>
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	e012      	b.n	800622a <UART_SetConfig+0x3ea>
 8006204:	2340      	movs	r3, #64	; 0x40
 8006206:	e010      	b.n	800622a <UART_SetConfig+0x3ea>
 8006208:	2320      	movs	r3, #32
 800620a:	e00e      	b.n	800622a <UART_SetConfig+0x3ea>
 800620c:	2310      	movs	r3, #16
 800620e:	e00c      	b.n	800622a <UART_SetConfig+0x3ea>
 8006210:	230c      	movs	r3, #12
 8006212:	e00a      	b.n	800622a <UART_SetConfig+0x3ea>
 8006214:	230a      	movs	r3, #10
 8006216:	e008      	b.n	800622a <UART_SetConfig+0x3ea>
 8006218:	2308      	movs	r3, #8
 800621a:	e006      	b.n	800622a <UART_SetConfig+0x3ea>
 800621c:	2306      	movs	r3, #6
 800621e:	e004      	b.n	800622a <UART_SetConfig+0x3ea>
 8006220:	2304      	movs	r3, #4
 8006222:	e002      	b.n	800622a <UART_SetConfig+0x3ea>
 8006224:	2302      	movs	r3, #2
 8006226:	e000      	b.n	800622a <UART_SetConfig+0x3ea>
 8006228:	2301      	movs	r3, #1
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	617b      	str	r3, [r7, #20]
        break;
 8006230:	e15f      	b.n	80064f2 <UART_SetConfig+0x6b2>
      case UART_CLOCKSOURCE_PCLK2:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK2Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006232:	f7fe fac9 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 8006236:	4602      	mov	r2, r0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	2b00      	cmp	r3, #0
 800623e:	d044      	beq.n	80062ca <UART_SetConfig+0x48a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	2b01      	cmp	r3, #1
 8006246:	d03e      	beq.n	80062c6 <UART_SetConfig+0x486>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	2b02      	cmp	r3, #2
 800624e:	d038      	beq.n	80062c2 <UART_SetConfig+0x482>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	2b03      	cmp	r3, #3
 8006256:	d032      	beq.n	80062be <UART_SetConfig+0x47e>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	2b04      	cmp	r3, #4
 800625e:	d02c      	beq.n	80062ba <UART_SetConfig+0x47a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	2b05      	cmp	r3, #5
 8006266:	d026      	beq.n	80062b6 <UART_SetConfig+0x476>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	2b06      	cmp	r3, #6
 800626e:	d020      	beq.n	80062b2 <UART_SetConfig+0x472>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	2b07      	cmp	r3, #7
 8006276:	d01a      	beq.n	80062ae <UART_SetConfig+0x46e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	2b08      	cmp	r3, #8
 800627e:	d014      	beq.n	80062aa <UART_SetConfig+0x46a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2b09      	cmp	r3, #9
 8006286:	d00e      	beq.n	80062a6 <UART_SetConfig+0x466>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	2b0a      	cmp	r3, #10
 800628e:	d008      	beq.n	80062a2 <UART_SetConfig+0x462>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	2b0b      	cmp	r3, #11
 8006296:	d102      	bne.n	800629e <UART_SetConfig+0x45e>
 8006298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800629c:	e016      	b.n	80062cc <UART_SetConfig+0x48c>
 800629e:	2301      	movs	r3, #1
 80062a0:	e014      	b.n	80062cc <UART_SetConfig+0x48c>
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	e012      	b.n	80062cc <UART_SetConfig+0x48c>
 80062a6:	2340      	movs	r3, #64	; 0x40
 80062a8:	e010      	b.n	80062cc <UART_SetConfig+0x48c>
 80062aa:	2320      	movs	r3, #32
 80062ac:	e00e      	b.n	80062cc <UART_SetConfig+0x48c>
 80062ae:	2310      	movs	r3, #16
 80062b0:	e00c      	b.n	80062cc <UART_SetConfig+0x48c>
 80062b2:	230c      	movs	r3, #12
 80062b4:	e00a      	b.n	80062cc <UART_SetConfig+0x48c>
 80062b6:	230a      	movs	r3, #10
 80062b8:	e008      	b.n	80062cc <UART_SetConfig+0x48c>
 80062ba:	2308      	movs	r3, #8
 80062bc:	e006      	b.n	80062cc <UART_SetConfig+0x48c>
 80062be:	2306      	movs	r3, #6
 80062c0:	e004      	b.n	80062cc <UART_SetConfig+0x48c>
 80062c2:	2304      	movs	r3, #4
 80062c4:	e002      	b.n	80062cc <UART_SetConfig+0x48c>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e000      	b.n	80062cc <UART_SetConfig+0x48c>
 80062ca:	2301      	movs	r3, #1
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	617b      	str	r3, [r7, #20]
        break;
 80062d2:	e10e      	b.n	80064f2 <UART_SetConfig+0x6b2>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d044      	beq.n	8006366 <UART_SetConfig+0x526>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d03e      	beq.n	8006362 <UART_SetConfig+0x522>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d038      	beq.n	800635e <UART_SetConfig+0x51e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d032      	beq.n	800635a <UART_SetConfig+0x51a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d02c      	beq.n	8006356 <UART_SetConfig+0x516>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b05      	cmp	r3, #5
 8006302:	d026      	beq.n	8006352 <UART_SetConfig+0x512>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2b06      	cmp	r3, #6
 800630a:	d020      	beq.n	800634e <UART_SetConfig+0x50e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	2b07      	cmp	r3, #7
 8006312:	d01a      	beq.n	800634a <UART_SetConfig+0x50a>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	2b08      	cmp	r3, #8
 800631a:	d014      	beq.n	8006346 <UART_SetConfig+0x506>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b09      	cmp	r3, #9
 8006322:	d00e      	beq.n	8006342 <UART_SetConfig+0x502>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	2b0a      	cmp	r3, #10
 800632a:	d008      	beq.n	800633e <UART_SetConfig+0x4fe>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	2b0b      	cmp	r3, #11
 8006332:	d102      	bne.n	800633a <UART_SetConfig+0x4fa>
 8006334:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006338:	e016      	b.n	8006368 <UART_SetConfig+0x528>
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <UART_SetConfig+0x530>)
 800633c:	e014      	b.n	8006368 <UART_SetConfig+0x528>
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <UART_SetConfig+0x534>)
 8006340:	e012      	b.n	8006368 <UART_SetConfig+0x528>
 8006342:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <UART_SetConfig+0x538>)
 8006344:	e010      	b.n	8006368 <UART_SetConfig+0x528>
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <UART_SetConfig+0x53c>)
 8006348:	e00e      	b.n	8006368 <UART_SetConfig+0x528>
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <UART_SetConfig+0x540>)
 800634c:	e00c      	b.n	8006368 <UART_SetConfig+0x528>
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <UART_SetConfig+0x544>)
 8006350:	e00a      	b.n	8006368 <UART_SetConfig+0x528>
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <UART_SetConfig+0x548>)
 8006354:	e008      	b.n	8006368 <UART_SetConfig+0x528>
 8006356:	4b0d      	ldr	r3, [pc, #52]	; (800638c <UART_SetConfig+0x54c>)
 8006358:	e006      	b.n	8006368 <UART_SetConfig+0x528>
 800635a:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <UART_SetConfig+0x550>)
 800635c:	e004      	b.n	8006368 <UART_SetConfig+0x528>
 800635e:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <UART_SetConfig+0x554>)
 8006360:	e002      	b.n	8006368 <UART_SetConfig+0x528>
 8006362:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <UART_SetConfig+0x558>)
 8006364:	e000      	b.n	8006368 <UART_SetConfig+0x528>
 8006366:	4b02      	ldr	r3, [pc, #8]	; (8006370 <UART_SetConfig+0x530>)
 8006368:	617b      	str	r3, [r7, #20]
        break;
 800636a:	e0c2      	b.n	80064f2 <UART_SetConfig+0x6b2>
 800636c:	40008000 	.word	0x40008000
 8006370:	00f42400 	.word	0x00f42400
 8006374:	0001e848 	.word	0x0001e848
 8006378:	0003d090 	.word	0x0003d090
 800637c:	0007a120 	.word	0x0007a120
 8006380:	000f4240 	.word	0x000f4240
 8006384:	00145855 	.word	0x00145855
 8006388:	00186a00 	.word	0x00186a00
 800638c:	001e8480 	.word	0x001e8480
 8006390:	0028b0aa 	.word	0x0028b0aa
 8006394:	003d0900 	.word	0x003d0900
 8006398:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800639c:	f7fe f95a 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 80063a0:	4602      	mov	r2, r0
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d044      	beq.n	8006434 <UART_SetConfig+0x5f4>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d03e      	beq.n	8006430 <UART_SetConfig+0x5f0>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d038      	beq.n	800642c <UART_SetConfig+0x5ec>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d032      	beq.n	8006428 <UART_SetConfig+0x5e8>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d02c      	beq.n	8006424 <UART_SetConfig+0x5e4>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d026      	beq.n	8006420 <UART_SetConfig+0x5e0>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	2b06      	cmp	r3, #6
 80063d8:	d020      	beq.n	800641c <UART_SetConfig+0x5dc>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	2b07      	cmp	r3, #7
 80063e0:	d01a      	beq.n	8006418 <UART_SetConfig+0x5d8>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d014      	beq.n	8006414 <UART_SetConfig+0x5d4>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	2b09      	cmp	r3, #9
 80063f0:	d00e      	beq.n	8006410 <UART_SetConfig+0x5d0>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	2b0a      	cmp	r3, #10
 80063f8:	d008      	beq.n	800640c <UART_SetConfig+0x5cc>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	2b0b      	cmp	r3, #11
 8006400:	d102      	bne.n	8006408 <UART_SetConfig+0x5c8>
 8006402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006406:	e016      	b.n	8006436 <UART_SetConfig+0x5f6>
 8006408:	2301      	movs	r3, #1
 800640a:	e014      	b.n	8006436 <UART_SetConfig+0x5f6>
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	e012      	b.n	8006436 <UART_SetConfig+0x5f6>
 8006410:	2340      	movs	r3, #64	; 0x40
 8006412:	e010      	b.n	8006436 <UART_SetConfig+0x5f6>
 8006414:	2320      	movs	r3, #32
 8006416:	e00e      	b.n	8006436 <UART_SetConfig+0x5f6>
 8006418:	2310      	movs	r3, #16
 800641a:	e00c      	b.n	8006436 <UART_SetConfig+0x5f6>
 800641c:	230c      	movs	r3, #12
 800641e:	e00a      	b.n	8006436 <UART_SetConfig+0x5f6>
 8006420:	230a      	movs	r3, #10
 8006422:	e008      	b.n	8006436 <UART_SetConfig+0x5f6>
 8006424:	2308      	movs	r3, #8
 8006426:	e006      	b.n	8006436 <UART_SetConfig+0x5f6>
 8006428:	2306      	movs	r3, #6
 800642a:	e004      	b.n	8006436 <UART_SetConfig+0x5f6>
 800642c:	2304      	movs	r3, #4
 800642e:	e002      	b.n	8006436 <UART_SetConfig+0x5f6>
 8006430:	2302      	movs	r3, #2
 8006432:	e000      	b.n	8006436 <UART_SetConfig+0x5f6>
 8006434:	2301      	movs	r3, #1
 8006436:	fbb2 f3f3 	udiv	r3, r2, r3
 800643a:	617b      	str	r3, [r7, #20]
        break;
 800643c:	e059      	b.n	80064f2 <UART_SetConfig+0x6b2>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d04e      	beq.n	80064e4 <UART_SetConfig+0x6a4>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	2b01      	cmp	r3, #1
 800644c:	d047      	beq.n	80064de <UART_SetConfig+0x69e>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	2b02      	cmp	r3, #2
 8006454:	d040      	beq.n	80064d8 <UART_SetConfig+0x698>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	2b03      	cmp	r3, #3
 800645c:	d039      	beq.n	80064d2 <UART_SetConfig+0x692>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	2b04      	cmp	r3, #4
 8006464:	d032      	beq.n	80064cc <UART_SetConfig+0x68c>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	2b05      	cmp	r3, #5
 800646c:	d02b      	beq.n	80064c6 <UART_SetConfig+0x686>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b06      	cmp	r3, #6
 8006474:	d024      	beq.n	80064c0 <UART_SetConfig+0x680>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2b07      	cmp	r3, #7
 800647c:	d01d      	beq.n	80064ba <UART_SetConfig+0x67a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	2b08      	cmp	r3, #8
 8006484:	d016      	beq.n	80064b4 <UART_SetConfig+0x674>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	2b09      	cmp	r3, #9
 800648c:	d00f      	beq.n	80064ae <UART_SetConfig+0x66e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2b0a      	cmp	r3, #10
 8006494:	d008      	beq.n	80064a8 <UART_SetConfig+0x668>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	2b0b      	cmp	r3, #11
 800649c:	d101      	bne.n	80064a2 <UART_SetConfig+0x662>
 800649e:	2380      	movs	r3, #128	; 0x80
 80064a0:	e022      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a6:	e01f      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ac:	e01c      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064b2:	e019      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b8:	e016      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064be:	e013      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064c0:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80064c4:	e010      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064c6:	f640 43cc 	movw	r3, #3276	; 0xccc
 80064ca:	e00d      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d0:	e00a      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064d2:	f241 5355 	movw	r3, #5461	; 0x1555
 80064d6:	e007      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064dc:	e004      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064e2:	e001      	b.n	80064e8 <UART_SetConfig+0x6a8>
 80064e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e8:	617b      	str	r3, [r7, #20]
        break;
 80064ea:	e002      	b.n	80064f2 <UART_SetConfig+0x6b2>
      default:
        ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	76fb      	strb	r3, [r7, #27]
        break;
 80064f0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8756 	beq.w	80073a6 <UART_SetConfig+0x1566>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	429a      	cmp	r2, r3
 8006508:	d305      	bcc.n	8006516 <UART_SetConfig+0x6d6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	429a      	cmp	r2, r3
 8006514:	d903      	bls.n	800651e <UART_SetConfig+0x6de>
      {
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	76fb      	strb	r3, [r7, #27]
 800651a:	f000 bf44 	b.w	80073a6 <UART_SetConfig+0x1566>
      }
      else
      {
        switch (clocksource)
 800651e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006522:	2b08      	cmp	r3, #8
 8006524:	f200 8316 	bhi.w	8006b54 <UART_SetConfig+0xd14>
 8006528:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x6f0>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	08006555 	.word	0x08006555
 8006534:	08006693 	.word	0x08006693
 8006538:	080067d1 	.word	0x080067d1
 800653c:	08006b55 	.word	0x08006b55
 8006540:	080068c7 	.word	0x080068c7
 8006544:	08006b55 	.word	0x08006b55
 8006548:	08006b55 	.word	0x08006b55
 800654c:	08006b55 	.word	0x08006b55
 8006550:	08006a05 	.word	0x08006a05
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006554:	f7fe f924 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8006558:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4618      	mov	r0, r3
 800655e:	f04f 0100 	mov.w	r1, #0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d067      	beq.n	800663a <UART_SetConfig+0x7fa>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	2b01      	cmp	r3, #1
 8006570:	d05e      	beq.n	8006630 <UART_SetConfig+0x7f0>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	2b02      	cmp	r3, #2
 8006578:	d055      	beq.n	8006626 <UART_SetConfig+0x7e6>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	2b03      	cmp	r3, #3
 8006580:	d04c      	beq.n	800661c <UART_SetConfig+0x7dc>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	2b04      	cmp	r3, #4
 8006588:	d043      	beq.n	8006612 <UART_SetConfig+0x7d2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	2b05      	cmp	r3, #5
 8006590:	d03a      	beq.n	8006608 <UART_SetConfig+0x7c8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	2b06      	cmp	r3, #6
 8006598:	d031      	beq.n	80065fe <UART_SetConfig+0x7be>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	2b07      	cmp	r3, #7
 80065a0:	d028      	beq.n	80065f4 <UART_SetConfig+0x7b4>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d01f      	beq.n	80065ea <UART_SetConfig+0x7aa>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	2b09      	cmp	r3, #9
 80065b0:	d016      	beq.n	80065e0 <UART_SetConfig+0x7a0>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	2b0a      	cmp	r3, #10
 80065b8:	d00d      	beq.n	80065d6 <UART_SetConfig+0x796>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	2b0b      	cmp	r3, #11
 80065c0:	d104      	bne.n	80065cc <UART_SetConfig+0x78c>
 80065c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065c6:	f04f 0400 	mov.w	r4, #0
 80065ca:	e03a      	b.n	8006642 <UART_SetConfig+0x802>
 80065cc:	f04f 0301 	mov.w	r3, #1
 80065d0:	f04f 0400 	mov.w	r4, #0
 80065d4:	e035      	b.n	8006642 <UART_SetConfig+0x802>
 80065d6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80065da:	f04f 0400 	mov.w	r4, #0
 80065de:	e030      	b.n	8006642 <UART_SetConfig+0x802>
 80065e0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80065e4:	f04f 0400 	mov.w	r4, #0
 80065e8:	e02b      	b.n	8006642 <UART_SetConfig+0x802>
 80065ea:	f04f 0320 	mov.w	r3, #32
 80065ee:	f04f 0400 	mov.w	r4, #0
 80065f2:	e026      	b.n	8006642 <UART_SetConfig+0x802>
 80065f4:	f04f 0310 	mov.w	r3, #16
 80065f8:	f04f 0400 	mov.w	r4, #0
 80065fc:	e021      	b.n	8006642 <UART_SetConfig+0x802>
 80065fe:	f04f 030c 	mov.w	r3, #12
 8006602:	f04f 0400 	mov.w	r4, #0
 8006606:	e01c      	b.n	8006642 <UART_SetConfig+0x802>
 8006608:	f04f 030a 	mov.w	r3, #10
 800660c:	f04f 0400 	mov.w	r4, #0
 8006610:	e017      	b.n	8006642 <UART_SetConfig+0x802>
 8006612:	f04f 0308 	mov.w	r3, #8
 8006616:	f04f 0400 	mov.w	r4, #0
 800661a:	e012      	b.n	8006642 <UART_SetConfig+0x802>
 800661c:	f04f 0306 	mov.w	r3, #6
 8006620:	f04f 0400 	mov.w	r4, #0
 8006624:	e00d      	b.n	8006642 <UART_SetConfig+0x802>
 8006626:	f04f 0304 	mov.w	r3, #4
 800662a:	f04f 0400 	mov.w	r4, #0
 800662e:	e008      	b.n	8006642 <UART_SetConfig+0x802>
 8006630:	f04f 0302 	mov.w	r3, #2
 8006634:	f04f 0400 	mov.w	r4, #0
 8006638:	e003      	b.n	8006642 <UART_SetConfig+0x802>
 800663a:	f04f 0301 	mov.w	r3, #1
 800663e:	f04f 0400 	mov.w	r4, #0
 8006642:	461a      	mov	r2, r3
 8006644:	4623      	mov	r3, r4
 8006646:	f7f9 fdff 	bl	8000248 <__aeabi_uldivmod>
 800664a:	4603      	mov	r3, r0
 800664c:	460c      	mov	r4, r1
 800664e:	4619      	mov	r1, r3
 8006650:	4622      	mov	r2, r4
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	f04f 0400 	mov.w	r4, #0
 800665a:	0214      	lsls	r4, r2, #8
 800665c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006660:	020b      	lsls	r3, r1, #8
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6852      	ldr	r2, [r2, #4]
 8006666:	0852      	lsrs	r2, r2, #1
 8006668:	4611      	mov	r1, r2
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	eb13 0b01 	adds.w	fp, r3, r1
 8006672:	eb44 0c02 	adc.w	ip, r4, r2
 8006676:	4658      	mov	r0, fp
 8006678:	4661      	mov	r1, ip
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f04f 0400 	mov.w	r4, #0
 8006682:	461a      	mov	r2, r3
 8006684:	4623      	mov	r3, r4
 8006686:	f7f9 fddf 	bl	8000248 <__aeabi_uldivmod>
 800668a:	4603      	mov	r3, r0
 800668c:	460c      	mov	r4, r1
 800668e:	61fb      	str	r3, [r7, #28]
            break;
 8006690:	e263      	b.n	8006b5a <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_PCLK2:
            pclk = HAL_RCC_GetPCLK2Freq();
 8006692:	f7fe f899 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 8006696:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4618      	mov	r0, r3
 800669c:	f04f 0100 	mov.w	r1, #0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d067      	beq.n	8006778 <UART_SetConfig+0x938>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d05e      	beq.n	800676e <UART_SetConfig+0x92e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d055      	beq.n	8006764 <UART_SetConfig+0x924>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d04c      	beq.n	800675a <UART_SetConfig+0x91a>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d043      	beq.n	8006750 <UART_SetConfig+0x910>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b05      	cmp	r3, #5
 80066ce:	d03a      	beq.n	8006746 <UART_SetConfig+0x906>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	2b06      	cmp	r3, #6
 80066d6:	d031      	beq.n	800673c <UART_SetConfig+0x8fc>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	2b07      	cmp	r3, #7
 80066de:	d028      	beq.n	8006732 <UART_SetConfig+0x8f2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d01f      	beq.n	8006728 <UART_SetConfig+0x8e8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b09      	cmp	r3, #9
 80066ee:	d016      	beq.n	800671e <UART_SetConfig+0x8de>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b0a      	cmp	r3, #10
 80066f6:	d00d      	beq.n	8006714 <UART_SetConfig+0x8d4>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	2b0b      	cmp	r3, #11
 80066fe:	d104      	bne.n	800670a <UART_SetConfig+0x8ca>
 8006700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006704:	f04f 0400 	mov.w	r4, #0
 8006708:	e03a      	b.n	8006780 <UART_SetConfig+0x940>
 800670a:	f04f 0301 	mov.w	r3, #1
 800670e:	f04f 0400 	mov.w	r4, #0
 8006712:	e035      	b.n	8006780 <UART_SetConfig+0x940>
 8006714:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006718:	f04f 0400 	mov.w	r4, #0
 800671c:	e030      	b.n	8006780 <UART_SetConfig+0x940>
 800671e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006722:	f04f 0400 	mov.w	r4, #0
 8006726:	e02b      	b.n	8006780 <UART_SetConfig+0x940>
 8006728:	f04f 0320 	mov.w	r3, #32
 800672c:	f04f 0400 	mov.w	r4, #0
 8006730:	e026      	b.n	8006780 <UART_SetConfig+0x940>
 8006732:	f04f 0310 	mov.w	r3, #16
 8006736:	f04f 0400 	mov.w	r4, #0
 800673a:	e021      	b.n	8006780 <UART_SetConfig+0x940>
 800673c:	f04f 030c 	mov.w	r3, #12
 8006740:	f04f 0400 	mov.w	r4, #0
 8006744:	e01c      	b.n	8006780 <UART_SetConfig+0x940>
 8006746:	f04f 030a 	mov.w	r3, #10
 800674a:	f04f 0400 	mov.w	r4, #0
 800674e:	e017      	b.n	8006780 <UART_SetConfig+0x940>
 8006750:	f04f 0308 	mov.w	r3, #8
 8006754:	f04f 0400 	mov.w	r4, #0
 8006758:	e012      	b.n	8006780 <UART_SetConfig+0x940>
 800675a:	f04f 0306 	mov.w	r3, #6
 800675e:	f04f 0400 	mov.w	r4, #0
 8006762:	e00d      	b.n	8006780 <UART_SetConfig+0x940>
 8006764:	f04f 0304 	mov.w	r3, #4
 8006768:	f04f 0400 	mov.w	r4, #0
 800676c:	e008      	b.n	8006780 <UART_SetConfig+0x940>
 800676e:	f04f 0302 	mov.w	r3, #2
 8006772:	f04f 0400 	mov.w	r4, #0
 8006776:	e003      	b.n	8006780 <UART_SetConfig+0x940>
 8006778:	f04f 0301 	mov.w	r3, #1
 800677c:	f04f 0400 	mov.w	r4, #0
 8006780:	461a      	mov	r2, r3
 8006782:	4623      	mov	r3, r4
 8006784:	f7f9 fd60 	bl	8000248 <__aeabi_uldivmod>
 8006788:	4603      	mov	r3, r0
 800678a:	460c      	mov	r4, r1
 800678c:	4619      	mov	r1, r3
 800678e:	4622      	mov	r2, r4
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	f04f 0400 	mov.w	r4, #0
 8006798:	0214      	lsls	r4, r2, #8
 800679a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800679e:	020b      	lsls	r3, r1, #8
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6852      	ldr	r2, [r2, #4]
 80067a4:	0852      	lsrs	r2, r2, #1
 80067a6:	4611      	mov	r1, r2
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	eb13 0b01 	adds.w	fp, r3, r1
 80067b0:	eb44 0c02 	adc.w	ip, r4, r2
 80067b4:	4658      	mov	r0, fp
 80067b6:	4661      	mov	r1, ip
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f04f 0400 	mov.w	r4, #0
 80067c0:	461a      	mov	r2, r3
 80067c2:	4623      	mov	r3, r4
 80067c4:	f7f9 fd40 	bl	8000248 <__aeabi_uldivmod>
 80067c8:	4603      	mov	r3, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	61fb      	str	r3, [r7, #28]
            break;
 80067ce:	e1c4      	b.n	8006b5a <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d05b      	beq.n	8006890 <UART_SetConfig+0xa50>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d053      	beq.n	8006888 <UART_SetConfig+0xa48>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d04b      	beq.n	8006880 <UART_SetConfig+0xa40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d043      	beq.n	8006878 <UART_SetConfig+0xa38>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d03b      	beq.n	8006870 <UART_SetConfig+0xa30>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	2b05      	cmp	r3, #5
 80067fe:	d033      	beq.n	8006868 <UART_SetConfig+0xa28>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	2b06      	cmp	r3, #6
 8006806:	d02b      	beq.n	8006860 <UART_SetConfig+0xa20>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	2b07      	cmp	r3, #7
 800680e:	d023      	beq.n	8006858 <UART_SetConfig+0xa18>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	2b08      	cmp	r3, #8
 8006816:	d01b      	beq.n	8006850 <UART_SetConfig+0xa10>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	2b09      	cmp	r3, #9
 800681e:	d013      	beq.n	8006848 <UART_SetConfig+0xa08>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	2b0a      	cmp	r3, #10
 8006826:	d00b      	beq.n	8006840 <UART_SetConfig+0xa00>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	2b0b      	cmp	r3, #11
 800682e:	d103      	bne.n	8006838 <UART_SetConfig+0x9f8>
 8006830:	4bad      	ldr	r3, [pc, #692]	; (8006ae8 <UART_SetConfig+0xca8>)
 8006832:	f04f 0400 	mov.w	r4, #0
 8006836:	e02e      	b.n	8006896 <UART_SetConfig+0xa56>
 8006838:	4bac      	ldr	r3, [pc, #688]	; (8006aec <UART_SetConfig+0xcac>)
 800683a:	f04f 0400 	mov.w	r4, #0
 800683e:	e02a      	b.n	8006896 <UART_SetConfig+0xa56>
 8006840:	4bab      	ldr	r3, [pc, #684]	; (8006af0 <UART_SetConfig+0xcb0>)
 8006842:	f04f 0400 	mov.w	r4, #0
 8006846:	e026      	b.n	8006896 <UART_SetConfig+0xa56>
 8006848:	4baa      	ldr	r3, [pc, #680]	; (8006af4 <UART_SetConfig+0xcb4>)
 800684a:	f04f 0400 	mov.w	r4, #0
 800684e:	e022      	b.n	8006896 <UART_SetConfig+0xa56>
 8006850:	4ba9      	ldr	r3, [pc, #676]	; (8006af8 <UART_SetConfig+0xcb8>)
 8006852:	f04f 0400 	mov.w	r4, #0
 8006856:	e01e      	b.n	8006896 <UART_SetConfig+0xa56>
 8006858:	4ba8      	ldr	r3, [pc, #672]	; (8006afc <UART_SetConfig+0xcbc>)
 800685a:	f04f 0400 	mov.w	r4, #0
 800685e:	e01a      	b.n	8006896 <UART_SetConfig+0xa56>
 8006860:	a49d      	add	r4, pc, #628	; (adr r4, 8006ad8 <UART_SetConfig+0xc98>)
 8006862:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006866:	e016      	b.n	8006896 <UART_SetConfig+0xa56>
 8006868:	4ba5      	ldr	r3, [pc, #660]	; (8006b00 <UART_SetConfig+0xcc0>)
 800686a:	f04f 0400 	mov.w	r4, #0
 800686e:	e012      	b.n	8006896 <UART_SetConfig+0xa56>
 8006870:	4ba4      	ldr	r3, [pc, #656]	; (8006b04 <UART_SetConfig+0xcc4>)
 8006872:	f04f 0400 	mov.w	r4, #0
 8006876:	e00e      	b.n	8006896 <UART_SetConfig+0xa56>
 8006878:	a499      	add	r4, pc, #612	; (adr r4, 8006ae0 <UART_SetConfig+0xca0>)
 800687a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800687e:	e00a      	b.n	8006896 <UART_SetConfig+0xa56>
 8006880:	4ba1      	ldr	r3, [pc, #644]	; (8006b08 <UART_SetConfig+0xcc8>)
 8006882:	f04f 0400 	mov.w	r4, #0
 8006886:	e006      	b.n	8006896 <UART_SetConfig+0xa56>
 8006888:	4ba0      	ldr	r3, [pc, #640]	; (8006b0c <UART_SetConfig+0xccc>)
 800688a:	f04f 0400 	mov.w	r4, #0
 800688e:	e002      	b.n	8006896 <UART_SetConfig+0xa56>
 8006890:	4b96      	ldr	r3, [pc, #600]	; (8006aec <UART_SetConfig+0xcac>)
 8006892:	f04f 0400 	mov.w	r4, #0
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6852      	ldr	r2, [r2, #4]
 800689a:	0852      	lsrs	r2, r2, #1
 800689c:	4611      	mov	r1, r2
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	eb13 0b01 	adds.w	fp, r3, r1
 80068a6:	eb44 0c02 	adc.w	ip, r4, r2
 80068aa:	4658      	mov	r0, fp
 80068ac:	4661      	mov	r1, ip
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f04f 0400 	mov.w	r4, #0
 80068b6:	461a      	mov	r2, r3
 80068b8:	4623      	mov	r3, r4
 80068ba:	f7f9 fcc5 	bl	8000248 <__aeabi_uldivmod>
 80068be:	4603      	mov	r3, r0
 80068c0:	460c      	mov	r4, r1
 80068c2:	61fb      	str	r3, [r7, #28]
            break;
 80068c4:	e149      	b.n	8006b5a <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80068c6:	f7fd fec5 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 80068ca:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f04f 0100 	mov.w	r1, #0
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d067      	beq.n	80069ac <UART_SetConfig+0xb6c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d05e      	beq.n	80069a2 <UART_SetConfig+0xb62>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d055      	beq.n	8006998 <UART_SetConfig+0xb58>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d04c      	beq.n	800698e <UART_SetConfig+0xb4e>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d043      	beq.n	8006984 <UART_SetConfig+0xb44>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	2b05      	cmp	r3, #5
 8006902:	d03a      	beq.n	800697a <UART_SetConfig+0xb3a>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	2b06      	cmp	r3, #6
 800690a:	d031      	beq.n	8006970 <UART_SetConfig+0xb30>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	2b07      	cmp	r3, #7
 8006912:	d028      	beq.n	8006966 <UART_SetConfig+0xb26>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	2b08      	cmp	r3, #8
 800691a:	d01f      	beq.n	800695c <UART_SetConfig+0xb1c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	2b09      	cmp	r3, #9
 8006922:	d016      	beq.n	8006952 <UART_SetConfig+0xb12>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	2b0a      	cmp	r3, #10
 800692a:	d00d      	beq.n	8006948 <UART_SetConfig+0xb08>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	2b0b      	cmp	r3, #11
 8006932:	d104      	bne.n	800693e <UART_SetConfig+0xafe>
 8006934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006938:	f04f 0400 	mov.w	r4, #0
 800693c:	e03a      	b.n	80069b4 <UART_SetConfig+0xb74>
 800693e:	f04f 0301 	mov.w	r3, #1
 8006942:	f04f 0400 	mov.w	r4, #0
 8006946:	e035      	b.n	80069b4 <UART_SetConfig+0xb74>
 8006948:	f04f 0380 	mov.w	r3, #128	; 0x80
 800694c:	f04f 0400 	mov.w	r4, #0
 8006950:	e030      	b.n	80069b4 <UART_SetConfig+0xb74>
 8006952:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006956:	f04f 0400 	mov.w	r4, #0
 800695a:	e02b      	b.n	80069b4 <UART_SetConfig+0xb74>
 800695c:	f04f 0320 	mov.w	r3, #32
 8006960:	f04f 0400 	mov.w	r4, #0
 8006964:	e026      	b.n	80069b4 <UART_SetConfig+0xb74>
 8006966:	f04f 0310 	mov.w	r3, #16
 800696a:	f04f 0400 	mov.w	r4, #0
 800696e:	e021      	b.n	80069b4 <UART_SetConfig+0xb74>
 8006970:	f04f 030c 	mov.w	r3, #12
 8006974:	f04f 0400 	mov.w	r4, #0
 8006978:	e01c      	b.n	80069b4 <UART_SetConfig+0xb74>
 800697a:	f04f 030a 	mov.w	r3, #10
 800697e:	f04f 0400 	mov.w	r4, #0
 8006982:	e017      	b.n	80069b4 <UART_SetConfig+0xb74>
 8006984:	f04f 0308 	mov.w	r3, #8
 8006988:	f04f 0400 	mov.w	r4, #0
 800698c:	e012      	b.n	80069b4 <UART_SetConfig+0xb74>
 800698e:	f04f 0306 	mov.w	r3, #6
 8006992:	f04f 0400 	mov.w	r4, #0
 8006996:	e00d      	b.n	80069b4 <UART_SetConfig+0xb74>
 8006998:	f04f 0304 	mov.w	r3, #4
 800699c:	f04f 0400 	mov.w	r4, #0
 80069a0:	e008      	b.n	80069b4 <UART_SetConfig+0xb74>
 80069a2:	f04f 0302 	mov.w	r3, #2
 80069a6:	f04f 0400 	mov.w	r4, #0
 80069aa:	e003      	b.n	80069b4 <UART_SetConfig+0xb74>
 80069ac:	f04f 0301 	mov.w	r3, #1
 80069b0:	f04f 0400 	mov.w	r4, #0
 80069b4:	461a      	mov	r2, r3
 80069b6:	4623      	mov	r3, r4
 80069b8:	f7f9 fc46 	bl	8000248 <__aeabi_uldivmod>
 80069bc:	4603      	mov	r3, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	4619      	mov	r1, r3
 80069c2:	4622      	mov	r2, r4
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	f04f 0400 	mov.w	r4, #0
 80069cc:	0214      	lsls	r4, r2, #8
 80069ce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80069d2:	020b      	lsls	r3, r1, #8
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6852      	ldr	r2, [r2, #4]
 80069d8:	0852      	lsrs	r2, r2, #1
 80069da:	4611      	mov	r1, r2
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	eb13 0b01 	adds.w	fp, r3, r1
 80069e4:	eb44 0c02 	adc.w	ip, r4, r2
 80069e8:	4658      	mov	r0, fp
 80069ea:	4661      	mov	r1, ip
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f04f 0400 	mov.w	r4, #0
 80069f4:	461a      	mov	r2, r3
 80069f6:	4623      	mov	r3, r4
 80069f8:	f7f9 fc26 	bl	8000248 <__aeabi_uldivmod>
 80069fc:	4603      	mov	r3, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	61fb      	str	r3, [r7, #28]
            break;
 8006a02:	e0aa      	b.n	8006b5a <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8087 	beq.w	8006b1c <UART_SetConfig+0xcdc>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d05b      	beq.n	8006ace <UART_SetConfig+0xc8e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d052      	beq.n	8006ac4 <UART_SetConfig+0xc84>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d04a      	beq.n	8006abc <UART_SetConfig+0xc7c>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d041      	beq.n	8006ab2 <UART_SetConfig+0xc72>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d039      	beq.n	8006aaa <UART_SetConfig+0xc6a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	2b06      	cmp	r3, #6
 8006a3c:	d031      	beq.n	8006aa2 <UART_SetConfig+0xc62>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	2b07      	cmp	r3, #7
 8006a44:	d028      	beq.n	8006a98 <UART_SetConfig+0xc58>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d01f      	beq.n	8006a8e <UART_SetConfig+0xc4e>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	2b09      	cmp	r3, #9
 8006a54:	d016      	beq.n	8006a84 <UART_SetConfig+0xc44>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	2b0a      	cmp	r3, #10
 8006a5c:	d00d      	beq.n	8006a7a <UART_SetConfig+0xc3a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b0b      	cmp	r3, #11
 8006a64:	d104      	bne.n	8006a70 <UART_SetConfig+0xc30>
 8006a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6a:	f04f 0400 	mov.w	r4, #0
 8006a6e:	e059      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006a70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006a74:	f04f 0400 	mov.w	r4, #0
 8006a78:	e054      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a7e:	f04f 0400 	mov.w	r4, #0
 8006a82:	e04f      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a88:	f04f 0400 	mov.w	r4, #0
 8006a8c:	e04a      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006a8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006a92:	f04f 0400 	mov.w	r4, #0
 8006a96:	e045      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006a98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006a9c:	f04f 0400 	mov.w	r4, #0
 8006aa0:	e040      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	; (8006b10 <UART_SetConfig+0xcd0>)
 8006aa4:	f04f 0400 	mov.w	r4, #0
 8006aa8:	e03c      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	; (8006b14 <UART_SetConfig+0xcd4>)
 8006aac:	f04f 0400 	mov.w	r4, #0
 8006ab0:	e038      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006ab2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ab6:	f04f 0400 	mov.w	r4, #0
 8006aba:	e033      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006abc:	4b16      	ldr	r3, [pc, #88]	; (8006b18 <UART_SetConfig+0xcd8>)
 8006abe:	f04f 0400 	mov.w	r4, #0
 8006ac2:	e02f      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006ac4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ac8:	f04f 0400 	mov.w	r4, #0
 8006acc:	e02a      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ad2:	f04f 0400 	mov.w	r4, #0
 8006ad6:	e025      	b.n	8006b24 <UART_SetConfig+0xce4>
 8006ad8:	14585500 	.word	0x14585500
 8006adc:	00000000 	.word	0x00000000
 8006ae0:	28b0aa00 	.word	0x28b0aa00
 8006ae4:	00000000 	.word	0x00000000
 8006ae8:	00f42400 	.word	0x00f42400
 8006aec:	f4240000 	.word	0xf4240000
 8006af0:	01e84800 	.word	0x01e84800
 8006af4:	03d09000 	.word	0x03d09000
 8006af8:	07a12000 	.word	0x07a12000
 8006afc:	0f424000 	.word	0x0f424000
 8006b00:	186a0000 	.word	0x186a0000
 8006b04:	1e848000 	.word	0x1e848000
 8006b08:	3d090000 	.word	0x3d090000
 8006b0c:	7a120000 	.word	0x7a120000
 8006b10:	000aaa00 	.word	0x000aaa00
 8006b14:	000ccc00 	.word	0x000ccc00
 8006b18:	00155500 	.word	0x00155500
 8006b1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006b20:	f04f 0400 	mov.w	r4, #0
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6852      	ldr	r2, [r2, #4]
 8006b28:	0852      	lsrs	r2, r2, #1
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	eb13 0b01 	adds.w	fp, r3, r1
 8006b34:	eb44 0c02 	adc.w	ip, r4, r2
 8006b38:	4658      	mov	r0, fp
 8006b3a:	4661      	mov	r1, ip
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f04f 0400 	mov.w	r4, #0
 8006b44:	461a      	mov	r2, r3
 8006b46:	4623      	mov	r3, r4
 8006b48:	f7f9 fb7e 	bl	8000248 <__aeabi_uldivmod>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	61fb      	str	r3, [r7, #28]
            break;
 8006b52:	e002      	b.n	8006b5a <UART_SetConfig+0xd1a>
          default:
            ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	76fb      	strb	r3, [r7, #27]
            break;
 8006b58:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b60:	d309      	bcc.n	8006b76 <UART_SetConfig+0xd36>
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b68:	d205      	bcs.n	8006b76 <UART_SetConfig+0xd36>
        {
          huart->Instance->BRR = usartdiv;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	60da      	str	r2, [r3, #12]
 8006b72:	f000 bc18 	b.w	80073a6 <UART_SetConfig+0x1566>
        }
        else
        {
          ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	76fb      	strb	r3, [r7, #27]
 8006b7a:	f000 bc14 	b.w	80073a6 <UART_SetConfig+0x1566>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b86:	f040 8204 	bne.w	8006f92 <UART_SetConfig+0x1152>
  {
    switch (clocksource)
 8006b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	f200 81df 	bhi.w	8006f52 <UART_SetConfig+0x1112>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <UART_SetConfig+0xd5c>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bc1 	.word	0x08006bc1
 8006ba0:	08006c79 	.word	0x08006c79
 8006ba4:	08006d31 	.word	0x08006d31
 8006ba8:	08006f53 	.word	0x08006f53
 8006bac:	08006dd9 	.word	0x08006dd9
 8006bb0:	08006f53 	.word	0x08006f53
 8006bb4:	08006f53 	.word	0x08006f53
 8006bb8:	08006f53 	.word	0x08006f53
 8006bbc:	08006e91 	.word	0x08006e91
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc0:	f7fd fdee 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8006bc4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d044      	beq.n	8006c58 <UART_SetConfig+0xe18>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d03e      	beq.n	8006c54 <UART_SetConfig+0xe14>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d038      	beq.n	8006c50 <UART_SetConfig+0xe10>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d032      	beq.n	8006c4c <UART_SetConfig+0xe0c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	2b04      	cmp	r3, #4
 8006bec:	d02c      	beq.n	8006c48 <UART_SetConfig+0xe08>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	2b05      	cmp	r3, #5
 8006bf4:	d026      	beq.n	8006c44 <UART_SetConfig+0xe04>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	2b06      	cmp	r3, #6
 8006bfc:	d020      	beq.n	8006c40 <UART_SetConfig+0xe00>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	2b07      	cmp	r3, #7
 8006c04:	d01a      	beq.n	8006c3c <UART_SetConfig+0xdfc>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d014      	beq.n	8006c38 <UART_SetConfig+0xdf8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	2b09      	cmp	r3, #9
 8006c14:	d00e      	beq.n	8006c34 <UART_SetConfig+0xdf4>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	2b0a      	cmp	r3, #10
 8006c1c:	d008      	beq.n	8006c30 <UART_SetConfig+0xdf0>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	2b0b      	cmp	r3, #11
 8006c24:	d102      	bne.n	8006c2c <UART_SetConfig+0xdec>
 8006c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c2a:	e016      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e014      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c30:	2380      	movs	r3, #128	; 0x80
 8006c32:	e012      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c34:	2340      	movs	r3, #64	; 0x40
 8006c36:	e010      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c38:	2320      	movs	r3, #32
 8006c3a:	e00e      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	e00c      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c40:	230c      	movs	r3, #12
 8006c42:	e00a      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c44:	230a      	movs	r3, #10
 8006c46:	e008      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c48:	2308      	movs	r3, #8
 8006c4a:	e006      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c4c:	2306      	movs	r3, #6
 8006c4e:	e004      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c50:	2304      	movs	r3, #4
 8006c52:	e002      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e000      	b.n	8006c5a <UART_SetConfig+0xe1a>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c60:	005a      	lsls	r2, r3, #1
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	441a      	add	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	61fb      	str	r3, [r7, #28]
        break;
 8006c76:	e16f      	b.n	8006f58 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c78:	f7fd fda6 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 8006c7c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d044      	beq.n	8006d10 <UART_SetConfig+0xed0>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d03e      	beq.n	8006d0c <UART_SetConfig+0xecc>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d038      	beq.n	8006d08 <UART_SetConfig+0xec8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d032      	beq.n	8006d04 <UART_SetConfig+0xec4>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d02c      	beq.n	8006d00 <UART_SetConfig+0xec0>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	d026      	beq.n	8006cfc <UART_SetConfig+0xebc>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	2b06      	cmp	r3, #6
 8006cb4:	d020      	beq.n	8006cf8 <UART_SetConfig+0xeb8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	2b07      	cmp	r3, #7
 8006cbc:	d01a      	beq.n	8006cf4 <UART_SetConfig+0xeb4>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	d014      	beq.n	8006cf0 <UART_SetConfig+0xeb0>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	2b09      	cmp	r3, #9
 8006ccc:	d00e      	beq.n	8006cec <UART_SetConfig+0xeac>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	2b0a      	cmp	r3, #10
 8006cd4:	d008      	beq.n	8006ce8 <UART_SetConfig+0xea8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	2b0b      	cmp	r3, #11
 8006cdc:	d102      	bne.n	8006ce4 <UART_SetConfig+0xea4>
 8006cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ce2:	e016      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e014      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	e012      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006cec:	2340      	movs	r3, #64	; 0x40
 8006cee:	e010      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	e00e      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	e00c      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006cf8:	230c      	movs	r3, #12
 8006cfa:	e00a      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006cfc:	230a      	movs	r3, #10
 8006cfe:	e008      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006d00:	2308      	movs	r3, #8
 8006d02:	e006      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006d04:	2306      	movs	r3, #6
 8006d06:	e004      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006d08:	2304      	movs	r3, #4
 8006d0a:	e002      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e000      	b.n	8006d12 <UART_SetConfig+0xed2>
 8006d10:	2301      	movs	r3, #1
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	005a      	lsls	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	441a      	add	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	61fb      	str	r3, [r7, #28]
        break;
 8006d2e:	e113      	b.n	8006f58 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d043      	beq.n	8006dc0 <UART_SetConfig+0xf80>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d03d      	beq.n	8006dbc <UART_SetConfig+0xf7c>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d037      	beq.n	8006db8 <UART_SetConfig+0xf78>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d031      	beq.n	8006db4 <UART_SetConfig+0xf74>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d02b      	beq.n	8006db0 <UART_SetConfig+0xf70>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	2b05      	cmp	r3, #5
 8006d5e:	d025      	beq.n	8006dac <UART_SetConfig+0xf6c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	2b06      	cmp	r3, #6
 8006d66:	d01f      	beq.n	8006da8 <UART_SetConfig+0xf68>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b07      	cmp	r3, #7
 8006d6e:	d019      	beq.n	8006da4 <UART_SetConfig+0xf64>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d013      	beq.n	8006da0 <UART_SetConfig+0xf60>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b09      	cmp	r3, #9
 8006d7e:	d00d      	beq.n	8006d9c <UART_SetConfig+0xf5c>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	2b0a      	cmp	r3, #10
 8006d86:	d007      	beq.n	8006d98 <UART_SetConfig+0xf58>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	2b0b      	cmp	r3, #11
 8006d8e:	d101      	bne.n	8006d94 <UART_SetConfig+0xf54>
 8006d90:	4b8d      	ldr	r3, [pc, #564]	; (8006fc8 <UART_SetConfig+0x1188>)
 8006d92:	e016      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006d94:	4b8d      	ldr	r3, [pc, #564]	; (8006fcc <UART_SetConfig+0x118c>)
 8006d96:	e014      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006d98:	4b8d      	ldr	r3, [pc, #564]	; (8006fd0 <UART_SetConfig+0x1190>)
 8006d9a:	e012      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006d9c:	4b8d      	ldr	r3, [pc, #564]	; (8006fd4 <UART_SetConfig+0x1194>)
 8006d9e:	e010      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006da0:	4b8d      	ldr	r3, [pc, #564]	; (8006fd8 <UART_SetConfig+0x1198>)
 8006da2:	e00e      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006da4:	4b8d      	ldr	r3, [pc, #564]	; (8006fdc <UART_SetConfig+0x119c>)
 8006da6:	e00c      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006da8:	4b8d      	ldr	r3, [pc, #564]	; (8006fe0 <UART_SetConfig+0x11a0>)
 8006daa:	e00a      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006dac:	4b8d      	ldr	r3, [pc, #564]	; (8006fe4 <UART_SetConfig+0x11a4>)
 8006dae:	e008      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006db0:	4b8d      	ldr	r3, [pc, #564]	; (8006fe8 <UART_SetConfig+0x11a8>)
 8006db2:	e006      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006db4:	4b8d      	ldr	r3, [pc, #564]	; (8006fec <UART_SetConfig+0x11ac>)
 8006db6:	e004      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006db8:	4b8d      	ldr	r3, [pc, #564]	; (8006ff0 <UART_SetConfig+0x11b0>)
 8006dba:	e002      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006dbc:	4b8d      	ldr	r3, [pc, #564]	; (8006ff4 <UART_SetConfig+0x11b4>)
 8006dbe:	e000      	b.n	8006dc2 <UART_SetConfig+0xf82>
 8006dc0:	4b82      	ldr	r3, [pc, #520]	; (8006fcc <UART_SetConfig+0x118c>)
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6852      	ldr	r2, [r2, #4]
 8006dc6:	0852      	lsrs	r2, r2, #1
 8006dc8:	441a      	add	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	61fb      	str	r3, [r7, #28]
        break;
 8006dd6:	e0bf      	b.n	8006f58 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dd8:	f7fd fc3c 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8006ddc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d044      	beq.n	8006e70 <UART_SetConfig+0x1030>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d03e      	beq.n	8006e6c <UART_SetConfig+0x102c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d038      	beq.n	8006e68 <UART_SetConfig+0x1028>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d032      	beq.n	8006e64 <UART_SetConfig+0x1024>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d02c      	beq.n	8006e60 <UART_SetConfig+0x1020>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b05      	cmp	r3, #5
 8006e0c:	d026      	beq.n	8006e5c <UART_SetConfig+0x101c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	2b06      	cmp	r3, #6
 8006e14:	d020      	beq.n	8006e58 <UART_SetConfig+0x1018>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b07      	cmp	r3, #7
 8006e1c:	d01a      	beq.n	8006e54 <UART_SetConfig+0x1014>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d014      	beq.n	8006e50 <UART_SetConfig+0x1010>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	2b09      	cmp	r3, #9
 8006e2c:	d00e      	beq.n	8006e4c <UART_SetConfig+0x100c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	2b0a      	cmp	r3, #10
 8006e34:	d008      	beq.n	8006e48 <UART_SetConfig+0x1008>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	2b0b      	cmp	r3, #11
 8006e3c:	d102      	bne.n	8006e44 <UART_SetConfig+0x1004>
 8006e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e42:	e016      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e014      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e48:	2380      	movs	r3, #128	; 0x80
 8006e4a:	e012      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	e010      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e50:	2320      	movs	r3, #32
 8006e52:	e00e      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e54:	2310      	movs	r3, #16
 8006e56:	e00c      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	e00a      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e5c:	230a      	movs	r3, #10
 8006e5e:	e008      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e60:	2308      	movs	r3, #8
 8006e62:	e006      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e64:	2306      	movs	r3, #6
 8006e66:	e004      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e68:	2304      	movs	r3, #4
 8006e6a:	e002      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e000      	b.n	8006e72 <UART_SetConfig+0x1032>
 8006e70:	2301      	movs	r3, #1
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e78:	005a      	lsls	r2, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	441a      	add	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	61fb      	str	r3, [r7, #28]
        break;
 8006e8e:	e063      	b.n	8006f58 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d04f      	beq.n	8006f38 <UART_SetConfig+0x10f8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d048      	beq.n	8006f32 <UART_SetConfig+0x10f2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d041      	beq.n	8006f2c <UART_SetConfig+0x10ec>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d03a      	beq.n	8006f26 <UART_SetConfig+0x10e6>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d033      	beq.n	8006f20 <UART_SetConfig+0x10e0>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	2b05      	cmp	r3, #5
 8006ebe:	d02c      	beq.n	8006f1a <UART_SetConfig+0x10da>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	2b06      	cmp	r3, #6
 8006ec6:	d025      	beq.n	8006f14 <UART_SetConfig+0x10d4>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	2b07      	cmp	r3, #7
 8006ece:	d01e      	beq.n	8006f0e <UART_SetConfig+0x10ce>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d017      	beq.n	8006f08 <UART_SetConfig+0x10c8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	2b09      	cmp	r3, #9
 8006ede:	d010      	beq.n	8006f02 <UART_SetConfig+0x10c2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	2b0a      	cmp	r3, #10
 8006ee6:	d009      	beq.n	8006efc <UART_SetConfig+0x10bc>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	2b0b      	cmp	r3, #11
 8006eee:	d102      	bne.n	8006ef6 <UART_SetConfig+0x10b6>
 8006ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ef4:	e022      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006efa:	e01f      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f00:	e01c      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f06:	e019      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006f08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f0c:	e016      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f12:	e013      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006f14:	f241 5354 	movw	r3, #5460	; 0x1554
 8006f18:	e010      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006f1a:	f641 1398 	movw	r3, #6552	; 0x1998
 8006f1e:	e00d      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f24:	e00a      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006f26:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006f2a:	e007      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006f2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f30:	e004      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f36:	e001      	b.n	8006f3c <UART_SetConfig+0x10fc>
 8006f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6852      	ldr	r2, [r2, #4]
 8006f40:	0852      	lsrs	r2, r2, #1
 8006f42:	441a      	add	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	61fb      	str	r3, [r7, #28]
        break;
 8006f50:	e002      	b.n	8006f58 <UART_SetConfig+0x1118>
      default:
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	76fb      	strb	r3, [r7, #27]
        break;
 8006f56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	2b0f      	cmp	r3, #15
 8006f5c:	d916      	bls.n	8006f8c <UART_SetConfig+0x114c>
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f64:	d212      	bcs.n	8006f8c <UART_SetConfig+0x114c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f023 030f 	bic.w	r3, r3, #15
 8006f6e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	89fa      	ldrh	r2, [r7, #14]
 8006f88:	60da      	str	r2, [r3, #12]
 8006f8a:	e20c      	b.n	80073a6 <UART_SetConfig+0x1566>
    }
    else
    {
      ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	76fb      	strb	r3, [r7, #27]
 8006f90:	e209      	b.n	80073a6 <UART_SetConfig+0x1566>
    }
  }
  else
  {
    switch (clocksource)
 8006f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	f200 81f4 	bhi.w	8007384 <UART_SetConfig+0x1544>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <UART_SetConfig+0x1164>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006ff9 	.word	0x08006ff9
 8006fa8:	080070af 	.word	0x080070af
 8006fac:	08007165 	.word	0x08007165
 8006fb0:	08007385 	.word	0x08007385
 8006fb4:	0800720f 	.word	0x0800720f
 8006fb8:	08007385 	.word	0x08007385
 8006fbc:	08007385 	.word	0x08007385
 8006fc0:	08007385 	.word	0x08007385
 8006fc4:	080072c5 	.word	0x080072c5
 8006fc8:	0001e848 	.word	0x0001e848
 8006fcc:	01e84800 	.word	0x01e84800
 8006fd0:	0003d090 	.word	0x0003d090
 8006fd4:	0007a120 	.word	0x0007a120
 8006fd8:	000f4240 	.word	0x000f4240
 8006fdc:	001e8480 	.word	0x001e8480
 8006fe0:	0028b0aa 	.word	0x0028b0aa
 8006fe4:	0030d400 	.word	0x0030d400
 8006fe8:	003d0900 	.word	0x003d0900
 8006fec:	00516154 	.word	0x00516154
 8006ff0:	007a1200 	.word	0x007a1200
 8006ff4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff8:	f7fd fbd2 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8006ffc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	2b00      	cmp	r3, #0
 8007004:	d044      	beq.n	8007090 <UART_SetConfig+0x1250>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	2b01      	cmp	r3, #1
 800700c:	d03e      	beq.n	800708c <UART_SetConfig+0x124c>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	2b02      	cmp	r3, #2
 8007014:	d038      	beq.n	8007088 <UART_SetConfig+0x1248>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	2b03      	cmp	r3, #3
 800701c:	d032      	beq.n	8007084 <UART_SetConfig+0x1244>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	2b04      	cmp	r3, #4
 8007024:	d02c      	beq.n	8007080 <UART_SetConfig+0x1240>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	2b05      	cmp	r3, #5
 800702c:	d026      	beq.n	800707c <UART_SetConfig+0x123c>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b06      	cmp	r3, #6
 8007034:	d020      	beq.n	8007078 <UART_SetConfig+0x1238>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	2b07      	cmp	r3, #7
 800703c:	d01a      	beq.n	8007074 <UART_SetConfig+0x1234>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	2b08      	cmp	r3, #8
 8007044:	d014      	beq.n	8007070 <UART_SetConfig+0x1230>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	2b09      	cmp	r3, #9
 800704c:	d00e      	beq.n	800706c <UART_SetConfig+0x122c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	2b0a      	cmp	r3, #10
 8007054:	d008      	beq.n	8007068 <UART_SetConfig+0x1228>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b0b      	cmp	r3, #11
 800705c:	d102      	bne.n	8007064 <UART_SetConfig+0x1224>
 800705e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007062:	e016      	b.n	8007092 <UART_SetConfig+0x1252>
 8007064:	2301      	movs	r3, #1
 8007066:	e014      	b.n	8007092 <UART_SetConfig+0x1252>
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	e012      	b.n	8007092 <UART_SetConfig+0x1252>
 800706c:	2340      	movs	r3, #64	; 0x40
 800706e:	e010      	b.n	8007092 <UART_SetConfig+0x1252>
 8007070:	2320      	movs	r3, #32
 8007072:	e00e      	b.n	8007092 <UART_SetConfig+0x1252>
 8007074:	2310      	movs	r3, #16
 8007076:	e00c      	b.n	8007092 <UART_SetConfig+0x1252>
 8007078:	230c      	movs	r3, #12
 800707a:	e00a      	b.n	8007092 <UART_SetConfig+0x1252>
 800707c:	230a      	movs	r3, #10
 800707e:	e008      	b.n	8007092 <UART_SetConfig+0x1252>
 8007080:	2308      	movs	r3, #8
 8007082:	e006      	b.n	8007092 <UART_SetConfig+0x1252>
 8007084:	2306      	movs	r3, #6
 8007086:	e004      	b.n	8007092 <UART_SetConfig+0x1252>
 8007088:	2304      	movs	r3, #4
 800708a:	e002      	b.n	8007092 <UART_SetConfig+0x1252>
 800708c:	2302      	movs	r3, #2
 800708e:	e000      	b.n	8007092 <UART_SetConfig+0x1252>
 8007090:	2301      	movs	r3, #1
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	fbb2 f2f3 	udiv	r2, r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	441a      	add	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	61fb      	str	r3, [r7, #28]
        break;
 80070ac:	e16d      	b.n	800738a <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070ae:	f7fd fb8b 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 80070b2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d044      	beq.n	8007146 <UART_SetConfig+0x1306>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d03e      	beq.n	8007142 <UART_SetConfig+0x1302>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d038      	beq.n	800713e <UART_SetConfig+0x12fe>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d032      	beq.n	800713a <UART_SetConfig+0x12fa>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d02c      	beq.n	8007136 <UART_SetConfig+0x12f6>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	2b05      	cmp	r3, #5
 80070e2:	d026      	beq.n	8007132 <UART_SetConfig+0x12f2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b06      	cmp	r3, #6
 80070ea:	d020      	beq.n	800712e <UART_SetConfig+0x12ee>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b07      	cmp	r3, #7
 80070f2:	d01a      	beq.n	800712a <UART_SetConfig+0x12ea>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d014      	beq.n	8007126 <UART_SetConfig+0x12e6>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	2b09      	cmp	r3, #9
 8007102:	d00e      	beq.n	8007122 <UART_SetConfig+0x12e2>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2b0a      	cmp	r3, #10
 800710a:	d008      	beq.n	800711e <UART_SetConfig+0x12de>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b0b      	cmp	r3, #11
 8007112:	d102      	bne.n	800711a <UART_SetConfig+0x12da>
 8007114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007118:	e016      	b.n	8007148 <UART_SetConfig+0x1308>
 800711a:	2301      	movs	r3, #1
 800711c:	e014      	b.n	8007148 <UART_SetConfig+0x1308>
 800711e:	2380      	movs	r3, #128	; 0x80
 8007120:	e012      	b.n	8007148 <UART_SetConfig+0x1308>
 8007122:	2340      	movs	r3, #64	; 0x40
 8007124:	e010      	b.n	8007148 <UART_SetConfig+0x1308>
 8007126:	2320      	movs	r3, #32
 8007128:	e00e      	b.n	8007148 <UART_SetConfig+0x1308>
 800712a:	2310      	movs	r3, #16
 800712c:	e00c      	b.n	8007148 <UART_SetConfig+0x1308>
 800712e:	230c      	movs	r3, #12
 8007130:	e00a      	b.n	8007148 <UART_SetConfig+0x1308>
 8007132:	230a      	movs	r3, #10
 8007134:	e008      	b.n	8007148 <UART_SetConfig+0x1308>
 8007136:	2308      	movs	r3, #8
 8007138:	e006      	b.n	8007148 <UART_SetConfig+0x1308>
 800713a:	2306      	movs	r3, #6
 800713c:	e004      	b.n	8007148 <UART_SetConfig+0x1308>
 800713e:	2304      	movs	r3, #4
 8007140:	e002      	b.n	8007148 <UART_SetConfig+0x1308>
 8007142:	2302      	movs	r3, #2
 8007144:	e000      	b.n	8007148 <UART_SetConfig+0x1308>
 8007146:	2301      	movs	r3, #1
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	fbb2 f2f3 	udiv	r2, r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	441a      	add	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	fbb2 f3f3 	udiv	r3, r2, r3
 800715e:	b29b      	uxth	r3, r3
 8007160:	61fb      	str	r3, [r7, #28]
        break;
 8007162:	e112      	b.n	800738a <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	2b00      	cmp	r3, #0
 800716a:	d044      	beq.n	80071f6 <UART_SetConfig+0x13b6>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	2b01      	cmp	r3, #1
 8007172:	d03e      	beq.n	80071f2 <UART_SetConfig+0x13b2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	2b02      	cmp	r3, #2
 800717a:	d038      	beq.n	80071ee <UART_SetConfig+0x13ae>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	2b03      	cmp	r3, #3
 8007182:	d032      	beq.n	80071ea <UART_SetConfig+0x13aa>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	2b04      	cmp	r3, #4
 800718a:	d02c      	beq.n	80071e6 <UART_SetConfig+0x13a6>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	2b05      	cmp	r3, #5
 8007192:	d026      	beq.n	80071e2 <UART_SetConfig+0x13a2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	2b06      	cmp	r3, #6
 800719a:	d020      	beq.n	80071de <UART_SetConfig+0x139e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	2b07      	cmp	r3, #7
 80071a2:	d01a      	beq.n	80071da <UART_SetConfig+0x139a>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d014      	beq.n	80071d6 <UART_SetConfig+0x1396>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	2b09      	cmp	r3, #9
 80071b2:	d00e      	beq.n	80071d2 <UART_SetConfig+0x1392>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	2b0a      	cmp	r3, #10
 80071ba:	d008      	beq.n	80071ce <UART_SetConfig+0x138e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	2b0b      	cmp	r3, #11
 80071c2:	d102      	bne.n	80071ca <UART_SetConfig+0x138a>
 80071c4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80071c8:	e016      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071ca:	4b81      	ldr	r3, [pc, #516]	; (80073d0 <UART_SetConfig+0x1590>)
 80071cc:	e014      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071ce:	4b81      	ldr	r3, [pc, #516]	; (80073d4 <UART_SetConfig+0x1594>)
 80071d0:	e012      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071d2:	4b81      	ldr	r3, [pc, #516]	; (80073d8 <UART_SetConfig+0x1598>)
 80071d4:	e010      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071d6:	4b81      	ldr	r3, [pc, #516]	; (80073dc <UART_SetConfig+0x159c>)
 80071d8:	e00e      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071da:	4b81      	ldr	r3, [pc, #516]	; (80073e0 <UART_SetConfig+0x15a0>)
 80071dc:	e00c      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071de:	4b81      	ldr	r3, [pc, #516]	; (80073e4 <UART_SetConfig+0x15a4>)
 80071e0:	e00a      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071e2:	4b81      	ldr	r3, [pc, #516]	; (80073e8 <UART_SetConfig+0x15a8>)
 80071e4:	e008      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071e6:	4b81      	ldr	r3, [pc, #516]	; (80073ec <UART_SetConfig+0x15ac>)
 80071e8:	e006      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071ea:	4b81      	ldr	r3, [pc, #516]	; (80073f0 <UART_SetConfig+0x15b0>)
 80071ec:	e004      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071ee:	4b81      	ldr	r3, [pc, #516]	; (80073f4 <UART_SetConfig+0x15b4>)
 80071f0:	e002      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071f2:	4b81      	ldr	r3, [pc, #516]	; (80073f8 <UART_SetConfig+0x15b8>)
 80071f4:	e000      	b.n	80071f8 <UART_SetConfig+0x13b8>
 80071f6:	4b76      	ldr	r3, [pc, #472]	; (80073d0 <UART_SetConfig+0x1590>)
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6852      	ldr	r2, [r2, #4]
 80071fc:	0852      	lsrs	r2, r2, #1
 80071fe:	441a      	add	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	b29b      	uxth	r3, r3
 800720a:	61fb      	str	r3, [r7, #28]
        break;
 800720c:	e0bd      	b.n	800738a <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720e:	f7fd fa21 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8007212:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	d044      	beq.n	80072a6 <UART_SetConfig+0x1466>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	2b01      	cmp	r3, #1
 8007222:	d03e      	beq.n	80072a2 <UART_SetConfig+0x1462>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	2b02      	cmp	r3, #2
 800722a:	d038      	beq.n	800729e <UART_SetConfig+0x145e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2b03      	cmp	r3, #3
 8007232:	d032      	beq.n	800729a <UART_SetConfig+0x145a>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	2b04      	cmp	r3, #4
 800723a:	d02c      	beq.n	8007296 <UART_SetConfig+0x1456>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	2b05      	cmp	r3, #5
 8007242:	d026      	beq.n	8007292 <UART_SetConfig+0x1452>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	2b06      	cmp	r3, #6
 800724a:	d020      	beq.n	800728e <UART_SetConfig+0x144e>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	2b07      	cmp	r3, #7
 8007252:	d01a      	beq.n	800728a <UART_SetConfig+0x144a>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	2b08      	cmp	r3, #8
 800725a:	d014      	beq.n	8007286 <UART_SetConfig+0x1446>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	2b09      	cmp	r3, #9
 8007262:	d00e      	beq.n	8007282 <UART_SetConfig+0x1442>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	2b0a      	cmp	r3, #10
 800726a:	d008      	beq.n	800727e <UART_SetConfig+0x143e>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2b0b      	cmp	r3, #11
 8007272:	d102      	bne.n	800727a <UART_SetConfig+0x143a>
 8007274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007278:	e016      	b.n	80072a8 <UART_SetConfig+0x1468>
 800727a:	2301      	movs	r3, #1
 800727c:	e014      	b.n	80072a8 <UART_SetConfig+0x1468>
 800727e:	2380      	movs	r3, #128	; 0x80
 8007280:	e012      	b.n	80072a8 <UART_SetConfig+0x1468>
 8007282:	2340      	movs	r3, #64	; 0x40
 8007284:	e010      	b.n	80072a8 <UART_SetConfig+0x1468>
 8007286:	2320      	movs	r3, #32
 8007288:	e00e      	b.n	80072a8 <UART_SetConfig+0x1468>
 800728a:	2310      	movs	r3, #16
 800728c:	e00c      	b.n	80072a8 <UART_SetConfig+0x1468>
 800728e:	230c      	movs	r3, #12
 8007290:	e00a      	b.n	80072a8 <UART_SetConfig+0x1468>
 8007292:	230a      	movs	r3, #10
 8007294:	e008      	b.n	80072a8 <UART_SetConfig+0x1468>
 8007296:	2308      	movs	r3, #8
 8007298:	e006      	b.n	80072a8 <UART_SetConfig+0x1468>
 800729a:	2306      	movs	r3, #6
 800729c:	e004      	b.n	80072a8 <UART_SetConfig+0x1468>
 800729e:	2304      	movs	r3, #4
 80072a0:	e002      	b.n	80072a8 <UART_SetConfig+0x1468>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e000      	b.n	80072a8 <UART_SetConfig+0x1468>
 80072a6:	2301      	movs	r3, #1
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	441a      	add	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80072be:	b29b      	uxth	r3, r3
 80072c0:	61fb      	str	r3, [r7, #28]
        break;
 80072c2:	e062      	b.n	800738a <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d04e      	beq.n	800736a <UART_SetConfig+0x152a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d047      	beq.n	8007364 <UART_SetConfig+0x1524>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d040      	beq.n	800735e <UART_SetConfig+0x151e>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d039      	beq.n	8007358 <UART_SetConfig+0x1518>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d032      	beq.n	8007352 <UART_SetConfig+0x1512>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	2b05      	cmp	r3, #5
 80072f2:	d02b      	beq.n	800734c <UART_SetConfig+0x150c>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	2b06      	cmp	r3, #6
 80072fa:	d024      	beq.n	8007346 <UART_SetConfig+0x1506>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	2b07      	cmp	r3, #7
 8007302:	d01d      	beq.n	8007340 <UART_SetConfig+0x1500>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b08      	cmp	r3, #8
 800730a:	d016      	beq.n	800733a <UART_SetConfig+0x14fa>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2b09      	cmp	r3, #9
 8007312:	d00f      	beq.n	8007334 <UART_SetConfig+0x14f4>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	2b0a      	cmp	r3, #10
 800731a:	d008      	beq.n	800732e <UART_SetConfig+0x14ee>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	2b0b      	cmp	r3, #11
 8007322:	d101      	bne.n	8007328 <UART_SetConfig+0x14e8>
 8007324:	2380      	movs	r3, #128	; 0x80
 8007326:	e022      	b.n	800736e <UART_SetConfig+0x152e>
 8007328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800732c:	e01f      	b.n	800736e <UART_SetConfig+0x152e>
 800732e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007332:	e01c      	b.n	800736e <UART_SetConfig+0x152e>
 8007334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007338:	e019      	b.n	800736e <UART_SetConfig+0x152e>
 800733a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800733e:	e016      	b.n	800736e <UART_SetConfig+0x152e>
 8007340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007344:	e013      	b.n	800736e <UART_SetConfig+0x152e>
 8007346:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800734a:	e010      	b.n	800736e <UART_SetConfig+0x152e>
 800734c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007350:	e00d      	b.n	800736e <UART_SetConfig+0x152e>
 8007352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007356:	e00a      	b.n	800736e <UART_SetConfig+0x152e>
 8007358:	f241 5355 	movw	r3, #5461	; 0x1555
 800735c:	e007      	b.n	800736e <UART_SetConfig+0x152e>
 800735e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007362:	e004      	b.n	800736e <UART_SetConfig+0x152e>
 8007364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007368:	e001      	b.n	800736e <UART_SetConfig+0x152e>
 800736a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6852      	ldr	r2, [r2, #4]
 8007372:	0852      	lsrs	r2, r2, #1
 8007374:	441a      	add	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	fbb2 f3f3 	udiv	r3, r2, r3
 800737e:	b29b      	uxth	r3, r3
 8007380:	61fb      	str	r3, [r7, #28]
        break;
 8007382:	e002      	b.n	800738a <UART_SetConfig+0x154a>
      default:
        ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	76fb      	strb	r3, [r7, #27]
        break;
 8007388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	2b0f      	cmp	r3, #15
 800738e:	d908      	bls.n	80073a2 <UART_SetConfig+0x1562>
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007396:	d204      	bcs.n	80073a2 <UART_SetConfig+0x1562>
    {
      huart->Instance->BRR = usartdiv;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	60da      	str	r2, [r3, #12]
 80073a0:	e001      	b.n	80073a6 <UART_SetConfig+0x1566>
    }
    else
    {
      ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80073c2:	7efb      	ldrb	r3, [r7, #27]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3728      	adds	r7, #40	; 0x28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80073ce:	bf00      	nop
 80073d0:	00f42400 	.word	0x00f42400
 80073d4:	0001e848 	.word	0x0001e848
 80073d8:	0003d090 	.word	0x0003d090
 80073dc:	0007a120 	.word	0x0007a120
 80073e0:	000f4240 	.word	0x000f4240
 80073e4:	00145855 	.word	0x00145855
 80073e8:	00186a00 	.word	0x00186a00
 80073ec:	001e8480 	.word	0x001e8480
 80073f0:	0028b0aa 	.word	0x0028b0aa
 80073f4:	003d0900 	.word	0x003d0900
 80073f8:	007a1200 	.word	0x007a1200

080073fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00a      	beq.n	8007426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00a      	beq.n	800746a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	f003 0308 	and.w	r3, r3, #8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007490:	f003 0310 	and.w	r3, r3, #16
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00a      	beq.n	80074ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	f003 0320 	and.w	r3, r3, #32
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01a      	beq.n	8007512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074fa:	d10a      	bne.n	8007512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	605a      	str	r2, [r3, #4]
  }
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af02      	add	r7, sp, #8
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007550:	f7fa f97e 	bl	8001850 <HAL_GetTick>
 8007554:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b08      	cmp	r3, #8
 8007562:	d10e      	bne.n	8007582 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f82c 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e022      	b.n	80075c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b04      	cmp	r3, #4
 800758e:	d10e      	bne.n	80075ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f816 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e00c      	b.n	80075c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e0:	e062      	b.n	80076a8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e8:	d05e      	beq.n	80076a8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ea:	f7fa f931 	bl	8001850 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <UART_WaitOnFlagUntilTimeout+0x30>
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d11d      	bne.n	800763c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800760e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0201 	bic.w	r2, r2, #1
 800761e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2220      	movs	r2, #32
 8007624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2220      	movs	r2, #32
 800762c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e045      	b.n	80076c8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	d02e      	beq.n	80076a8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007658:	d126      	bne.n	80076a8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007662:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007672:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0201 	bic.w	r2, r2, #1
 8007682:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e00f      	b.n	80076c8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69da      	ldr	r2, [r3, #28]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	4013      	ands	r3, r2
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	bf0c      	ite	eq
 80076b8:	2301      	moveq	r3, #1
 80076ba:	2300      	movne	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d08d      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e027      	b.n	8007736 <HAL_UARTEx_DisableFifoMode+0x66>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2224      	movs	r2, #36	; 0x24
 80076f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0201 	bic.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007714:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2220      	movs	r2, #32
 8007728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007756:	2302      	movs	r3, #2
 8007758:	e02d      	b.n	80077b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2224      	movs	r2, #36	; 0x24
 8007766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0201 	bic.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f850 	bl	800783c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e02d      	b.n	8007832 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2224      	movs	r2, #36	; 0x24
 80077e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0201 	bic.w	r2, r2, #1
 80077fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f812 	bl	800783c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800783c:	b480      	push	{r7}
 800783e:	b089      	sub	sp, #36	; 0x24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007844:	4a2f      	ldr	r2, [pc, #188]	; (8007904 <UARTEx_SetNbDataToProcess+0xc8>)
 8007846:	f107 0314 	add.w	r3, r7, #20
 800784a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800784e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007852:	4a2d      	ldr	r2, [pc, #180]	; (8007908 <UARTEx_SetNbDataToProcess+0xcc>)
 8007854:	f107 030c 	add.w	r3, r7, #12
 8007858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800785c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007864:	2b00      	cmp	r3, #0
 8007866:	d108      	bne.n	800787a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007878:	e03d      	b.n	80078f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800787a:	2308      	movs	r3, #8
 800787c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800787e:	2308      	movs	r3, #8
 8007880:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	0e5b      	lsrs	r3, r3, #25
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	0f5b      	lsrs	r3, r3, #29
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 0307 	and.w	r3, r3, #7
 80078a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80078a2:	7fbb      	ldrb	r3, [r7, #30]
 80078a4:	7f3a      	ldrb	r2, [r7, #28]
 80078a6:	f107 0120 	add.w	r1, r7, #32
 80078aa:	440a      	add	r2, r1
 80078ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80078b0:	fb02 f303 	mul.w	r3, r2, r3
 80078b4:	7f3a      	ldrb	r2, [r7, #28]
 80078b6:	f107 0120 	add.w	r1, r7, #32
 80078ba:	440a      	add	r2, r1
 80078bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80078c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80078cc:	7ffb      	ldrb	r3, [r7, #31]
 80078ce:	7f7a      	ldrb	r2, [r7, #29]
 80078d0:	f107 0120 	add.w	r1, r7, #32
 80078d4:	440a      	add	r2, r1
 80078d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80078da:	fb02 f303 	mul.w	r3, r2, r3
 80078de:	7f7a      	ldrb	r2, [r7, #29]
 80078e0:	f107 0120 	add.w	r1, r7, #32
 80078e4:	440a      	add	r2, r1
 80078e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80078ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078f6:	bf00      	nop
 80078f8:	3724      	adds	r7, #36	; 0x24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	080082f8 	.word	0x080082f8
 8007908:	08008300 	.word	0x08008300

0800790c <__errno>:
 800790c:	4b01      	ldr	r3, [pc, #4]	; (8007914 <__errno+0x8>)
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	2000000c 	.word	0x2000000c

08007918 <__libc_init_array>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4e0d      	ldr	r6, [pc, #52]	; (8007950 <__libc_init_array+0x38>)
 800791c:	2500      	movs	r5, #0
 800791e:	4c0d      	ldr	r4, [pc, #52]	; (8007954 <__libc_init_array+0x3c>)
 8007920:	1ba4      	subs	r4, r4, r6
 8007922:	10a4      	asrs	r4, r4, #2
 8007924:	42a5      	cmp	r5, r4
 8007926:	d109      	bne.n	800793c <__libc_init_array+0x24>
 8007928:	4e0b      	ldr	r6, [pc, #44]	; (8007958 <__libc_init_array+0x40>)
 800792a:	2500      	movs	r5, #0
 800792c:	4c0b      	ldr	r4, [pc, #44]	; (800795c <__libc_init_array+0x44>)
 800792e:	f000 fc35 	bl	800819c <_init>
 8007932:	1ba4      	subs	r4, r4, r6
 8007934:	10a4      	asrs	r4, r4, #2
 8007936:	42a5      	cmp	r5, r4
 8007938:	d105      	bne.n	8007946 <__libc_init_array+0x2e>
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007940:	3501      	adds	r5, #1
 8007942:	4798      	blx	r3
 8007944:	e7ee      	b.n	8007924 <__libc_init_array+0xc>
 8007946:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800794a:	3501      	adds	r5, #1
 800794c:	4798      	blx	r3
 800794e:	e7f2      	b.n	8007936 <__libc_init_array+0x1e>
 8007950:	080083a0 	.word	0x080083a0
 8007954:	080083a0 	.word	0x080083a0
 8007958:	080083a0 	.word	0x080083a0
 800795c:	080083a4 	.word	0x080083a4

08007960 <memset>:
 8007960:	4402      	add	r2, r0
 8007962:	4603      	mov	r3, r0
 8007964:	4293      	cmp	r3, r2
 8007966:	d100      	bne.n	800796a <memset+0xa>
 8007968:	4770      	bx	lr
 800796a:	f803 1b01 	strb.w	r1, [r3], #1
 800796e:	e7f9      	b.n	8007964 <memset+0x4>

08007970 <siprintf>:
 8007970:	b40e      	push	{r1, r2, r3}
 8007972:	b500      	push	{lr}
 8007974:	b09c      	sub	sp, #112	; 0x70
 8007976:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800797a:	ab1d      	add	r3, sp, #116	; 0x74
 800797c:	9002      	str	r0, [sp, #8]
 800797e:	9006      	str	r0, [sp, #24]
 8007980:	9107      	str	r1, [sp, #28]
 8007982:	9104      	str	r1, [sp, #16]
 8007984:	4808      	ldr	r0, [pc, #32]	; (80079a8 <siprintf+0x38>)
 8007986:	4909      	ldr	r1, [pc, #36]	; (80079ac <siprintf+0x3c>)
 8007988:	f853 2b04 	ldr.w	r2, [r3], #4
 800798c:	9105      	str	r1, [sp, #20]
 800798e:	a902      	add	r1, sp, #8
 8007990:	6800      	ldr	r0, [r0, #0]
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	f000 f866 	bl	8007a64 <_svfiprintf_r>
 8007998:	9b02      	ldr	r3, [sp, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	b01c      	add	sp, #112	; 0x70
 80079a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079a4:	b003      	add	sp, #12
 80079a6:	4770      	bx	lr
 80079a8:	2000000c 	.word	0x2000000c
 80079ac:	ffff0208 	.word	0xffff0208

080079b0 <__ssputs_r>:
 80079b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b4:	688e      	ldr	r6, [r1, #8]
 80079b6:	4682      	mov	sl, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	4690      	mov	r8, r2
 80079bc:	429e      	cmp	r6, r3
 80079be:	4699      	mov	r9, r3
 80079c0:	d837      	bhi.n	8007a32 <__ssputs_r+0x82>
 80079c2:	898a      	ldrh	r2, [r1, #12]
 80079c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079c8:	d031      	beq.n	8007a2e <__ssputs_r+0x7e>
 80079ca:	6825      	ldr	r5, [r4, #0]
 80079cc:	2302      	movs	r3, #2
 80079ce:	6909      	ldr	r1, [r1, #16]
 80079d0:	1a6f      	subs	r7, r5, r1
 80079d2:	6965      	ldr	r5, [r4, #20]
 80079d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80079dc:	f109 0301 	add.w	r3, r9, #1
 80079e0:	443b      	add	r3, r7
 80079e2:	429d      	cmp	r5, r3
 80079e4:	bf38      	it	cc
 80079e6:	461d      	movcc	r5, r3
 80079e8:	0553      	lsls	r3, r2, #21
 80079ea:	d530      	bpl.n	8007a4e <__ssputs_r+0x9e>
 80079ec:	4629      	mov	r1, r5
 80079ee:	f000 fb3b 	bl	8008068 <_malloc_r>
 80079f2:	4606      	mov	r6, r0
 80079f4:	b950      	cbnz	r0, 8007a0c <__ssputs_r+0x5c>
 80079f6:	230c      	movs	r3, #12
 80079f8:	f04f 30ff 	mov.w	r0, #4294967295
 80079fc:	f8ca 3000 	str.w	r3, [sl]
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0c:	463a      	mov	r2, r7
 8007a0e:	6921      	ldr	r1, [r4, #16]
 8007a10:	f000 fab8 	bl	8007f84 <memcpy>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	6126      	str	r6, [r4, #16]
 8007a22:	443e      	add	r6, r7
 8007a24:	6165      	str	r5, [r4, #20]
 8007a26:	1bed      	subs	r5, r5, r7
 8007a28:	6026      	str	r6, [r4, #0]
 8007a2a:	464e      	mov	r6, r9
 8007a2c:	60a5      	str	r5, [r4, #8]
 8007a2e:	454e      	cmp	r6, r9
 8007a30:	d900      	bls.n	8007a34 <__ssputs_r+0x84>
 8007a32:	464e      	mov	r6, r9
 8007a34:	4632      	mov	r2, r6
 8007a36:	4641      	mov	r1, r8
 8007a38:	6820      	ldr	r0, [r4, #0]
 8007a3a:	f000 faae 	bl	8007f9a <memmove>
 8007a3e:	68a3      	ldr	r3, [r4, #8]
 8007a40:	2000      	movs	r0, #0
 8007a42:	1b9b      	subs	r3, r3, r6
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	441e      	add	r6, r3
 8007a4a:	6026      	str	r6, [r4, #0]
 8007a4c:	e7dc      	b.n	8007a08 <__ssputs_r+0x58>
 8007a4e:	462a      	mov	r2, r5
 8007a50:	f000 fb64 	bl	800811c <_realloc_r>
 8007a54:	4606      	mov	r6, r0
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d1e2      	bne.n	8007a20 <__ssputs_r+0x70>
 8007a5a:	6921      	ldr	r1, [r4, #16]
 8007a5c:	4650      	mov	r0, sl
 8007a5e:	f000 fab5 	bl	8007fcc <_free_r>
 8007a62:	e7c8      	b.n	80079f6 <__ssputs_r+0x46>

08007a64 <_svfiprintf_r>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	461d      	mov	r5, r3
 8007a6a:	898b      	ldrh	r3, [r1, #12]
 8007a6c:	b09d      	sub	sp, #116	; 0x74
 8007a6e:	4680      	mov	r8, r0
 8007a70:	061f      	lsls	r7, r3, #24
 8007a72:	460c      	mov	r4, r1
 8007a74:	4616      	mov	r6, r2
 8007a76:	d50f      	bpl.n	8007a98 <_svfiprintf_r+0x34>
 8007a78:	690b      	ldr	r3, [r1, #16]
 8007a7a:	b96b      	cbnz	r3, 8007a98 <_svfiprintf_r+0x34>
 8007a7c:	2140      	movs	r1, #64	; 0x40
 8007a7e:	f000 faf3 	bl	8008068 <_malloc_r>
 8007a82:	6020      	str	r0, [r4, #0]
 8007a84:	6120      	str	r0, [r4, #16]
 8007a86:	b928      	cbnz	r0, 8007a94 <_svfiprintf_r+0x30>
 8007a88:	230c      	movs	r3, #12
 8007a8a:	f8c8 3000 	str.w	r3, [r8]
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a92:	e0c8      	b.n	8007c26 <_svfiprintf_r+0x1c2>
 8007a94:	2340      	movs	r3, #64	; 0x40
 8007a96:	6163      	str	r3, [r4, #20]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f04f 0b01 	mov.w	fp, #1
 8007a9e:	9503      	str	r5, [sp, #12]
 8007aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa2:	2320      	movs	r3, #32
 8007aa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aa8:	2330      	movs	r3, #48	; 0x30
 8007aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aae:	4637      	mov	r7, r6
 8007ab0:	463d      	mov	r5, r7
 8007ab2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ab6:	b10b      	cbz	r3, 8007abc <_svfiprintf_r+0x58>
 8007ab8:	2b25      	cmp	r3, #37	; 0x25
 8007aba:	d13e      	bne.n	8007b3a <_svfiprintf_r+0xd6>
 8007abc:	ebb7 0a06 	subs.w	sl, r7, r6
 8007ac0:	d00b      	beq.n	8007ada <_svfiprintf_r+0x76>
 8007ac2:	4653      	mov	r3, sl
 8007ac4:	4632      	mov	r2, r6
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4640      	mov	r0, r8
 8007aca:	f7ff ff71 	bl	80079b0 <__ssputs_r>
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f000 80a4 	beq.w	8007c1c <_svfiprintf_r+0x1b8>
 8007ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad6:	4453      	add	r3, sl
 8007ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8007ada:	783b      	ldrb	r3, [r7, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 809d 	beq.w	8007c1c <_svfiprintf_r+0x1b8>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae8:	9304      	str	r3, [sp, #16]
 8007aea:	9307      	str	r3, [sp, #28]
 8007aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007af0:	931a      	str	r3, [sp, #104]	; 0x68
 8007af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af6:	462f      	mov	r7, r5
 8007af8:	2205      	movs	r2, #5
 8007afa:	4851      	ldr	r0, [pc, #324]	; (8007c40 <_svfiprintf_r+0x1dc>)
 8007afc:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b00:	f000 fa32 	bl	8007f68 <memchr>
 8007b04:	9b04      	ldr	r3, [sp, #16]
 8007b06:	b9d0      	cbnz	r0, 8007b3e <_svfiprintf_r+0xda>
 8007b08:	06d9      	lsls	r1, r3, #27
 8007b0a:	bf44      	itt	mi
 8007b0c:	2220      	movmi	r2, #32
 8007b0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b12:	071a      	lsls	r2, r3, #28
 8007b14:	bf44      	itt	mi
 8007b16:	222b      	movmi	r2, #43	; 0x2b
 8007b18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b1c:	782a      	ldrb	r2, [r5, #0]
 8007b1e:	2a2a      	cmp	r2, #42	; 0x2a
 8007b20:	d015      	beq.n	8007b4e <_svfiprintf_r+0xea>
 8007b22:	462f      	mov	r7, r5
 8007b24:	9a07      	ldr	r2, [sp, #28]
 8007b26:	2000      	movs	r0, #0
 8007b28:	250a      	movs	r5, #10
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b30:	3b30      	subs	r3, #48	; 0x30
 8007b32:	2b09      	cmp	r3, #9
 8007b34:	d94d      	bls.n	8007bd2 <_svfiprintf_r+0x16e>
 8007b36:	b1b8      	cbz	r0, 8007b68 <_svfiprintf_r+0x104>
 8007b38:	e00f      	b.n	8007b5a <_svfiprintf_r+0xf6>
 8007b3a:	462f      	mov	r7, r5
 8007b3c:	e7b8      	b.n	8007ab0 <_svfiprintf_r+0x4c>
 8007b3e:	4a40      	ldr	r2, [pc, #256]	; (8007c40 <_svfiprintf_r+0x1dc>)
 8007b40:	463d      	mov	r5, r7
 8007b42:	1a80      	subs	r0, r0, r2
 8007b44:	fa0b f000 	lsl.w	r0, fp, r0
 8007b48:	4318      	orrs	r0, r3
 8007b4a:	9004      	str	r0, [sp, #16]
 8007b4c:	e7d3      	b.n	8007af6 <_svfiprintf_r+0x92>
 8007b4e:	9a03      	ldr	r2, [sp, #12]
 8007b50:	1d11      	adds	r1, r2, #4
 8007b52:	6812      	ldr	r2, [r2, #0]
 8007b54:	2a00      	cmp	r2, #0
 8007b56:	9103      	str	r1, [sp, #12]
 8007b58:	db01      	blt.n	8007b5e <_svfiprintf_r+0xfa>
 8007b5a:	9207      	str	r2, [sp, #28]
 8007b5c:	e004      	b.n	8007b68 <_svfiprintf_r+0x104>
 8007b5e:	4252      	negs	r2, r2
 8007b60:	f043 0302 	orr.w	r3, r3, #2
 8007b64:	9207      	str	r2, [sp, #28]
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	783b      	ldrb	r3, [r7, #0]
 8007b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b6c:	d10c      	bne.n	8007b88 <_svfiprintf_r+0x124>
 8007b6e:	787b      	ldrb	r3, [r7, #1]
 8007b70:	2b2a      	cmp	r3, #42	; 0x2a
 8007b72:	d133      	bne.n	8007bdc <_svfiprintf_r+0x178>
 8007b74:	9b03      	ldr	r3, [sp, #12]
 8007b76:	3702      	adds	r7, #2
 8007b78:	1d1a      	adds	r2, r3, #4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	9203      	str	r2, [sp, #12]
 8007b80:	bfb8      	it	lt
 8007b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b86:	9305      	str	r3, [sp, #20]
 8007b88:	4d2e      	ldr	r5, [pc, #184]	; (8007c44 <_svfiprintf_r+0x1e0>)
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	7839      	ldrb	r1, [r7, #0]
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 f9ea 	bl	8007f68 <memchr>
 8007b94:	b138      	cbz	r0, 8007ba6 <_svfiprintf_r+0x142>
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	1b40      	subs	r0, r0, r5
 8007b9a:	3701      	adds	r7, #1
 8007b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	4303      	orrs	r3, r0
 8007ba4:	9304      	str	r3, [sp, #16]
 8007ba6:	7839      	ldrb	r1, [r7, #0]
 8007ba8:	2206      	movs	r2, #6
 8007baa:	4827      	ldr	r0, [pc, #156]	; (8007c48 <_svfiprintf_r+0x1e4>)
 8007bac:	1c7e      	adds	r6, r7, #1
 8007bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bb2:	f000 f9d9 	bl	8007f68 <memchr>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d038      	beq.n	8007c2c <_svfiprintf_r+0x1c8>
 8007bba:	4b24      	ldr	r3, [pc, #144]	; (8007c4c <_svfiprintf_r+0x1e8>)
 8007bbc:	bb13      	cbnz	r3, 8007c04 <_svfiprintf_r+0x1a0>
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	3307      	adds	r3, #7
 8007bc2:	f023 0307 	bic.w	r3, r3, #7
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	9303      	str	r3, [sp, #12]
 8007bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bcc:	444b      	add	r3, r9
 8007bce:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd0:	e76d      	b.n	8007aae <_svfiprintf_r+0x4a>
 8007bd2:	fb05 3202 	mla	r2, r5, r2, r3
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	460f      	mov	r7, r1
 8007bda:	e7a6      	b.n	8007b2a <_svfiprintf_r+0xc6>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	3701      	adds	r7, #1
 8007be0:	250a      	movs	r5, #10
 8007be2:	4619      	mov	r1, r3
 8007be4:	9305      	str	r3, [sp, #20]
 8007be6:	4638      	mov	r0, r7
 8007be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bec:	3a30      	subs	r2, #48	; 0x30
 8007bee:	2a09      	cmp	r2, #9
 8007bf0:	d903      	bls.n	8007bfa <_svfiprintf_r+0x196>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0c8      	beq.n	8007b88 <_svfiprintf_r+0x124>
 8007bf6:	9105      	str	r1, [sp, #20]
 8007bf8:	e7c6      	b.n	8007b88 <_svfiprintf_r+0x124>
 8007bfa:	fb05 2101 	mla	r1, r5, r1, r2
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4607      	mov	r7, r0
 8007c02:	e7f0      	b.n	8007be6 <_svfiprintf_r+0x182>
 8007c04:	ab03      	add	r3, sp, #12
 8007c06:	4622      	mov	r2, r4
 8007c08:	a904      	add	r1, sp, #16
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <_svfiprintf_r+0x1ec>)
 8007c10:	e000      	b.n	8007c14 <_svfiprintf_r+0x1b0>
 8007c12:	bf00      	nop
 8007c14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c18:	4681      	mov	r9, r0
 8007c1a:	d1d6      	bne.n	8007bca <_svfiprintf_r+0x166>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	065b      	lsls	r3, r3, #25
 8007c20:	f53f af35 	bmi.w	8007a8e <_svfiprintf_r+0x2a>
 8007c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c26:	b01d      	add	sp, #116	; 0x74
 8007c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2c:	ab03      	add	r3, sp, #12
 8007c2e:	4622      	mov	r2, r4
 8007c30:	a904      	add	r1, sp, #16
 8007c32:	4640      	mov	r0, r8
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <_svfiprintf_r+0x1ec>)
 8007c38:	f000 f884 	bl	8007d44 <_printf_i>
 8007c3c:	e7ea      	b.n	8007c14 <_svfiprintf_r+0x1b0>
 8007c3e:	bf00      	nop
 8007c40:	08008360 	.word	0x08008360
 8007c44:	08008366 	.word	0x08008366
 8007c48:	0800836a 	.word	0x0800836a
 8007c4c:	00000000 	.word	0x00000000
 8007c50:	080079b1 	.word	0x080079b1

08007c54 <_printf_common>:
 8007c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	4691      	mov	r9, r2
 8007c5a:	461f      	mov	r7, r3
 8007c5c:	688a      	ldr	r2, [r1, #8]
 8007c5e:	4606      	mov	r6, r0
 8007c60:	690b      	ldr	r3, [r1, #16]
 8007c62:	460c      	mov	r4, r1
 8007c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	bfb8      	it	lt
 8007c6c:	4613      	movlt	r3, r2
 8007c6e:	f8c9 3000 	str.w	r3, [r9]
 8007c72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c76:	b112      	cbz	r2, 8007c7e <_printf_common+0x2a>
 8007c78:	3301      	adds	r3, #1
 8007c7a:	f8c9 3000 	str.w	r3, [r9]
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	0699      	lsls	r1, r3, #26
 8007c82:	bf42      	ittt	mi
 8007c84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c88:	3302      	addmi	r3, #2
 8007c8a:	f8c9 3000 	strmi.w	r3, [r9]
 8007c8e:	6825      	ldr	r5, [r4, #0]
 8007c90:	f015 0506 	ands.w	r5, r5, #6
 8007c94:	d107      	bne.n	8007ca6 <_printf_common+0x52>
 8007c96:	f104 0a19 	add.w	sl, r4, #25
 8007c9a:	68e3      	ldr	r3, [r4, #12]
 8007c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8007ca0:	1a9b      	subs	r3, r3, r2
 8007ca2:	42ab      	cmp	r3, r5
 8007ca4:	dc2b      	bgt.n	8007cfe <_printf_common+0xaa>
 8007ca6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007caa:	6822      	ldr	r2, [r4, #0]
 8007cac:	3300      	adds	r3, #0
 8007cae:	bf18      	it	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	0692      	lsls	r2, r2, #26
 8007cb4:	d430      	bmi.n	8007d18 <_printf_common+0xc4>
 8007cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cba:	4639      	mov	r1, r7
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	47c0      	blx	r8
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d023      	beq.n	8007d0c <_printf_common+0xb8>
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	341a      	adds	r4, #26
 8007cc8:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8007ccc:	f003 0306 	and.w	r3, r3, #6
 8007cd0:	f8d9 2000 	ldr.w	r2, [r9]
 8007cd4:	f04f 0900 	mov.w	r9, #0
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007cde:	bf08      	it	eq
 8007ce0:	1aad      	subeq	r5, r5, r2
 8007ce2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007ce6:	bf14      	ite	ne
 8007ce8:	2500      	movne	r5, #0
 8007cea:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	bfc4      	itt	gt
 8007cf2:	1a9b      	subgt	r3, r3, r2
 8007cf4:	18ed      	addgt	r5, r5, r3
 8007cf6:	454d      	cmp	r5, r9
 8007cf8:	d11a      	bne.n	8007d30 <_printf_common+0xdc>
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e008      	b.n	8007d10 <_printf_common+0xbc>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4652      	mov	r2, sl
 8007d02:	4639      	mov	r1, r7
 8007d04:	4630      	mov	r0, r6
 8007d06:	47c0      	blx	r8
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d103      	bne.n	8007d14 <_printf_common+0xc0>
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d14:	3501      	adds	r5, #1
 8007d16:	e7c0      	b.n	8007c9a <_printf_common+0x46>
 8007d18:	18e1      	adds	r1, r4, r3
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	2030      	movs	r0, #48	; 0x30
 8007d1e:	3302      	adds	r3, #2
 8007d20:	4422      	add	r2, r4
 8007d22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d2e:	e7c2      	b.n	8007cb6 <_printf_common+0x62>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4622      	mov	r2, r4
 8007d34:	4639      	mov	r1, r7
 8007d36:	4630      	mov	r0, r6
 8007d38:	47c0      	blx	r8
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d0e6      	beq.n	8007d0c <_printf_common+0xb8>
 8007d3e:	f109 0901 	add.w	r9, r9, #1
 8007d42:	e7d8      	b.n	8007cf6 <_printf_common+0xa2>

08007d44 <_printf_i>:
 8007d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	7e09      	ldrb	r1, [r1, #24]
 8007d50:	b085      	sub	sp, #20
 8007d52:	4617      	mov	r7, r2
 8007d54:	4606      	mov	r6, r0
 8007d56:	296e      	cmp	r1, #110	; 0x6e
 8007d58:	4698      	mov	r8, r3
 8007d5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d5c:	f000 80b3 	beq.w	8007ec6 <_printf_i+0x182>
 8007d60:	d822      	bhi.n	8007da8 <_printf_i+0x64>
 8007d62:	2963      	cmp	r1, #99	; 0x63
 8007d64:	d036      	beq.n	8007dd4 <_printf_i+0x90>
 8007d66:	d80a      	bhi.n	8007d7e <_printf_i+0x3a>
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	f000 80b9 	beq.w	8007ee0 <_printf_i+0x19c>
 8007d6e:	2958      	cmp	r1, #88	; 0x58
 8007d70:	f000 8083 	beq.w	8007e7a <_printf_i+0x136>
 8007d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007d7c:	e032      	b.n	8007de4 <_printf_i+0xa0>
 8007d7e:	2964      	cmp	r1, #100	; 0x64
 8007d80:	d001      	beq.n	8007d86 <_printf_i+0x42>
 8007d82:	2969      	cmp	r1, #105	; 0x69
 8007d84:	d1f6      	bne.n	8007d74 <_printf_i+0x30>
 8007d86:	6820      	ldr	r0, [r4, #0]
 8007d88:	6813      	ldr	r3, [r2, #0]
 8007d8a:	0605      	lsls	r5, r0, #24
 8007d8c:	f103 0104 	add.w	r1, r3, #4
 8007d90:	d52a      	bpl.n	8007de8 <_printf_i+0xa4>
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6011      	str	r1, [r2, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	da03      	bge.n	8007da2 <_printf_i+0x5e>
 8007d9a:	222d      	movs	r2, #45	; 0x2d
 8007d9c:	425b      	negs	r3, r3
 8007d9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007da2:	486f      	ldr	r0, [pc, #444]	; (8007f60 <_printf_i+0x21c>)
 8007da4:	220a      	movs	r2, #10
 8007da6:	e039      	b.n	8007e1c <_printf_i+0xd8>
 8007da8:	2973      	cmp	r1, #115	; 0x73
 8007daa:	f000 809d 	beq.w	8007ee8 <_printf_i+0x1a4>
 8007dae:	d808      	bhi.n	8007dc2 <_printf_i+0x7e>
 8007db0:	296f      	cmp	r1, #111	; 0x6f
 8007db2:	d020      	beq.n	8007df6 <_printf_i+0xb2>
 8007db4:	2970      	cmp	r1, #112	; 0x70
 8007db6:	d1dd      	bne.n	8007d74 <_printf_i+0x30>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	f043 0320 	orr.w	r3, r3, #32
 8007dbe:	6023      	str	r3, [r4, #0]
 8007dc0:	e003      	b.n	8007dca <_printf_i+0x86>
 8007dc2:	2975      	cmp	r1, #117	; 0x75
 8007dc4:	d017      	beq.n	8007df6 <_printf_i+0xb2>
 8007dc6:	2978      	cmp	r1, #120	; 0x78
 8007dc8:	d1d4      	bne.n	8007d74 <_printf_i+0x30>
 8007dca:	2378      	movs	r3, #120	; 0x78
 8007dcc:	4865      	ldr	r0, [pc, #404]	; (8007f64 <_printf_i+0x220>)
 8007dce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dd2:	e055      	b.n	8007e80 <_printf_i+0x13c>
 8007dd4:	6813      	ldr	r3, [r2, #0]
 8007dd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dda:	1d19      	adds	r1, r3, #4
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6011      	str	r1, [r2, #0]
 8007de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007de4:	2301      	movs	r3, #1
 8007de6:	e08c      	b.n	8007f02 <_printf_i+0x1be>
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dee:	6011      	str	r1, [r2, #0]
 8007df0:	bf18      	it	ne
 8007df2:	b21b      	sxthne	r3, r3
 8007df4:	e7cf      	b.n	8007d96 <_printf_i+0x52>
 8007df6:	6813      	ldr	r3, [r2, #0]
 8007df8:	6825      	ldr	r5, [r4, #0]
 8007dfa:	1d18      	adds	r0, r3, #4
 8007dfc:	6010      	str	r0, [r2, #0]
 8007dfe:	0628      	lsls	r0, r5, #24
 8007e00:	d501      	bpl.n	8007e06 <_printf_i+0xc2>
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	e002      	b.n	8007e0c <_printf_i+0xc8>
 8007e06:	0668      	lsls	r0, r5, #25
 8007e08:	d5fb      	bpl.n	8007e02 <_printf_i+0xbe>
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	296f      	cmp	r1, #111	; 0x6f
 8007e0e:	4854      	ldr	r0, [pc, #336]	; (8007f60 <_printf_i+0x21c>)
 8007e10:	bf14      	ite	ne
 8007e12:	220a      	movne	r2, #10
 8007e14:	2208      	moveq	r2, #8
 8007e16:	2100      	movs	r1, #0
 8007e18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e1c:	6865      	ldr	r5, [r4, #4]
 8007e1e:	2d00      	cmp	r5, #0
 8007e20:	60a5      	str	r5, [r4, #8]
 8007e22:	f2c0 8095 	blt.w	8007f50 <_printf_i+0x20c>
 8007e26:	6821      	ldr	r1, [r4, #0]
 8007e28:	f021 0104 	bic.w	r1, r1, #4
 8007e2c:	6021      	str	r1, [r4, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d13d      	bne.n	8007eae <_printf_i+0x16a>
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	f040 808e 	bne.w	8007f54 <_printf_i+0x210>
 8007e38:	4665      	mov	r5, ip
 8007e3a:	2a08      	cmp	r2, #8
 8007e3c:	d10b      	bne.n	8007e56 <_printf_i+0x112>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	07db      	lsls	r3, r3, #31
 8007e42:	d508      	bpl.n	8007e56 <_printf_i+0x112>
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	6862      	ldr	r2, [r4, #4]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	bfde      	ittt	le
 8007e4c:	2330      	movle	r3, #48	; 0x30
 8007e4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e56:	ebac 0305 	sub.w	r3, ip, r5
 8007e5a:	6123      	str	r3, [r4, #16]
 8007e5c:	f8cd 8000 	str.w	r8, [sp]
 8007e60:	463b      	mov	r3, r7
 8007e62:	aa03      	add	r2, sp, #12
 8007e64:	4621      	mov	r1, r4
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff fef4 	bl	8007c54 <_printf_common>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d14d      	bne.n	8007f0c <_printf_i+0x1c8>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295
 8007e74:	b005      	add	sp, #20
 8007e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e7a:	4839      	ldr	r0, [pc, #228]	; (8007f60 <_printf_i+0x21c>)
 8007e7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007e80:	6813      	ldr	r3, [r2, #0]
 8007e82:	6821      	ldr	r1, [r4, #0]
 8007e84:	1d1d      	adds	r5, r3, #4
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6015      	str	r5, [r2, #0]
 8007e8a:	060a      	lsls	r2, r1, #24
 8007e8c:	d50b      	bpl.n	8007ea6 <_printf_i+0x162>
 8007e8e:	07ca      	lsls	r2, r1, #31
 8007e90:	bf44      	itt	mi
 8007e92:	f041 0120 	orrmi.w	r1, r1, #32
 8007e96:	6021      	strmi	r1, [r4, #0]
 8007e98:	b91b      	cbnz	r3, 8007ea2 <_printf_i+0x15e>
 8007e9a:	6822      	ldr	r2, [r4, #0]
 8007e9c:	f022 0220 	bic.w	r2, r2, #32
 8007ea0:	6022      	str	r2, [r4, #0]
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	e7b7      	b.n	8007e16 <_printf_i+0xd2>
 8007ea6:	064d      	lsls	r5, r1, #25
 8007ea8:	bf48      	it	mi
 8007eaa:	b29b      	uxthmi	r3, r3
 8007eac:	e7ef      	b.n	8007e8e <_printf_i+0x14a>
 8007eae:	4665      	mov	r5, ip
 8007eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eb4:	fb02 3311 	mls	r3, r2, r1, r3
 8007eb8:	5cc3      	ldrb	r3, [r0, r3]
 8007eba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	2900      	cmp	r1, #0
 8007ec2:	d1f5      	bne.n	8007eb0 <_printf_i+0x16c>
 8007ec4:	e7b9      	b.n	8007e3a <_printf_i+0xf6>
 8007ec6:	6813      	ldr	r3, [r2, #0]
 8007ec8:	6825      	ldr	r5, [r4, #0]
 8007eca:	1d18      	adds	r0, r3, #4
 8007ecc:	6961      	ldr	r1, [r4, #20]
 8007ece:	6010      	str	r0, [r2, #0]
 8007ed0:	0628      	lsls	r0, r5, #24
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	d501      	bpl.n	8007eda <_printf_i+0x196>
 8007ed6:	6019      	str	r1, [r3, #0]
 8007ed8:	e002      	b.n	8007ee0 <_printf_i+0x19c>
 8007eda:	066a      	lsls	r2, r5, #25
 8007edc:	d5fb      	bpl.n	8007ed6 <_printf_i+0x192>
 8007ede:	8019      	strh	r1, [r3, #0]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4665      	mov	r5, ip
 8007ee4:	6123      	str	r3, [r4, #16]
 8007ee6:	e7b9      	b.n	8007e5c <_printf_i+0x118>
 8007ee8:	6813      	ldr	r3, [r2, #0]
 8007eea:	1d19      	adds	r1, r3, #4
 8007eec:	6011      	str	r1, [r2, #0]
 8007eee:	2100      	movs	r1, #0
 8007ef0:	681d      	ldr	r5, [r3, #0]
 8007ef2:	6862      	ldr	r2, [r4, #4]
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	f000 f837 	bl	8007f68 <memchr>
 8007efa:	b108      	cbz	r0, 8007f00 <_printf_i+0x1bc>
 8007efc:	1b40      	subs	r0, r0, r5
 8007efe:	6060      	str	r0, [r4, #4]
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	6123      	str	r3, [r4, #16]
 8007f04:	2300      	movs	r3, #0
 8007f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f0a:	e7a7      	b.n	8007e5c <_printf_i+0x118>
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	462a      	mov	r2, r5
 8007f10:	4639      	mov	r1, r7
 8007f12:	4630      	mov	r0, r6
 8007f14:	47c0      	blx	r8
 8007f16:	3001      	adds	r0, #1
 8007f18:	d0aa      	beq.n	8007e70 <_printf_i+0x12c>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	079b      	lsls	r3, r3, #30
 8007f1e:	d413      	bmi.n	8007f48 <_printf_i+0x204>
 8007f20:	68e0      	ldr	r0, [r4, #12]
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	4298      	cmp	r0, r3
 8007f26:	bfb8      	it	lt
 8007f28:	4618      	movlt	r0, r3
 8007f2a:	e7a3      	b.n	8007e74 <_printf_i+0x130>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	464a      	mov	r2, r9
 8007f30:	4639      	mov	r1, r7
 8007f32:	4630      	mov	r0, r6
 8007f34:	47c0      	blx	r8
 8007f36:	3001      	adds	r0, #1
 8007f38:	d09a      	beq.n	8007e70 <_printf_i+0x12c>
 8007f3a:	3501      	adds	r5, #1
 8007f3c:	68e3      	ldr	r3, [r4, #12]
 8007f3e:	9a03      	ldr	r2, [sp, #12]
 8007f40:	1a9b      	subs	r3, r3, r2
 8007f42:	42ab      	cmp	r3, r5
 8007f44:	dcf2      	bgt.n	8007f2c <_printf_i+0x1e8>
 8007f46:	e7eb      	b.n	8007f20 <_printf_i+0x1dc>
 8007f48:	2500      	movs	r5, #0
 8007f4a:	f104 0919 	add.w	r9, r4, #25
 8007f4e:	e7f5      	b.n	8007f3c <_printf_i+0x1f8>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1ac      	bne.n	8007eae <_printf_i+0x16a>
 8007f54:	7803      	ldrb	r3, [r0, #0]
 8007f56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f5e:	e76c      	b.n	8007e3a <_printf_i+0xf6>
 8007f60:	08008371 	.word	0x08008371
 8007f64:	08008382 	.word	0x08008382

08007f68 <memchr>:
 8007f68:	b2c9      	uxtb	r1, r1
 8007f6a:	4402      	add	r2, r0
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	4290      	cmp	r0, r2
 8007f70:	4603      	mov	r3, r0
 8007f72:	d101      	bne.n	8007f78 <memchr+0x10>
 8007f74:	2300      	movs	r3, #0
 8007f76:	e003      	b.n	8007f80 <memchr+0x18>
 8007f78:	781c      	ldrb	r4, [r3, #0]
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	428c      	cmp	r4, r1
 8007f7e:	d1f6      	bne.n	8007f6e <memchr+0x6>
 8007f80:	4618      	mov	r0, r3
 8007f82:	bd10      	pop	{r4, pc}

08007f84 <memcpy>:
 8007f84:	1e43      	subs	r3, r0, #1
 8007f86:	440a      	add	r2, r1
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	4291      	cmp	r1, r2
 8007f8c:	d100      	bne.n	8007f90 <memcpy+0xc>
 8007f8e:	bd10      	pop	{r4, pc}
 8007f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f98:	e7f7      	b.n	8007f8a <memcpy+0x6>

08007f9a <memmove>:
 8007f9a:	4288      	cmp	r0, r1
 8007f9c:	eb01 0302 	add.w	r3, r1, r2
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	d807      	bhi.n	8007fb4 <memmove+0x1a>
 8007fa4:	1e42      	subs	r2, r0, #1
 8007fa6:	4299      	cmp	r1, r3
 8007fa8:	d00a      	beq.n	8007fc0 <memmove+0x26>
 8007faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fae:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007fb2:	e7f8      	b.n	8007fa6 <memmove+0xc>
 8007fb4:	4283      	cmp	r3, r0
 8007fb6:	d9f5      	bls.n	8007fa4 <memmove+0xa>
 8007fb8:	1881      	adds	r1, r0, r2
 8007fba:	1ad2      	subs	r2, r2, r3
 8007fbc:	42d3      	cmn	r3, r2
 8007fbe:	d100      	bne.n	8007fc2 <memmove+0x28>
 8007fc0:	bd10      	pop	{r4, pc}
 8007fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fc6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007fca:	e7f7      	b.n	8007fbc <memmove+0x22>

08007fcc <_free_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4605      	mov	r5, r0
 8007fd0:	2900      	cmp	r1, #0
 8007fd2:	d045      	beq.n	8008060 <_free_r+0x94>
 8007fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fd8:	1f0c      	subs	r4, r1, #4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bfb8      	it	lt
 8007fde:	18e4      	addlt	r4, r4, r3
 8007fe0:	f000 f8d2 	bl	8008188 <__malloc_lock>
 8007fe4:	4a1f      	ldr	r2, [pc, #124]	; (8008064 <_free_r+0x98>)
 8007fe6:	6813      	ldr	r3, [r2, #0]
 8007fe8:	4610      	mov	r0, r2
 8007fea:	b933      	cbnz	r3, 8007ffa <_free_r+0x2e>
 8007fec:	6063      	str	r3, [r4, #4]
 8007fee:	6014      	str	r4, [r2, #0]
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ff6:	f000 b8c8 	b.w	800818a <__malloc_unlock>
 8007ffa:	42a3      	cmp	r3, r4
 8007ffc:	d90c      	bls.n	8008018 <_free_r+0x4c>
 8007ffe:	6821      	ldr	r1, [r4, #0]
 8008000:	1862      	adds	r2, r4, r1
 8008002:	4293      	cmp	r3, r2
 8008004:	bf02      	ittt	eq
 8008006:	681a      	ldreq	r2, [r3, #0]
 8008008:	685b      	ldreq	r3, [r3, #4]
 800800a:	1852      	addeq	r2, r2, r1
 800800c:	6063      	str	r3, [r4, #4]
 800800e:	bf08      	it	eq
 8008010:	6022      	streq	r2, [r4, #0]
 8008012:	6004      	str	r4, [r0, #0]
 8008014:	e7ec      	b.n	8007ff0 <_free_r+0x24>
 8008016:	4613      	mov	r3, r2
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	b10a      	cbz	r2, 8008020 <_free_r+0x54>
 800801c:	42a2      	cmp	r2, r4
 800801e:	d9fa      	bls.n	8008016 <_free_r+0x4a>
 8008020:	6819      	ldr	r1, [r3, #0]
 8008022:	1858      	adds	r0, r3, r1
 8008024:	42a0      	cmp	r0, r4
 8008026:	d10b      	bne.n	8008040 <_free_r+0x74>
 8008028:	6820      	ldr	r0, [r4, #0]
 800802a:	4401      	add	r1, r0
 800802c:	1858      	adds	r0, r3, r1
 800802e:	6019      	str	r1, [r3, #0]
 8008030:	4282      	cmp	r2, r0
 8008032:	d1dd      	bne.n	8007ff0 <_free_r+0x24>
 8008034:	6810      	ldr	r0, [r2, #0]
 8008036:	6852      	ldr	r2, [r2, #4]
 8008038:	4401      	add	r1, r0
 800803a:	605a      	str	r2, [r3, #4]
 800803c:	6019      	str	r1, [r3, #0]
 800803e:	e7d7      	b.n	8007ff0 <_free_r+0x24>
 8008040:	d902      	bls.n	8008048 <_free_r+0x7c>
 8008042:	230c      	movs	r3, #12
 8008044:	602b      	str	r3, [r5, #0]
 8008046:	e7d3      	b.n	8007ff0 <_free_r+0x24>
 8008048:	6820      	ldr	r0, [r4, #0]
 800804a:	1821      	adds	r1, r4, r0
 800804c:	428a      	cmp	r2, r1
 800804e:	bf02      	ittt	eq
 8008050:	6811      	ldreq	r1, [r2, #0]
 8008052:	6852      	ldreq	r2, [r2, #4]
 8008054:	1809      	addeq	r1, r1, r0
 8008056:	6062      	str	r2, [r4, #4]
 8008058:	bf08      	it	eq
 800805a:	6021      	streq	r1, [r4, #0]
 800805c:	605c      	str	r4, [r3, #4]
 800805e:	e7c7      	b.n	8007ff0 <_free_r+0x24>
 8008060:	bd38      	pop	{r3, r4, r5, pc}
 8008062:	bf00      	nop
 8008064:	200258d4 	.word	0x200258d4

08008068 <_malloc_r>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	1ccd      	adds	r5, r1, #3
 800806c:	4606      	mov	r6, r0
 800806e:	f025 0503 	bic.w	r5, r5, #3
 8008072:	3508      	adds	r5, #8
 8008074:	2d0c      	cmp	r5, #12
 8008076:	bf38      	it	cc
 8008078:	250c      	movcc	r5, #12
 800807a:	2d00      	cmp	r5, #0
 800807c:	db01      	blt.n	8008082 <_malloc_r+0x1a>
 800807e:	42a9      	cmp	r1, r5
 8008080:	d903      	bls.n	800808a <_malloc_r+0x22>
 8008082:	230c      	movs	r3, #12
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	2000      	movs	r0, #0
 8008088:	bd70      	pop	{r4, r5, r6, pc}
 800808a:	f000 f87d 	bl	8008188 <__malloc_lock>
 800808e:	4a21      	ldr	r2, [pc, #132]	; (8008114 <_malloc_r+0xac>)
 8008090:	6814      	ldr	r4, [r2, #0]
 8008092:	4621      	mov	r1, r4
 8008094:	b991      	cbnz	r1, 80080bc <_malloc_r+0x54>
 8008096:	4c20      	ldr	r4, [pc, #128]	; (8008118 <_malloc_r+0xb0>)
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	b91b      	cbnz	r3, 80080a4 <_malloc_r+0x3c>
 800809c:	4630      	mov	r0, r6
 800809e:	f000 f863 	bl	8008168 <_sbrk_r>
 80080a2:	6020      	str	r0, [r4, #0]
 80080a4:	4629      	mov	r1, r5
 80080a6:	4630      	mov	r0, r6
 80080a8:	f000 f85e 	bl	8008168 <_sbrk_r>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d124      	bne.n	80080fa <_malloc_r+0x92>
 80080b0:	230c      	movs	r3, #12
 80080b2:	4630      	mov	r0, r6
 80080b4:	6033      	str	r3, [r6, #0]
 80080b6:	f000 f868 	bl	800818a <__malloc_unlock>
 80080ba:	e7e4      	b.n	8008086 <_malloc_r+0x1e>
 80080bc:	680b      	ldr	r3, [r1, #0]
 80080be:	1b5b      	subs	r3, r3, r5
 80080c0:	d418      	bmi.n	80080f4 <_malloc_r+0x8c>
 80080c2:	2b0b      	cmp	r3, #11
 80080c4:	d90f      	bls.n	80080e6 <_malloc_r+0x7e>
 80080c6:	18cc      	adds	r4, r1, r3
 80080c8:	600b      	str	r3, [r1, #0]
 80080ca:	50cd      	str	r5, [r1, r3]
 80080cc:	4630      	mov	r0, r6
 80080ce:	f000 f85c 	bl	800818a <__malloc_unlock>
 80080d2:	f104 000b 	add.w	r0, r4, #11
 80080d6:	1d23      	adds	r3, r4, #4
 80080d8:	f020 0007 	bic.w	r0, r0, #7
 80080dc:	1ac3      	subs	r3, r0, r3
 80080de:	d0d3      	beq.n	8008088 <_malloc_r+0x20>
 80080e0:	425a      	negs	r2, r3
 80080e2:	50e2      	str	r2, [r4, r3]
 80080e4:	e7d0      	b.n	8008088 <_malloc_r+0x20>
 80080e6:	428c      	cmp	r4, r1
 80080e8:	684b      	ldr	r3, [r1, #4]
 80080ea:	bf1a      	itte	ne
 80080ec:	6063      	strne	r3, [r4, #4]
 80080ee:	460c      	movne	r4, r1
 80080f0:	6013      	streq	r3, [r2, #0]
 80080f2:	e7eb      	b.n	80080cc <_malloc_r+0x64>
 80080f4:	460c      	mov	r4, r1
 80080f6:	6849      	ldr	r1, [r1, #4]
 80080f8:	e7cc      	b.n	8008094 <_malloc_r+0x2c>
 80080fa:	1cc4      	adds	r4, r0, #3
 80080fc:	f024 0403 	bic.w	r4, r4, #3
 8008100:	42a0      	cmp	r0, r4
 8008102:	d005      	beq.n	8008110 <_malloc_r+0xa8>
 8008104:	1a21      	subs	r1, r4, r0
 8008106:	4630      	mov	r0, r6
 8008108:	f000 f82e 	bl	8008168 <_sbrk_r>
 800810c:	3001      	adds	r0, #1
 800810e:	d0cf      	beq.n	80080b0 <_malloc_r+0x48>
 8008110:	6025      	str	r5, [r4, #0]
 8008112:	e7db      	b.n	80080cc <_malloc_r+0x64>
 8008114:	200258d4 	.word	0x200258d4
 8008118:	200258d8 	.word	0x200258d8

0800811c <_realloc_r>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	4607      	mov	r7, r0
 8008120:	4614      	mov	r4, r2
 8008122:	460e      	mov	r6, r1
 8008124:	b921      	cbnz	r1, 8008130 <_realloc_r+0x14>
 8008126:	4611      	mov	r1, r2
 8008128:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800812c:	f7ff bf9c 	b.w	8008068 <_malloc_r>
 8008130:	b922      	cbnz	r2, 800813c <_realloc_r+0x20>
 8008132:	4625      	mov	r5, r4
 8008134:	f7ff ff4a 	bl	8007fcc <_free_r>
 8008138:	4628      	mov	r0, r5
 800813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800813c:	f000 f826 	bl	800818c <_malloc_usable_size_r>
 8008140:	42a0      	cmp	r0, r4
 8008142:	d20f      	bcs.n	8008164 <_realloc_r+0x48>
 8008144:	4621      	mov	r1, r4
 8008146:	4638      	mov	r0, r7
 8008148:	f7ff ff8e 	bl	8008068 <_malloc_r>
 800814c:	4605      	mov	r5, r0
 800814e:	2800      	cmp	r0, #0
 8008150:	d0f2      	beq.n	8008138 <_realloc_r+0x1c>
 8008152:	4631      	mov	r1, r6
 8008154:	4622      	mov	r2, r4
 8008156:	f7ff ff15 	bl	8007f84 <memcpy>
 800815a:	4631      	mov	r1, r6
 800815c:	4638      	mov	r0, r7
 800815e:	f7ff ff35 	bl	8007fcc <_free_r>
 8008162:	e7e9      	b.n	8008138 <_realloc_r+0x1c>
 8008164:	4635      	mov	r5, r6
 8008166:	e7e7      	b.n	8008138 <_realloc_r+0x1c>

08008168 <_sbrk_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	2300      	movs	r3, #0
 800816c:	4c05      	ldr	r4, [pc, #20]	; (8008184 <_sbrk_r+0x1c>)
 800816e:	4605      	mov	r5, r0
 8008170:	4608      	mov	r0, r1
 8008172:	6023      	str	r3, [r4, #0]
 8008174:	f7f9 f9f0 	bl	8001558 <_sbrk>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_sbrk_r+0x1a>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	b103      	cbz	r3, 8008182 <_sbrk_r+0x1a>
 8008180:	602b      	str	r3, [r5, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	20025a90 	.word	0x20025a90

08008188 <__malloc_lock>:
 8008188:	4770      	bx	lr

0800818a <__malloc_unlock>:
 800818a:	4770      	bx	lr

0800818c <_malloc_usable_size_r>:
 800818c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008190:	1f18      	subs	r0, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfbc      	itt	lt
 8008196:	580b      	ldrlt	r3, [r1, r0]
 8008198:	18c0      	addlt	r0, r0, r3
 800819a:	4770      	bx	lr

0800819c <_init>:
 800819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819e:	bf00      	nop
 80081a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a2:	bc08      	pop	{r3}
 80081a4:	469e      	mov	lr, r3
 80081a6:	4770      	bx	lr

080081a8 <_fini>:
 80081a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081aa:	bf00      	nop
 80081ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ae:	bc08      	pop	{r3}
 80081b0:	469e      	mov	lr, r3
 80081b2:	4770      	bx	lr
 80081b4:	0000      	movs	r0, r0
	...
